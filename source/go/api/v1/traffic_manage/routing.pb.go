// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: routing.proto

package traffic_manage

import (
	model "github.com/polarismesh/specification/source/go/api/v1/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoutingPolicy int32

const (
	// Route by rule rule => RuleRoutingConfig
	RoutingPolicy_RulePolicy RoutingPolicy = 0
	// Route by destination metadata ==> MetadataRoutingConfig
	RoutingPolicy_MetadataPolicy RoutingPolicy = 1
	// Route by Nearby rule => NearByRoutingConfig
	RoutingPolicy_NearbyPolicy RoutingPolicy = 2
)

// Enum value maps for RoutingPolicy.
var (
	RoutingPolicy_name = map[int32]string{
		0: "RulePolicy",
		1: "MetadataPolicy",
		2: "NearbyPolicy",
	}
	RoutingPolicy_value = map[string]int32{
		"RulePolicy":     0,
		"MetadataPolicy": 1,
		"NearbyPolicy":   2,
	}
)

func (x RoutingPolicy) Enum() *RoutingPolicy {
	p := new(RoutingPolicy)
	*p = x
	return p
}

func (x RoutingPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_routing_proto_enumTypes[0].Descriptor()
}

func (RoutingPolicy) Type() protoreflect.EnumType {
	return &file_routing_proto_enumTypes[0]
}

func (x RoutingPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy.Descriptor instead.
func (RoutingPolicy) EnumDescriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{0}
}

type MetadataFailover_FailoverRange int32

const (
	// ALL return all instances
	MetadataFailover_ALL MetadataFailover_FailoverRange = 0
	// OTHERS retuen without thie labels instances
	MetadataFailover_OTHERS MetadataFailover_FailoverRange = 1
	// OTHER_KEYS return other instances which match keys
	MetadataFailover_OTHER_KEYS MetadataFailover_FailoverRange = 2
)

// Enum value maps for MetadataFailover_FailoverRange.
var (
	MetadataFailover_FailoverRange_name = map[int32]string{
		0: "ALL",
		1: "OTHERS",
		2: "OTHER_KEYS",
	}
	MetadataFailover_FailoverRange_value = map[string]int32{
		"ALL":        0,
		"OTHERS":     1,
		"OTHER_KEYS": 2,
	}
)

func (x MetadataFailover_FailoverRange) Enum() *MetadataFailover_FailoverRange {
	p := new(MetadataFailover_FailoverRange)
	*p = x
	return p
}

func (x MetadataFailover_FailoverRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataFailover_FailoverRange) Descriptor() protoreflect.EnumDescriptor {
	return file_routing_proto_enumTypes[1].Descriptor()
}

func (MetadataFailover_FailoverRange) Type() protoreflect.EnumType {
	return &file_routing_proto_enumTypes[1]
}

func (x MetadataFailover_FailoverRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataFailover_FailoverRange.Descriptor instead.
func (MetadataFailover_FailoverRange) EnumDescriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{5, 0}
}

type NearbyRoutingConfig_LocationLevel int32

const (
	// 未知就近级别，等同于未定义级别
	NearbyRoutingConfig_UNKNOWN NearbyRoutingConfig_LocationLevel = 0
	// 机房就近级别
	NearbyRoutingConfig_CAMPUS NearbyRoutingConfig_LocationLevel = 1
	// 可用区就近级别
	NearbyRoutingConfig_ZONE NearbyRoutingConfig_LocationLevel = 2
	// 地域就近级别
	NearbyRoutingConfig_REGION NearbyRoutingConfig_LocationLevel = 3
	// 全局就近级别
	NearbyRoutingConfig_ALL NearbyRoutingConfig_LocationLevel = 4
)

// Enum value maps for NearbyRoutingConfig_LocationLevel.
var (
	NearbyRoutingConfig_LocationLevel_name = map[int32]string{
		0: "UNKNOWN",
		1: "CAMPUS",
		2: "ZONE",
		3: "REGION",
		4: "ALL",
	}
	NearbyRoutingConfig_LocationLevel_value = map[string]int32{
		"UNKNOWN": 0,
		"CAMPUS":  1,
		"ZONE":    2,
		"REGION":  3,
		"ALL":     4,
	}
)

func (x NearbyRoutingConfig_LocationLevel) Enum() *NearbyRoutingConfig_LocationLevel {
	p := new(NearbyRoutingConfig_LocationLevel)
	*p = x
	return p
}

func (x NearbyRoutingConfig_LocationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NearbyRoutingConfig_LocationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_routing_proto_enumTypes[2].Descriptor()
}

func (NearbyRoutingConfig_LocationLevel) Type() protoreflect.EnumType {
	return &file_routing_proto_enumTypes[2]
}

func (x NearbyRoutingConfig_LocationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NearbyRoutingConfig_LocationLevel.Descriptor instead.
func (NearbyRoutingConfig_LocationLevel) EnumDescriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{7, 0}
}

// label type for gateway request
type SourceMatch_Type int32

const (
	// custom arguments
	SourceMatch_CUSTOM SourceMatch_Type = 0
	// method, match the http post/get/put/delete or grpc method
	SourceMatch_METHOD SourceMatch_Type = 1
	// header, match the http header, dubbo attachment, grpc header
	SourceMatch_HEADER SourceMatch_Type = 2
	// query, match the http query, dubbo argument
	SourceMatch_QUERY SourceMatch_Type = 3
	// caller host ip
	SourceMatch_CALLER_IP SourceMatch_Type = 4
	// path, math the http url
	SourceMatch_PATH SourceMatch_Type = 5
	// cookie match http cookie
	SourceMatch_COOKIE SourceMatch_Type = 6
	// indicate the caller instance metadata
	SourceMatch_CALLER_METADATA SourceMatch_Type = 7
)

// Enum value maps for SourceMatch_Type.
var (
	SourceMatch_Type_name = map[int32]string{
		0: "CUSTOM",
		1: "METHOD",
		2: "HEADER",
		3: "QUERY",
		4: "CALLER_IP",
		5: "PATH",
		6: "COOKIE",
		7: "CALLER_METADATA",
	}
	SourceMatch_Type_value = map[string]int32{
		"CUSTOM":          0,
		"METHOD":          1,
		"HEADER":          2,
		"QUERY":           3,
		"CALLER_IP":       4,
		"PATH":            5,
		"COOKIE":          6,
		"CALLER_METADATA": 7,
	}
)

func (x SourceMatch_Type) Enum() *SourceMatch_Type {
	p := new(SourceMatch_Type)
	*p = x
	return p
}

func (x SourceMatch_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceMatch_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_routing_proto_enumTypes[3].Descriptor()
}

func (SourceMatch_Type) Type() protoreflect.EnumType {
	return &file_routing_proto_enumTypes[3]
}

func (x SourceMatch_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceMatch_Type.Descriptor instead.
func (SourceMatch_Type) EnumDescriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{12, 0}
}

type Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 每个服务可以配置多条入站或者出站规则
	// 对于每个请求，从上到下依次匹配，若命中则终止
	Inbounds     []*Route                `protobuf:"bytes,3,rep,name=inbounds,proto3" json:"inbounds,omitempty"`
	Outbounds    []*Route                `protobuf:"bytes,4,rep,name=outbounds,proto3" json:"outbounds,omitempty"`
	Ctime        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Revision     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=revision,proto3" json:"revision,omitempty"`
	ServiceToken *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=service_token,proto3" json:"service_token,omitempty"`
	// route rules for current service
	Rules []*RouteRule `protobuf:"bytes,21,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Routing) Reset() {
	*x = Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{0}
}

func (x *Routing) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Routing) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Routing) GetInbounds() []*Route {
	if x != nil {
		return x.Inbounds
	}
	return nil
}

func (x *Routing) GetOutbounds() []*Route {
	if x != nil {
		return x.Outbounds
	}
	return nil
}

func (x *Routing) GetCtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *Routing) GetMtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *Routing) GetRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *Routing) GetServiceToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceToken
	}
	return nil
}

func (x *Routing) GetRules() []*RouteRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// deprecated: only for compatible to the old version server
type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 如果匹配Source规则，按照Destination路由
	// 多个Source之间的关系为或
	Sources      []*Source      `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations []*Destination `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// extendInfo 用于承载一些额外信息
	// case 1: 升级到 v2 版本时，记录对应到 v2 版本的 id 信息
	ExtendInfo map[string]string `protobuf:"bytes,3,rep,name=extendInfo,proto3" json:"extendInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{1}
}

func (x *Route) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Route) GetDestinations() []*Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Route) GetExtendInfo() map[string]string {
	if x != nil {
		return x.ExtendInfo
	}
	return nil
}

// deprecated: only for compatible to the old version server
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主调方服务以及命名空间
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 主调方服务实例标签或者请求标签
	// value支持正则匹配
	Metadata map[string]*model.MatchString `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{2}
}

func (x *Source) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Source) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Source) GetMetadata() map[string]*model.MatchString {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// deprecated: only for compatible to the old version server
type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 被调方服务以及命名空间
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 被调方服务实例标签
	// value支持正则匹配
	Metadata map[string]*model.MatchString `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 根据服务名和服务实例metadata筛选符合条件的服务实例子集
	// 服务实例子集可以设置优先级和权重
	// 优先级：整型，范围[0, 9]，最高优先级为0
	// 权重：整型
	// 先按优先级路由，如果存在高优先级，不会使用低优先级
	// 如果存在优先级相同的子集，再按权重分配
	// 优先级和权重可以都不设置/设置一个/设置两个
	// 如果部分设置优先级，部分没有设置，认为没有设置的优先级最低
	// 如果部分设置权重，部分没有设置，认为没有设置的权重为0
	// 如果全部没有设置权重，认为权重相同
	Priority *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Weight   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=weight,proto3" json:"weight,omitempty"`
	// 将请求转发到代理服务
	Transfer *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=transfer,proto3" json:"transfer,omitempty"`
	// 是否对该set执行隔离，隔离后，不会再分配流量
	Isolate *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=isolate,proto3" json:"isolate,omitempty"`
	// 实例分组名
	Name *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{3}
}

func (x *Destination) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Destination) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Destination) GetMetadata() map[string]*model.MatchString {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Destination) GetPriority() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Destination) GetWeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *Destination) GetTransfer() *wrapperspb.StringValue {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *Destination) GetIsolate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Isolate
	}
	return nil
}

func (x *Destination) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

// configuration root for route
type RouteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// route rule name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// namespace namingspace of routing rules
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Enable this router
	Enable bool `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	// Router type
	RoutingPolicy RoutingPolicy `protobuf:"varint,5,opt,name=routing_policy,proto3,enum=v1.RoutingPolicy" json:"routing_policy,omitempty"`
	// Routing configuration for router
	RoutingConfig *anypb.Any `protobuf:"bytes,6,opt,name=routing_config,proto3" json:"routing_config,omitempty"`
	// revision routing version
	Revision string `protobuf:"bytes,7,opt,name=revision,proto3" json:"revision,omitempty"`
	// ctime create time of the rules
	Ctime string `protobuf:"bytes,8,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// mtime modify time of the rules
	Mtime string `protobuf:"bytes,9,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// etime enable time of the rules
	Etime string `protobuf:"bytes,10,opt,name=etime,proto3" json:"etime,omitempty"`
	// priority rules priority
	Priority uint32 `protobuf:"varint,11,opt,name=priority,proto3" json:"priority,omitempty"`
	// description simple description rules
	Description string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// extendInfo 用于承载一些额外信息
	// case 1: 升级到 v2 版本时，记录对应到 v1 版本的 id 信息
	// deprecated_filed only for compatible to the old version server
	ExtendInfo map[string]string `protobuf:"bytes,20,rep,name=extendInfo,proto3" json:"extendInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 路由规则标签数据
	Metadata map[string]string `protobuf:"bytes,21,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RouteRule) Reset() {
	*x = RouteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRule) ProtoMessage() {}

func (x *RouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRule.ProtoReflect.Descriptor instead.
func (*RouteRule) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{4}
}

func (x *RouteRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RouteRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteRule) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RouteRule) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *RouteRule) GetRoutingPolicy() RoutingPolicy {
	if x != nil {
		return x.RoutingPolicy
	}
	return RoutingPolicy_RulePolicy
}

func (x *RouteRule) GetRoutingConfig() *anypb.Any {
	if x != nil {
		return x.RoutingConfig
	}
	return nil
}

func (x *RouteRule) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *RouteRule) GetCtime() string {
	if x != nil {
		return x.Ctime
	}
	return ""
}

func (x *RouteRule) GetMtime() string {
	if x != nil {
		return x.Mtime
	}
	return ""
}

func (x *RouteRule) GetEtime() string {
	if x != nil {
		return x.Etime
	}
	return ""
}

func (x *RouteRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RouteRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RouteRule) GetExtendInfo() map[string]string {
	if x != nil {
		return x.ExtendInfo
	}
	return nil
}

func (x *RouteRule) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MetadataFailover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// failover_range metadata route bottom type
	FailoverRange MetadataFailover_FailoverRange `protobuf:"varint,1,opt,name=failover_range,json=failoverRange,proto3,enum=v1.MetadataFailover_FailoverRange" json:"failover_range,omitempty"`
	// only use to failover_range == OTHER_KEYS
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetadataFailover) Reset() {
	*x = MetadataFailover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataFailover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataFailover) ProtoMessage() {}

func (x *MetadataFailover) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataFailover.ProtoReflect.Descriptor instead.
func (*MetadataFailover) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{5}
}

func (x *MetadataFailover) GetFailoverRange() MetadataFailover_FailoverRange {
	if x != nil {
		return x.FailoverRange
	}
	return MetadataFailover_ALL
}

func (x *MetadataFailover) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// MetadataRoutingConfig metadata routing configuration
type MetadataRoutingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// namespace
	Namespace string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// When metadata not found, it will fall back to the
	Failover *MetadataFailover `protobuf:"bytes,4,opt,name=failover,proto3" json:"failover,omitempty"`
}

func (x *MetadataRoutingConfig) Reset() {
	*x = MetadataRoutingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataRoutingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataRoutingConfig) ProtoMessage() {}

func (x *MetadataRoutingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataRoutingConfig.ProtoReflect.Descriptor instead.
func (*MetadataRoutingConfig) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{6}
}

func (x *MetadataRoutingConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *MetadataRoutingConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MetadataRoutingConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetadataRoutingConfig) GetFailover() *MetadataFailover {
	if x != nil {
		return x.Failover
	}
	return nil
}

// NearbyRoutingConfig routing configuration
type NearbyRoutingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 被调服务名，支持*，代表全部服务
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// 被调命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 默认就近级别
	MatchLevel NearbyRoutingConfig_LocationLevel `protobuf:"varint,3,opt,name=match_level,proto3,enum=v1.NearbyRoutingConfig_LocationLevel" json:"match_level,omitempty"`
	// 最大就近级别
	MaxMatchLevel NearbyRoutingConfig_LocationLevel `protobuf:"varint,4,opt,name=max_match_level,proto3,enum=v1.NearbyRoutingConfig_LocationLevel" json:"max_match_level,omitempty"`
	// 是否强制就近
	StrictNearby bool `protobuf:"varint,5,opt,name=strict_nearby,proto3" json:"strict_nearby,omitempty"`
}

func (x *NearbyRoutingConfig) Reset() {
	*x = NearbyRoutingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearbyRoutingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearbyRoutingConfig) ProtoMessage() {}

func (x *NearbyRoutingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearbyRoutingConfig.ProtoReflect.Descriptor instead.
func (*NearbyRoutingConfig) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{7}
}

func (x *NearbyRoutingConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *NearbyRoutingConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NearbyRoutingConfig) GetMatchLevel() NearbyRoutingConfig_LocationLevel {
	if x != nil {
		return x.MatchLevel
	}
	return NearbyRoutingConfig_UNKNOWN
}

func (x *NearbyRoutingConfig) GetMaxMatchLevel() NearbyRoutingConfig_LocationLevel {
	if x != nil {
		return x.MaxMatchLevel
	}
	return NearbyRoutingConfig_UNKNOWN
}

func (x *NearbyRoutingConfig) GetStrictNearby() bool {
	if x != nil {
		return x.StrictNearby
	}
	return false
}

// RuleRoutingConfig routing configuration
type RuleRoutingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source source info
	// deprecated_filed  only for compatible to the old version server
	//
	// Deprecated: Marked as deprecated in routing.proto.
	Sources []*SourceService `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// destination destinations info
	// deprecated_filed  only for compatible to the old version server
	//
	// Deprecated: Marked as deprecated in routing.proto.
	Destinations []*DestinationGroup `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// rule route chain
	Rules []*SubRuleRouting `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RuleRoutingConfig) Reset() {
	*x = RuleRoutingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRoutingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRoutingConfig) ProtoMessage() {}

func (x *RuleRoutingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRoutingConfig.ProtoReflect.Descriptor instead.
func (*RuleRoutingConfig) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in routing.proto.
func (x *RuleRoutingConfig) GetSources() []*SourceService {
	if x != nil {
		return x.Sources
	}
	return nil
}

// Deprecated: Marked as deprecated in routing.proto.
func (x *RuleRoutingConfig) GetDestinations() []*DestinationGroup {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *RuleRoutingConfig) GetRules() []*SubRuleRouting {
	if x != nil {
		return x.Rules
	}
	return nil
}

// SubRuleRouting sub routing configuration
type SubRuleRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sub routing rule name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// source source info
	Sources []*SourceService `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	// destination destinations info
	Destinations []*DestinationGroup `protobuf:"bytes,3,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *SubRuleRouting) Reset() {
	*x = SubRuleRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubRuleRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRuleRouting) ProtoMessage() {}

func (x *SubRuleRouting) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRuleRouting.ProtoReflect.Descriptor instead.
func (*SubRuleRouting) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{9}
}

func (x *SubRuleRouting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubRuleRouting) GetSources() []*SourceService {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SubRuleRouting) GetDestinations() []*DestinationGroup {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type SourceService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Main tuning service and namespace
	Service   string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Master Control Service Example Tag or Request Label
	// Value supports regular matching
	Arguments []*SourceMatch `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *SourceService) Reset() {
	*x = SourceService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceService) ProtoMessage() {}

func (x *SourceService) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceService.ProtoReflect.Descriptor instead.
func (*SourceService) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{10}
}

func (x *SourceService) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *SourceService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SourceService) GetArguments() []*SourceMatch {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type DestinationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Templated service and namespace
	Service   string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Templated service example label
	// Value supports regular matching
	Labels map[string]*model.MatchString `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// According to the service name and service instance Metadata Filter the
	// qualified service instance subset Service instance subset can set priority
	// and weight Priority: integer, range [0, 9], the highest priority is 0
	// Weight: Integer
	// Press priority routing, if there is high priority, low priority will not
	// use If there is a subset of the same priority, then assign by weight
	// Priority and weight can be not set / set up one / set two
	// If the section is set priority, some are not set, it is considered that the
	// priority is not set. If the part is set, some is not set, it is considered
	// that the weight is not set to 0 If you have no weight, you think the weight
	// is the same
	Priority uint32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Weight   uint32 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	// Forward requests to proxy service
	Transfer string `protobuf:"bytes,6,opt,name=transfer,proto3" json:"transfer,omitempty"`
	// Whether to isolate the SET, after isolation, no traffic will be allocated
	Isolate bool `protobuf:"varint,7,opt,name=isolate,proto3" json:"isolate,omitempty"`
	// name desition name
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DestinationGroup) Reset() {
	*x = DestinationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationGroup) ProtoMessage() {}

func (x *DestinationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationGroup.ProtoReflect.Descriptor instead.
func (*DestinationGroup) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{11}
}

func (x *DestinationGroup) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *DestinationGroup) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DestinationGroup) GetLabels() map[string]*model.MatchString {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DestinationGroup) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *DestinationGroup) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DestinationGroup) GetTransfer() string {
	if x != nil {
		return x.Transfer
	}
	return ""
}

func (x *DestinationGroup) GetIsolate() bool {
	if x != nil {
		return x.Isolate
	}
	return false
}

func (x *DestinationGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// SourceMatch
type SourceMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SourceMatch_Type `protobuf:"varint,1,opt,name=type,proto3,enum=v1.SourceMatch_Type" json:"type,omitempty"`
	// header key or query key
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// header value or query value
	Value *model.MatchString `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SourceMatch) Reset() {
	*x = SourceMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMatch) ProtoMessage() {}

func (x *SourceMatch) ProtoReflect() protoreflect.Message {
	mi := &file_routing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMatch.ProtoReflect.Descriptor instead.
func (*SourceMatch) Descriptor() ([]byte, []int) {
	return file_routing_proto_rawDescGZIP(), []int{12}
}

func (x *SourceMatch) GetType() SourceMatch_Type {
	if x != nil {
		return x.Type
	}
	return SourceMatch_CUSTOM
}

func (x *SourceMatch) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SourceMatch) GetValue() *model.MatchString {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_routing_proto protoreflect.FileDescriptor

var file_routing_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x03, 0x0a, 0x07,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x15, 0x22, 0xdc, 0x01, 0x0a,
	0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3d, 0x0a, 0x0f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x4c, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c,
	0x04, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x4c, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x04,
	0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88,
	0x02, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x02, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x4e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x4f, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x22, 0x47, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4d, 0x50, 0x55, 0x53, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x04,
	0x22, 0xac, 0x01, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x8b, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x76, 0x0a,
	0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x4a, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6f, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x50, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x41, 0x54, 0x48, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4f,
	0x4b, 0x49, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x07, 0x2a, 0x45, 0x0a, 0x0d, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10,
	0x02, 0x42, 0x8d, 0x01, 0x0a, 0x37, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x44, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_routing_proto_rawDescOnce sync.Once
	file_routing_proto_rawDescData = file_routing_proto_rawDesc
)

func file_routing_proto_rawDescGZIP() []byte {
	file_routing_proto_rawDescOnce.Do(func() {
		file_routing_proto_rawDescData = protoimpl.X.CompressGZIP(file_routing_proto_rawDescData)
	})
	return file_routing_proto_rawDescData
}

var file_routing_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_routing_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_routing_proto_goTypes = []interface{}{
	(RoutingPolicy)(0),                     // 0: v1.RoutingPolicy
	(MetadataFailover_FailoverRange)(0),    // 1: v1.MetadataFailover.FailoverRange
	(NearbyRoutingConfig_LocationLevel)(0), // 2: v1.NearbyRoutingConfig.LocationLevel
	(SourceMatch_Type)(0),                  // 3: v1.SourceMatch.Type
	(*Routing)(nil),                        // 4: v1.Routing
	(*Route)(nil),                          // 5: v1.Route
	(*Source)(nil),                         // 6: v1.Source
	(*Destination)(nil),                    // 7: v1.Destination
	(*RouteRule)(nil),                      // 8: v1.RouteRule
	(*MetadataFailover)(nil),               // 9: v1.MetadataFailover
	(*MetadataRoutingConfig)(nil),          // 10: v1.MetadataRoutingConfig
	(*NearbyRoutingConfig)(nil),            // 11: v1.NearbyRoutingConfig
	(*RuleRoutingConfig)(nil),              // 12: v1.RuleRoutingConfig
	(*SubRuleRouting)(nil),                 // 13: v1.SubRuleRouting
	(*SourceService)(nil),                  // 14: v1.SourceService
	(*DestinationGroup)(nil),               // 15: v1.DestinationGroup
	(*SourceMatch)(nil),                    // 16: v1.SourceMatch
	nil,                                    // 17: v1.Route.ExtendInfoEntry
	nil,                                    // 18: v1.Source.MetadataEntry
	nil,                                    // 19: v1.Destination.MetadataEntry
	nil,                                    // 20: v1.RouteRule.ExtendInfoEntry
	nil,                                    // 21: v1.RouteRule.MetadataEntry
	nil,                                    // 22: v1.MetadataFailover.LabelsEntry
	nil,                                    // 23: v1.MetadataRoutingConfig.LabelsEntry
	nil,                                    // 24: v1.DestinationGroup.LabelsEntry
	(*wrapperspb.StringValue)(nil),         // 25: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),         // 26: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),           // 27: google.protobuf.BoolValue
	(*anypb.Any)(nil),                      // 28: google.protobuf.Any
	(*model.MatchString)(nil),              // 29: v1.MatchString
}
var file_routing_proto_depIdxs = []int32{
	25, // 0: v1.Routing.service:type_name -> google.protobuf.StringValue
	25, // 1: v1.Routing.namespace:type_name -> google.protobuf.StringValue
	5,  // 2: v1.Routing.inbounds:type_name -> v1.Route
	5,  // 3: v1.Routing.outbounds:type_name -> v1.Route
	25, // 4: v1.Routing.ctime:type_name -> google.protobuf.StringValue
	25, // 5: v1.Routing.mtime:type_name -> google.protobuf.StringValue
	25, // 6: v1.Routing.revision:type_name -> google.protobuf.StringValue
	25, // 7: v1.Routing.service_token:type_name -> google.protobuf.StringValue
	8,  // 8: v1.Routing.rules:type_name -> v1.RouteRule
	6,  // 9: v1.Route.sources:type_name -> v1.Source
	7,  // 10: v1.Route.destinations:type_name -> v1.Destination
	17, // 11: v1.Route.extendInfo:type_name -> v1.Route.ExtendInfoEntry
	25, // 12: v1.Source.service:type_name -> google.protobuf.StringValue
	25, // 13: v1.Source.namespace:type_name -> google.protobuf.StringValue
	18, // 14: v1.Source.metadata:type_name -> v1.Source.MetadataEntry
	25, // 15: v1.Destination.service:type_name -> google.protobuf.StringValue
	25, // 16: v1.Destination.namespace:type_name -> google.protobuf.StringValue
	19, // 17: v1.Destination.metadata:type_name -> v1.Destination.MetadataEntry
	26, // 18: v1.Destination.priority:type_name -> google.protobuf.UInt32Value
	26, // 19: v1.Destination.weight:type_name -> google.protobuf.UInt32Value
	25, // 20: v1.Destination.transfer:type_name -> google.protobuf.StringValue
	27, // 21: v1.Destination.isolate:type_name -> google.protobuf.BoolValue
	25, // 22: v1.Destination.name:type_name -> google.protobuf.StringValue
	0,  // 23: v1.RouteRule.routing_policy:type_name -> v1.RoutingPolicy
	28, // 24: v1.RouteRule.routing_config:type_name -> google.protobuf.Any
	20, // 25: v1.RouteRule.extendInfo:type_name -> v1.RouteRule.ExtendInfoEntry
	21, // 26: v1.RouteRule.metadata:type_name -> v1.RouteRule.MetadataEntry
	1,  // 27: v1.MetadataFailover.failover_range:type_name -> v1.MetadataFailover.FailoverRange
	22, // 28: v1.MetadataFailover.labels:type_name -> v1.MetadataFailover.LabelsEntry
	23, // 29: v1.MetadataRoutingConfig.labels:type_name -> v1.MetadataRoutingConfig.LabelsEntry
	9,  // 30: v1.MetadataRoutingConfig.failover:type_name -> v1.MetadataFailover
	2,  // 31: v1.NearbyRoutingConfig.match_level:type_name -> v1.NearbyRoutingConfig.LocationLevel
	2,  // 32: v1.NearbyRoutingConfig.max_match_level:type_name -> v1.NearbyRoutingConfig.LocationLevel
	14, // 33: v1.RuleRoutingConfig.sources:type_name -> v1.SourceService
	15, // 34: v1.RuleRoutingConfig.destinations:type_name -> v1.DestinationGroup
	13, // 35: v1.RuleRoutingConfig.rules:type_name -> v1.SubRuleRouting
	14, // 36: v1.SubRuleRouting.sources:type_name -> v1.SourceService
	15, // 37: v1.SubRuleRouting.destinations:type_name -> v1.DestinationGroup
	16, // 38: v1.SourceService.arguments:type_name -> v1.SourceMatch
	24, // 39: v1.DestinationGroup.labels:type_name -> v1.DestinationGroup.LabelsEntry
	3,  // 40: v1.SourceMatch.type:type_name -> v1.SourceMatch.Type
	29, // 41: v1.SourceMatch.value:type_name -> v1.MatchString
	29, // 42: v1.Source.MetadataEntry.value:type_name -> v1.MatchString
	29, // 43: v1.Destination.MetadataEntry.value:type_name -> v1.MatchString
	29, // 44: v1.DestinationGroup.LabelsEntry.value:type_name -> v1.MatchString
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_routing_proto_init() }
func file_routing_proto_init() {
	if File_routing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_routing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataFailover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataRoutingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearbyRoutingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRoutingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubRuleRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_routing_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_routing_proto_goTypes,
		DependencyIndexes: file_routing_proto_depIdxs,
		EnumInfos:         file_routing_proto_enumTypes,
		MessageInfos:      file_routing_proto_msgTypes,
	}.Build()
	File_routing_proto = out.File
	file_routing_proto_rawDesc = nil
	file_routing_proto_goTypes = nil
	file_routing_proto_depIdxs = nil
}
