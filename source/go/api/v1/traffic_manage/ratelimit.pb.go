// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: ratelimit.proto

package traffic_manage

import (
	model "github.com/polarismesh/specification/source/go/api/v1/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 限流资源
type Rule_Resource int32

const (
	// 针对QPS进行限流
	Rule_QPS Rule_Resource = 0
	// 针对并发数进行限流
	Rule_CONCURRENCY Rule_Resource = 1
)

// Enum value maps for Rule_Resource.
var (
	Rule_Resource_name = map[int32]string{
		0: "QPS",
		1: "CONCURRENCY",
	}
	Rule_Resource_value = map[string]int32{
		"QPS":         0,
		"CONCURRENCY": 1,
	}
)

func (x Rule_Resource) Enum() *Rule_Resource {
	p := new(Rule_Resource)
	*p = x
	return p
}

func (x Rule_Resource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_Resource) Descriptor() protoreflect.EnumDescriptor {
	return file_ratelimit_proto_enumTypes[0].Descriptor()
}

func (Rule_Resource) Type() protoreflect.EnumType {
	return &file_ratelimit_proto_enumTypes[0]
}

func (x Rule_Resource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_Resource.Descriptor instead.
func (Rule_Resource) EnumDescriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{1, 0}
}

// 限流类型
// global全局限流(默认)或者local单机限流
type Rule_Type int32

const (
	Rule_GLOBAL Rule_Type = 0
	Rule_LOCAL  Rule_Type = 1
)

// Enum value maps for Rule_Type.
var (
	Rule_Type_name = map[int32]string{
		0: "GLOBAL",
		1: "LOCAL",
	}
	Rule_Type_value = map[string]int32{
		"GLOBAL": 0,
		"LOCAL":  1,
	}
)

func (x Rule_Type) Enum() *Rule_Type {
	p := new(Rule_Type)
	*p = x
	return p
}

func (x Rule_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ratelimit_proto_enumTypes[1].Descriptor()
}

func (Rule_Type) Type() protoreflect.EnumType {
	return &file_ratelimit_proto_enumTypes[1]
}

func (x Rule_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_Type.Descriptor instead.
func (Rule_Type) EnumDescriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{1, 1}
}

// 限流阈值模
type Rule_AmountMode int32

const (
	Rule_GLOBAL_TOTAL  Rule_AmountMode = 0 // 总体阈值
	Rule_SHARE_EQUALLY Rule_AmountMode = 1 // 单机均摊阈值
)

// Enum value maps for Rule_AmountMode.
var (
	Rule_AmountMode_name = map[int32]string{
		0: "GLOBAL_TOTAL",
		1: "SHARE_EQUALLY",
	}
	Rule_AmountMode_value = map[string]int32{
		"GLOBAL_TOTAL":  0,
		"SHARE_EQUALLY": 1,
	}
)

func (x Rule_AmountMode) Enum() *Rule_AmountMode {
	p := new(Rule_AmountMode)
	*p = x
	return p
}

func (x Rule_AmountMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_AmountMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ratelimit_proto_enumTypes[2].Descriptor()
}

func (Rule_AmountMode) Type() protoreflect.EnumType {
	return &file_ratelimit_proto_enumTypes[2]
}

func (x Rule_AmountMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_AmountMode.Descriptor instead.
func (Rule_AmountMode) EnumDescriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{1, 2}
}

// 与限流集群连接失败时降级模式
type Rule_FailoverType int32

const (
	Rule_FAILOVER_LOCAL Rule_FailoverType = 0 // 降级成本地阈值
	Rule_FAILOVER_PASS  Rule_FailoverType = 1 // 降级成直接通过
)

// Enum value maps for Rule_FailoverType.
var (
	Rule_FailoverType_name = map[int32]string{
		0: "FAILOVER_LOCAL",
		1: "FAILOVER_PASS",
	}
	Rule_FailoverType_value = map[string]int32{
		"FAILOVER_LOCAL": 0,
		"FAILOVER_PASS":  1,
	}
)

func (x Rule_FailoverType) Enum() *Rule_FailoverType {
	p := new(Rule_FailoverType)
	*p = x
	return p
}

func (x Rule_FailoverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_FailoverType) Descriptor() protoreflect.EnumDescriptor {
	return file_ratelimit_proto_enumTypes[3].Descriptor()
}

func (Rule_FailoverType) Type() protoreflect.EnumType {
	return &file_ratelimit_proto_enumTypes[3]
}

func (x Rule_FailoverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_FailoverType.Descriptor instead.
func (Rule_FailoverType) EnumDescriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{1, 3}
}

// label type for gateway request
type MatchArgument_Type int32

const (
	// custom arguments
	MatchArgument_CUSTOM MatchArgument_Type = 0
	// method, match the http post/get/put/delete or grpc method
	MatchArgument_METHOD MatchArgument_Type = 1
	// header, match the http header, dubbo attachment, grpc header
	MatchArgument_HEADER MatchArgument_Type = 2
	// query, match the http query, dubbo argument
	MatchArgument_QUERY MatchArgument_Type = 3
	// caller service
	MatchArgument_CALLER_SERVICE MatchArgument_Type = 4
	// caller host ip
	MatchArgument_CALLER_IP MatchArgument_Type = 5
	// caller instance metadata
	MatchArgument_CALLER_METADATA MatchArgument_Type = 6
)

// Enum value maps for MatchArgument_Type.
var (
	MatchArgument_Type_name = map[int32]string{
		0: "CUSTOM",
		1: "METHOD",
		2: "HEADER",
		3: "QUERY",
		4: "CALLER_SERVICE",
		5: "CALLER_IP",
		6: "CALLER_METADATA",
	}
	MatchArgument_Type_value = map[string]int32{
		"CUSTOM":          0,
		"METHOD":          1,
		"HEADER":          2,
		"QUERY":           3,
		"CALLER_SERVICE":  4,
		"CALLER_IP":       5,
		"CALLER_METADATA": 6,
	}
)

func (x MatchArgument_Type) Enum() *MatchArgument_Type {
	p := new(MatchArgument_Type)
	*p = x
	return p
}

func (x MatchArgument_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchArgument_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ratelimit_proto_enumTypes[4].Descriptor()
}

func (MatchArgument_Type) Type() protoreflect.EnumType {
	return &file_ratelimit_proto_enumTypes[4]
}

func (x MatchArgument_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchArgument_Type.Descriptor instead.
func (MatchArgument_Type) EnumDescriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{2, 0}
}

// 同一服务下限流规则集合
type RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 限流规则集合
	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// 限流规则汇总的revision信息
	Revision *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{0}
}

func (x *RateLimit) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RateLimit) GetRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

// 单个限流规则信息
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 限流规则唯一标识
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 限流规则所属服务名
	Service *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// 限流规则所属命名空间
	Namespace *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 可选，SUBSET标识
	Subset map[string]*model.MatchString `protobuf:"bytes,4,rep,name=subset,proto3" json:"subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 限流规则优先级，0值最高
	Priority *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Resource Rule_Resource           `protobuf:"varint,6,opt,name=resource,proto3,enum=v1.Rule_Resource" json:"resource,omitempty"`
	Type     Rule_Type               `protobuf:"varint,7,opt,name=type,proto3,enum=v1.Rule_Type" json:"type,omitempty"`
	// 业务标签集合，通过KV进行匹配，全部匹配才使用该规则
	Labels map[string]*model.MatchString `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 限流阈值
	// 可以有多个粒度的配置（比如同时针对秒级，分钟级，天级），匹配一个则进行限流
	// 全局限流模式下，该值为服务配额总量；单机限流模式下，该值为单个节点能处理的配额量
	Amounts []*Amount `protobuf:"bytes,9,rep,name=amounts,proto3" json:"amounts,omitempty"`
	// 限流动作，对应着客户端的插件名字
	Action *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
	// 是否停用该限流规则，默认启用
	Disable *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=disable,proto3" json:"disable,omitempty"`
	// 限流上报方式，同时支持按固定周期上报，以及达到配额百分比后上报
	Report *Report `protobuf:"bytes,12,opt,name=report,proto3" json:"report,omitempty"`
	// 限流规则创建时间
	Ctime *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// 限流规则修改时间
	Mtime *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// 限流规则revision信息
	Revision *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=revision,proto3" json:"revision,omitempty"`
	// 服务的TOKEN信息，仅用于控制台，discover接口不下发
	ServiceToken *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=service_token,proto3" json:"service_token,omitempty"`
	// 配额调整算法
	Adjuster *AmountAdjuster `protobuf:"bytes,17,opt,name=adjuster,proto3" json:"adjuster,omitempty"`
	// 通配符是否合并计算，默认分开计数
	RegexCombine *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=regex_combine,proto3" json:"regex_combine,omitempty"`
	AmountMode   Rule_AmountMode       `protobuf:"varint,19,opt,name=amount_mode,json=amountMode,proto3,enum=v1.Rule_AmountMode" json:"amount_mode,omitempty"`
	Failover     Rule_FailoverType     `protobuf:"varint,20,opt,name=failover,proto3,enum=v1.Rule_FailoverType" json:"failover,omitempty"`
	// 分布式限流服务集群
	Cluster *RateLimitCluster `protobuf:"bytes,21,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// 被调接口名
	Method *model.MatchString `protobuf:"bytes,22,opt,name=method,proto3" json:"method,omitempty"`
	// 被调的参数过滤条件，满足过滤条件才进入限流规则
	Arguments []*MatchArgument `protobuf:"bytes,23,rep,name=arguments,proto3" json:"arguments,omitempty"`
	// 限流规则名
	Name *wrapperspb.StringValue `protobuf:"bytes,24,opt,name=name,proto3" json:"name,omitempty"`
	// 限流规则启用时间
	Etime *wrapperspb.StringValue `protobuf:"bytes,25,opt,name=etime,proto3" json:"etime,omitempty"`
	// 最大排队时长，单位秒
	MaxQueueDelay *wrapperspb.UInt32Value `protobuf:"bytes,26,opt,name=max_queue_delay,proto3" json:"max_queue_delay,omitempty"`
	// amount for concurrency rate-limit
	ConcurrencyAmount *ConcurrencyAmount `protobuf:"bytes,27,opt,name=concurrencyAmount,json=concurrency_amount,proto3" json:"concurrencyAmount,omitempty"`
	// fallback configuration
	CustomResponse *CustomResponse `protobuf:"bytes,28,opt,name=customResponse,json=custom_response,proto3" json:"customResponse,omitempty"`
	// 限流规则标签数据
	Metadata map[string]string `protobuf:"bytes,29,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{1}
}

func (x *Rule) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Rule) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Rule) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Rule) GetSubset() map[string]*model.MatchString {
	if x != nil {
		return x.Subset
	}
	return nil
}

func (x *Rule) GetPriority() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Rule) GetResource() Rule_Resource {
	if x != nil {
		return x.Resource
	}
	return Rule_QPS
}

func (x *Rule) GetType() Rule_Type {
	if x != nil {
		return x.Type
	}
	return Rule_GLOBAL
}

func (x *Rule) GetLabels() map[string]*model.MatchString {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Rule) GetAmounts() []*Amount {
	if x != nil {
		return x.Amounts
	}
	return nil
}

func (x *Rule) GetAction() *wrapperspb.StringValue {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Rule) GetDisable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disable
	}
	return nil
}

func (x *Rule) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *Rule) GetCtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *Rule) GetMtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *Rule) GetRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *Rule) GetServiceToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceToken
	}
	return nil
}

func (x *Rule) GetAdjuster() *AmountAdjuster {
	if x != nil {
		return x.Adjuster
	}
	return nil
}

func (x *Rule) GetRegexCombine() *wrapperspb.BoolValue {
	if x != nil {
		return x.RegexCombine
	}
	return nil
}

func (x *Rule) GetAmountMode() Rule_AmountMode {
	if x != nil {
		return x.AmountMode
	}
	return Rule_GLOBAL_TOTAL
}

func (x *Rule) GetFailover() Rule_FailoverType {
	if x != nil {
		return x.Failover
	}
	return Rule_FAILOVER_LOCAL
}

func (x *Rule) GetCluster() *RateLimitCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Rule) GetMethod() *model.MatchString {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Rule) GetArguments() []*MatchArgument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Rule) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Rule) GetEtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Etime
	}
	return nil
}

func (x *Rule) GetMaxQueueDelay() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxQueueDelay
	}
	return nil
}

func (x *Rule) GetConcurrencyAmount() *ConcurrencyAmount {
	if x != nil {
		return x.ConcurrencyAmount
	}
	return nil
}

func (x *Rule) GetCustomResponse() *CustomResponse {
	if x != nil {
		return x.CustomResponse
	}
	return nil
}

func (x *Rule) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MatchArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type MatchArgument_Type `protobuf:"varint,1,opt,name=type,proto3,enum=v1.MatchArgument_Type" json:"type,omitempty"`
	// header key or query key
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// header value or query value
	Value *model.MatchString `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MatchArgument) Reset() {
	*x = MatchArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchArgument) ProtoMessage() {}

func (x *MatchArgument) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchArgument.ProtoReflect.Descriptor instead.
func (*MatchArgument) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{2}
}

func (x *MatchArgument) GetType() MatchArgument_Type {
	if x != nil {
		return x.Type
	}
	return MatchArgument_CUSTOM
}

func (x *MatchArgument) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MatchArgument) GetValue() *model.MatchString {
	if x != nil {
		return x.Value
	}
	return nil
}

// concurrency rate-limit amount config
type ConcurrencyAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAmount uint32 `protobuf:"varint,1,opt,name=maxAmount,json=max_amount,proto3" json:"maxAmount,omitempty"`
}

func (x *ConcurrencyAmount) Reset() {
	*x = ConcurrencyAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyAmount) ProtoMessage() {}

func (x *ConcurrencyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyAmount.ProtoReflect.Descriptor instead.
func (*ConcurrencyAmount) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{3}
}

func (x *ConcurrencyAmount) GetMaxAmount() uint32 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

// custom response text when limited
type CustomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CustomResponse) Reset() {
	*x = CustomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomResponse) ProtoMessage() {}

func (x *CustomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomResponse.ProtoReflect.Descriptor instead.
func (*CustomResponse) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{4}
}

func (x *CustomResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// 分布式限流服务集群
type RateLimitCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// 限流规则所属命名空间
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *RateLimitCluster) Reset() {
	*x = RateLimitCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitCluster) ProtoMessage() {}

func (x *RateLimitCluster) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitCluster.ProtoReflect.Descriptor instead.
func (*RateLimitCluster) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{5}
}

func (x *RateLimitCluster) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *RateLimitCluster) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

// 限流配额
type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间周期内的最大配额数
	MaxAmount *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=maxAmount,proto3" json:"maxAmount,omitempty"`
	// 配额生效的时间周期，必须大于等于1s
	ValidDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=validDuration,proto3" json:"validDuration,omitempty"`
	// 请求统计精度
	Precision *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=precision,proto3" json:"precision,omitempty"`
	// 可选，起始限流阈值，爬坡起始值
	StartAmount *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=startAmount,proto3" json:"startAmount,omitempty"`
	// 可选，最小限流阈值，降低时最小值
	MinAmount *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{6}
}

func (x *Amount) GetMaxAmount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxAmount
	}
	return nil
}

func (x *Amount) GetValidDuration() *durationpb.Duration {
	if x != nil {
		return x.ValidDuration
	}
	return nil
}

func (x *Amount) GetPrecision() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *Amount) GetStartAmount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.StartAmount
	}
	return nil
}

func (x *Amount) GetMinAmount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinAmount
	}
	return nil
}

// 限流上报方式
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配额固定上报周期，单位毫秒
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// 使用了百分之多少配额后启动一次实时上报，值范围(0,100]
	AmountPercent *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=amountPercent,proto3" json:"amountPercent,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{7}
}

func (x *Report) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Report) GetAmountPercent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.AmountPercent
	}
	return nil
}

// 配额调整算法
type AmountAdjuster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Climb *ClimbConfig `protobuf:"bytes,1,opt,name=climb,proto3" json:"climb,omitempty"`
}

func (x *AmountAdjuster) Reset() {
	*x = AmountAdjuster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountAdjuster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountAdjuster) ProtoMessage() {}

func (x *AmountAdjuster) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountAdjuster.ProtoReflect.Descriptor instead.
func (*AmountAdjuster) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{8}
}

func (x *AmountAdjuster) GetClimb() *ClimbConfig {
	if x != nil {
		return x.Climb
	}
	return nil
}

// 限流调整算法Climb相关配置
type ClimbConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable     *wrapperspb.BoolValue        `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`         // 是否开启
	Metric     *ClimbConfig_MetricConfig    `protobuf:"bytes,2,opt,name=metric,proto3" json:"metric,omitempty"`         // 限流数据统计配置
	Policy     *ClimbConfig_TriggerPolicy   `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`         // 触发调整策略
	Throttling *ClimbConfig_ClimbThrottling `protobuf:"bytes,4,opt,name=throttling,proto3" json:"throttling,omitempty"` // 限流调整相关参数
}

func (x *ClimbConfig) Reset() {
	*x = ClimbConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig) ProtoMessage() {}

func (x *ClimbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig.ProtoReflect.Descriptor instead.
func (*ClimbConfig) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{9}
}

func (x *ClimbConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *ClimbConfig) GetMetric() *ClimbConfig_MetricConfig {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *ClimbConfig) GetPolicy() *ClimbConfig_TriggerPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ClimbConfig) GetThrottling() *ClimbConfig_ClimbThrottling {
	if x != nil {
		return x.Throttling
	}
	return nil
}

// 限流数据统计配置
type ClimbConfig_MetricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 限流数据度量周期，默认60s
	Window *durationpb.Duration `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	// 数据统计精度，决定数据度量的最小周期，度量滑窗的步长=window/precision
	Precision *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=precision,proto3" json:"precision,omitempty"`
	// 上报周期，默认20s
	ReportInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=reportInterval,proto3" json:"reportInterval,omitempty"`
}

func (x *ClimbConfig_MetricConfig) Reset() {
	*x = ClimbConfig_MetricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_MetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_MetricConfig) ProtoMessage() {}

func (x *ClimbConfig_MetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_MetricConfig.ProtoReflect.Descriptor instead.
func (*ClimbConfig_MetricConfig) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ClimbConfig_MetricConfig) GetWindow() *durationpb.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *ClimbConfig_MetricConfig) GetPrecision() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ClimbConfig_MetricConfig) GetReportInterval() *durationpb.Duration {
	if x != nil {
		return x.ReportInterval
	}
	return nil
}

// 触发调整的策略
type ClimbConfig_TriggerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorRate *ClimbConfig_TriggerPolicy_ErrorRate `protobuf:"bytes,1,opt,name=errorRate,proto3" json:"errorRate,omitempty"` // 按错误率阈值调整
	SlowRate  *ClimbConfig_TriggerPolicy_SlowRate  `protobuf:"bytes,2,opt,name=slowRate,proto3" json:"slowRate,omitempty"`   // 慢调用进行触发调整
}

func (x *ClimbConfig_TriggerPolicy) Reset() {
	*x = ClimbConfig_TriggerPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_TriggerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_TriggerPolicy) ProtoMessage() {}

func (x *ClimbConfig_TriggerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_TriggerPolicy.ProtoReflect.Descriptor instead.
func (*ClimbConfig_TriggerPolicy) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{9, 1}
}

func (x *ClimbConfig_TriggerPolicy) GetErrorRate() *ClimbConfig_TriggerPolicy_ErrorRate {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy) GetSlowRate() *ClimbConfig_TriggerPolicy_SlowRate {
	if x != nil {
		return x.SlowRate
	}
	return nil
}

// 爬坡调整相关参数
type ClimbConfig_ClimbThrottling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColdBelowTuneDownRate  *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=coldBelowTuneDownRate,proto3" json:"coldBelowTuneDownRate,omitempty"`   // 冷水位以下区间的下调百分比
	ColdBelowTuneUpRate    *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=coldBelowTuneUpRate,proto3" json:"coldBelowTuneUpRate,omitempty"`       // 冷水位以下区间的上调百分比
	ColdAboveTuneDownRate  *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=coldAboveTuneDownRate,proto3" json:"coldAboveTuneDownRate,omitempty"`   // 冷水位以上区间的下调百分比
	ColdAboveTuneUpRate    *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=coldAboveTuneUpRate,proto3" json:"coldAboveTuneUpRate,omitempty"`       // 冷水位以上区间的上调百分比
	LimitThresholdToTuneUp *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=limitThresholdToTuneUp,proto3" json:"limitThresholdToTuneUp,omitempty"` // 冷水位以上，超过该百分的请求被限流后进行阈值上调
	JudgeDuration          *durationpb.Duration   `protobuf:"bytes,6,opt,name=judgeDuration,proto3" json:"judgeDuration,omitempty"`                   // 阈值调整规则的决策间隔
	TuneUpPeriod           *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=tuneUpPeriod,proto3" json:"tuneUpPeriod,omitempty"`                     // 阈值上调周期数，连续N个决策间隔都为上调，才执行上调
	TuneDownPeriod         *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=tuneDownPeriod,proto3" json:"tuneDownPeriod,omitempty"`                 // 阈值下调周期数，连续N个决策间隔都为下调，才执行下调
}

func (x *ClimbConfig_ClimbThrottling) Reset() {
	*x = ClimbConfig_ClimbThrottling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_ClimbThrottling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_ClimbThrottling) ProtoMessage() {}

func (x *ClimbConfig_ClimbThrottling) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_ClimbThrottling.ProtoReflect.Descriptor instead.
func (*ClimbConfig_ClimbThrottling) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{9, 2}
}

func (x *ClimbConfig_ClimbThrottling) GetColdBelowTuneDownRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ColdBelowTuneDownRate
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetColdBelowTuneUpRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ColdBelowTuneUpRate
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetColdAboveTuneDownRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ColdAboveTuneDownRate
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetColdAboveTuneUpRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ColdAboveTuneUpRate
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetLimitThresholdToTuneUp() *wrapperspb.Int32Value {
	if x != nil {
		return x.LimitThresholdToTuneUp
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetJudgeDuration() *durationpb.Duration {
	if x != nil {
		return x.JudgeDuration
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetTuneUpPeriod() *wrapperspb.Int32Value {
	if x != nil {
		return x.TuneUpPeriod
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetTuneDownPeriod() *wrapperspb.Int32Value {
	if x != nil {
		return x.TuneDownPeriod
	}
	return nil
}

// 错误率触发调整配置
type ClimbConfig_TriggerPolicy_ErrorRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                 *wrapperspb.BoolValue                                `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`                                 // 是否开启
	RequestVolumeThreshold *wrapperspb.UInt32Value                              `protobuf:"bytes,2,opt,name=requestVolumeThreshold,proto3" json:"requestVolumeThreshold,omitempty"` // 触发限流调整的最小的请求数
	ErrorRate              *wrapperspb.Int32Value                               `protobuf:"bytes,3,opt,name=errorRate,proto3" json:"errorRate,omitempty"`                           // 触发限流的错误率配置
	Specials               []*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig `protobuf:"bytes,4,rep,name=specials,proto3" json:"specials,omitempty"`                             // 针对部分错误码，使用额外的错误率统计，可设置多组特殊规则
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) Reset() {
	*x = ClimbConfig_TriggerPolicy_ErrorRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_TriggerPolicy_ErrorRate) ProtoMessage() {}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_TriggerPolicy_ErrorRate.ProtoReflect.Descriptor instead.
func (*ClimbConfig_TriggerPolicy_ErrorRate) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{9, 1, 0}
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) GetRequestVolumeThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestVolumeThreshold
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) GetErrorRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) GetSpecials() []*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig {
	if x != nil {
		return x.Specials
	}
	return nil
}

// 慢调用触发调整配置
type ClimbConfig_TriggerPolicy_SlowRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable   *wrapperspb.BoolValue  `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`     // 是否开启
	MaxRt    *durationpb.Duration   `protobuf:"bytes,2,opt,name=maxRt,proto3" json:"maxRt,omitempty"`       // 最大响应时间，超过该响应时间属于慢调用
	SlowRate *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=slowRate,proto3" json:"slowRate,omitempty"` // 慢请求率阈值，达到该阈值进行限流
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) Reset() {
	*x = ClimbConfig_TriggerPolicy_SlowRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_TriggerPolicy_SlowRate) ProtoMessage() {}

func (x *ClimbConfig_TriggerPolicy_SlowRate) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_TriggerPolicy_SlowRate.ProtoReflect.Descriptor instead.
func (*ClimbConfig_TriggerPolicy_SlowRate) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{9, 1, 1}
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) GetMaxRt() *durationpb.Duration {
	if x != nil {
		return x.MaxRt
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) GetSlowRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.SlowRate
	}
	return nil
}

// 特殊错误码触发调整配置
type ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *wrapperspb.StringValue  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`             // 自定义错误类型
	ErrorCodes []*wrapperspb.Int64Value `protobuf:"bytes,2,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"` // 特定规则针对的错误码
	ErrorRate  *wrapperspb.Int32Value   `protobuf:"bytes,3,opt,name=errorRate,proto3" json:"errorRate,omitempty"`   //特定规则错误率
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) Reset() {
	*x = ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ratelimit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) ProtoMessage() {}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ratelimit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig.ProtoReflect.Descriptor instead.
func (*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) Descriptor() ([]byte, []int) {
	return file_ratelimit_proto_rawDescGZIP(), []int{9, 1, 0, 0}
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetErrorCodes() []*wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetErrorRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

var File_ratelimit_proto protoreflect.FileDescriptor

var file_ratelimit_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x65, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x0e, 0x0a, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x07,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x4a, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x50, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x22, 0x1d, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x22, 0x31, 0x0a, 0x0a,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x4c,
	0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x01, 0x22,
	0x35, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x06, 0x22, 0x32, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x24, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xbd, 0x02, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x83, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x0e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x6d, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x6d,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x63, 0x6c, 0x69, 0x6d, 0x62, 0x22, 0xd0,
	0x0e, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3f, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x1a, 0xc0, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x1a, 0xa7, 0x06, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x08,
	0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x6c,
	0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x1a, 0xdf, 0x03, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0xb9, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x08, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d,
	0x61, 0x78, 0x52, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x1a, 0xf1, 0x04,
	0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x64, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x54, 0x75,
	0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63,
	0x6f, 0x6c, 0x64, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x54, 0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x64, 0x42, 0x65, 0x6c, 0x6f,
	0x77, 0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x63, 0x6f, 0x6c, 0x64, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x64, 0x41, 0x62, 0x6f, 0x76, 0x65,
	0x54, 0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x63, 0x6f, 0x6c, 0x64, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x64, 0x41, 0x62,
	0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x63, 0x6f, 0x6c, 0x64, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x55,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x54, 0x6f, 0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x74,
	0x75, 0x6e, 0x65, 0x55, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x74, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x0e,
	0x74, 0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x74, 0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x42, 0x8f, 0x01, 0x0a, 0x37, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x44, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x73, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ratelimit_proto_rawDescOnce sync.Once
	file_ratelimit_proto_rawDescData = file_ratelimit_proto_rawDesc
)

func file_ratelimit_proto_rawDescGZIP() []byte {
	file_ratelimit_proto_rawDescOnce.Do(func() {
		file_ratelimit_proto_rawDescData = protoimpl.X.CompressGZIP(file_ratelimit_proto_rawDescData)
	})
	return file_ratelimit_proto_rawDescData
}

var file_ratelimit_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ratelimit_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ratelimit_proto_goTypes = []interface{}{
	(Rule_Resource)(0),                  // 0: v1.Rule.Resource
	(Rule_Type)(0),                      // 1: v1.Rule.Type
	(Rule_AmountMode)(0),                // 2: v1.Rule.AmountMode
	(Rule_FailoverType)(0),              // 3: v1.Rule.FailoverType
	(MatchArgument_Type)(0),             // 4: v1.MatchArgument.Type
	(*RateLimit)(nil),                   // 5: v1.RateLimit
	(*Rule)(nil),                        // 6: v1.Rule
	(*MatchArgument)(nil),               // 7: v1.MatchArgument
	(*ConcurrencyAmount)(nil),           // 8: v1.ConcurrencyAmount
	(*CustomResponse)(nil),              // 9: v1.CustomResponse
	(*RateLimitCluster)(nil),            // 10: v1.RateLimitCluster
	(*Amount)(nil),                      // 11: v1.Amount
	(*Report)(nil),                      // 12: v1.Report
	(*AmountAdjuster)(nil),              // 13: v1.AmountAdjuster
	(*ClimbConfig)(nil),                 // 14: v1.ClimbConfig
	nil,                                 // 15: v1.Rule.SubsetEntry
	nil,                                 // 16: v1.Rule.LabelsEntry
	nil,                                 // 17: v1.Rule.MetadataEntry
	(*ClimbConfig_MetricConfig)(nil),    // 18: v1.ClimbConfig.MetricConfig
	(*ClimbConfig_TriggerPolicy)(nil),   // 19: v1.ClimbConfig.TriggerPolicy
	(*ClimbConfig_ClimbThrottling)(nil), // 20: v1.ClimbConfig.ClimbThrottling
	(*ClimbConfig_TriggerPolicy_ErrorRate)(nil),               // 21: v1.ClimbConfig.TriggerPolicy.ErrorRate
	(*ClimbConfig_TriggerPolicy_SlowRate)(nil),                // 22: v1.ClimbConfig.TriggerPolicy.SlowRate
	(*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig)(nil), // 23: v1.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig
	(*wrapperspb.StringValue)(nil),                            // 24: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                            // 25: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),                              // 26: google.protobuf.BoolValue
	(*model.MatchString)(nil),                                 // 27: v1.MatchString
	(*durationpb.Duration)(nil),                               // 28: google.protobuf.Duration
	(*wrapperspb.Int32Value)(nil),                             // 29: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),                             // 30: google.protobuf.Int64Value
}
var file_ratelimit_proto_depIdxs = []int32{
	6,  // 0: v1.RateLimit.rules:type_name -> v1.Rule
	24, // 1: v1.RateLimit.revision:type_name -> google.protobuf.StringValue
	24, // 2: v1.Rule.id:type_name -> google.protobuf.StringValue
	24, // 3: v1.Rule.service:type_name -> google.protobuf.StringValue
	24, // 4: v1.Rule.namespace:type_name -> google.protobuf.StringValue
	15, // 5: v1.Rule.subset:type_name -> v1.Rule.SubsetEntry
	25, // 6: v1.Rule.priority:type_name -> google.protobuf.UInt32Value
	0,  // 7: v1.Rule.resource:type_name -> v1.Rule.Resource
	1,  // 8: v1.Rule.type:type_name -> v1.Rule.Type
	16, // 9: v1.Rule.labels:type_name -> v1.Rule.LabelsEntry
	11, // 10: v1.Rule.amounts:type_name -> v1.Amount
	24, // 11: v1.Rule.action:type_name -> google.protobuf.StringValue
	26, // 12: v1.Rule.disable:type_name -> google.protobuf.BoolValue
	12, // 13: v1.Rule.report:type_name -> v1.Report
	24, // 14: v1.Rule.ctime:type_name -> google.protobuf.StringValue
	24, // 15: v1.Rule.mtime:type_name -> google.protobuf.StringValue
	24, // 16: v1.Rule.revision:type_name -> google.protobuf.StringValue
	24, // 17: v1.Rule.service_token:type_name -> google.protobuf.StringValue
	13, // 18: v1.Rule.adjuster:type_name -> v1.AmountAdjuster
	26, // 19: v1.Rule.regex_combine:type_name -> google.protobuf.BoolValue
	2,  // 20: v1.Rule.amount_mode:type_name -> v1.Rule.AmountMode
	3,  // 21: v1.Rule.failover:type_name -> v1.Rule.FailoverType
	10, // 22: v1.Rule.cluster:type_name -> v1.RateLimitCluster
	27, // 23: v1.Rule.method:type_name -> v1.MatchString
	7,  // 24: v1.Rule.arguments:type_name -> v1.MatchArgument
	24, // 25: v1.Rule.name:type_name -> google.protobuf.StringValue
	24, // 26: v1.Rule.etime:type_name -> google.protobuf.StringValue
	25, // 27: v1.Rule.max_queue_delay:type_name -> google.protobuf.UInt32Value
	8,  // 28: v1.Rule.concurrencyAmount:type_name -> v1.ConcurrencyAmount
	9,  // 29: v1.Rule.customResponse:type_name -> v1.CustomResponse
	17, // 30: v1.Rule.metadata:type_name -> v1.Rule.MetadataEntry
	4,  // 31: v1.MatchArgument.type:type_name -> v1.MatchArgument.Type
	27, // 32: v1.MatchArgument.value:type_name -> v1.MatchString
	24, // 33: v1.RateLimitCluster.service:type_name -> google.protobuf.StringValue
	24, // 34: v1.RateLimitCluster.namespace:type_name -> google.protobuf.StringValue
	25, // 35: v1.Amount.maxAmount:type_name -> google.protobuf.UInt32Value
	28, // 36: v1.Amount.validDuration:type_name -> google.protobuf.Duration
	25, // 37: v1.Amount.precision:type_name -> google.protobuf.UInt32Value
	25, // 38: v1.Amount.startAmount:type_name -> google.protobuf.UInt32Value
	25, // 39: v1.Amount.minAmount:type_name -> google.protobuf.UInt32Value
	28, // 40: v1.Report.interval:type_name -> google.protobuf.Duration
	25, // 41: v1.Report.amountPercent:type_name -> google.protobuf.UInt32Value
	14, // 42: v1.AmountAdjuster.climb:type_name -> v1.ClimbConfig
	26, // 43: v1.ClimbConfig.enable:type_name -> google.protobuf.BoolValue
	18, // 44: v1.ClimbConfig.metric:type_name -> v1.ClimbConfig.MetricConfig
	19, // 45: v1.ClimbConfig.policy:type_name -> v1.ClimbConfig.TriggerPolicy
	20, // 46: v1.ClimbConfig.throttling:type_name -> v1.ClimbConfig.ClimbThrottling
	27, // 47: v1.Rule.SubsetEntry.value:type_name -> v1.MatchString
	27, // 48: v1.Rule.LabelsEntry.value:type_name -> v1.MatchString
	28, // 49: v1.ClimbConfig.MetricConfig.window:type_name -> google.protobuf.Duration
	25, // 50: v1.ClimbConfig.MetricConfig.precision:type_name -> google.protobuf.UInt32Value
	28, // 51: v1.ClimbConfig.MetricConfig.reportInterval:type_name -> google.protobuf.Duration
	21, // 52: v1.ClimbConfig.TriggerPolicy.errorRate:type_name -> v1.ClimbConfig.TriggerPolicy.ErrorRate
	22, // 53: v1.ClimbConfig.TriggerPolicy.slowRate:type_name -> v1.ClimbConfig.TriggerPolicy.SlowRate
	29, // 54: v1.ClimbConfig.ClimbThrottling.coldBelowTuneDownRate:type_name -> google.protobuf.Int32Value
	29, // 55: v1.ClimbConfig.ClimbThrottling.coldBelowTuneUpRate:type_name -> google.protobuf.Int32Value
	29, // 56: v1.ClimbConfig.ClimbThrottling.coldAboveTuneDownRate:type_name -> google.protobuf.Int32Value
	29, // 57: v1.ClimbConfig.ClimbThrottling.coldAboveTuneUpRate:type_name -> google.protobuf.Int32Value
	29, // 58: v1.ClimbConfig.ClimbThrottling.limitThresholdToTuneUp:type_name -> google.protobuf.Int32Value
	28, // 59: v1.ClimbConfig.ClimbThrottling.judgeDuration:type_name -> google.protobuf.Duration
	29, // 60: v1.ClimbConfig.ClimbThrottling.tuneUpPeriod:type_name -> google.protobuf.Int32Value
	29, // 61: v1.ClimbConfig.ClimbThrottling.tuneDownPeriod:type_name -> google.protobuf.Int32Value
	26, // 62: v1.ClimbConfig.TriggerPolicy.ErrorRate.enable:type_name -> google.protobuf.BoolValue
	25, // 63: v1.ClimbConfig.TriggerPolicy.ErrorRate.requestVolumeThreshold:type_name -> google.protobuf.UInt32Value
	29, // 64: v1.ClimbConfig.TriggerPolicy.ErrorRate.errorRate:type_name -> google.protobuf.Int32Value
	23, // 65: v1.ClimbConfig.TriggerPolicy.ErrorRate.specials:type_name -> v1.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig
	26, // 66: v1.ClimbConfig.TriggerPolicy.SlowRate.enable:type_name -> google.protobuf.BoolValue
	28, // 67: v1.ClimbConfig.TriggerPolicy.SlowRate.maxRt:type_name -> google.protobuf.Duration
	29, // 68: v1.ClimbConfig.TriggerPolicy.SlowRate.slowRate:type_name -> google.protobuf.Int32Value
	24, // 69: v1.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.type:type_name -> google.protobuf.StringValue
	30, // 70: v1.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorCodes:type_name -> google.protobuf.Int64Value
	29, // 71: v1.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorRate:type_name -> google.protobuf.Int32Value
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_ratelimit_proto_init() }
func file_ratelimit_proto_init() {
	if File_ratelimit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ratelimit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountAdjuster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_MetricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_TriggerPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_ClimbThrottling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_TriggerPolicy_ErrorRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_TriggerPolicy_SlowRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ratelimit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ratelimit_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ratelimit_proto_goTypes,
		DependencyIndexes: file_ratelimit_proto_depIdxs,
		EnumInfos:         file_ratelimit_proto_enumTypes,
		MessageInfos:      file_ratelimit_proto_msgTypes,
	}.Build()
	File_ratelimit_proto = out.File
	file_ratelimit_proto_rawDesc = nil
	file_ratelimit_proto_goTypes = nil
	file_ratelimit_proto_depIdxs = nil
}
