// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: lane.proto

package traffic_manage

import (
	model "github.com/polarismesh/specification/source/go/api/v1/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 多个 SourceMatch 之间的判断关系
type TrafficMatchRule_TrafficMatchMode int32

const (
	// 与模式
	TrafficMatchRule_AND TrafficMatchRule_TrafficMatchMode = 0
	// 或模式
	TrafficMatchRule_OR TrafficMatchRule_TrafficMatchMode = 1
)

// Enum value maps for TrafficMatchRule_TrafficMatchMode.
var (
	TrafficMatchRule_TrafficMatchMode_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	TrafficMatchRule_TrafficMatchMode_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x TrafficMatchRule_TrafficMatchMode) Enum() *TrafficMatchRule_TrafficMatchMode {
	p := new(TrafficMatchRule_TrafficMatchMode)
	*p = x
	return p
}

func (x TrafficMatchRule_TrafficMatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficMatchRule_TrafficMatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lane_proto_enumTypes[0].Descriptor()
}

func (TrafficMatchRule_TrafficMatchMode) Type() protoreflect.EnumType {
	return &file_lane_proto_enumTypes[0]
}

func (x TrafficMatchRule_TrafficMatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficMatchRule_TrafficMatchMode.Descriptor instead.
func (TrafficMatchRule_TrafficMatchMode) EnumDescriptor() ([]byte, []int) {
	return file_lane_proto_rawDescGZIP(), []int{4, 0}
}

type LaneRule_LaneMatchMode int32

const (
	// 严格匹配模式
	LaneRule_STRICT LaneRule_LaneMatchMode = 0
	// 宽松匹配模式
	LaneRule_PERMISSIVE LaneRule_LaneMatchMode = 1
)

// Enum value maps for LaneRule_LaneMatchMode.
var (
	LaneRule_LaneMatchMode_name = map[int32]string{
		0: "STRICT",
		1: "PERMISSIVE",
	}
	LaneRule_LaneMatchMode_value = map[string]int32{
		"STRICT":     0,
		"PERMISSIVE": 1,
	}
)

func (x LaneRule_LaneMatchMode) Enum() *LaneRule_LaneMatchMode {
	p := new(LaneRule_LaneMatchMode)
	*p = x
	return p
}

func (x LaneRule_LaneMatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneRule_LaneMatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lane_proto_enumTypes[1].Descriptor()
}

func (LaneRule_LaneMatchMode) Type() protoreflect.EnumType {
	return &file_lane_proto_enumTypes[1]
}

func (x LaneRule_LaneMatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneRule_LaneMatchMode.Descriptor instead.
func (LaneRule_LaneMatchMode) EnumDescriptor() ([]byte, []int) {
	return file_lane_proto_rawDescGZIP(), []int{5, 0}
}

// 流量入口
type TrafficEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标记流量入口类型
	// type == "polarismesh.cn/gateway/spring-cloud-gateway", 则 selector 为
	// ServiceGatewaySelector type == "polarismesh.cn/service, 则 selector 为
	// ServiceSelector
	Type     string     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Selector *anypb.Any `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *TrafficEntry) Reset() {
	*x = TrafficEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficEntry) ProtoMessage() {}

func (x *TrafficEntry) ProtoReflect() protoreflect.Message {
	mi := &file_lane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficEntry.ProtoReflect.Descriptor instead.
func (*TrafficEntry) Descriptor() ([]byte, []int) {
	return file_lane_proto_rawDescGZIP(), []int{0}
}

func (x *TrafficEntry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TrafficEntry) GetSelector() *anypb.Any {
	if x != nil {
		return x.Selector
	}
	return nil
}

// 微服务网关入口定义
type ServiceGatewaySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Service   string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// 决定要不要部份
	Labels map[string]*model.MatchString `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServiceGatewaySelector) Reset() {
	*x = ServiceGatewaySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGatewaySelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGatewaySelector) ProtoMessage() {}

func (x *ServiceGatewaySelector) ProtoReflect() protoreflect.Message {
	mi := &file_lane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGatewaySelector.ProtoReflect.Descriptor instead.
func (*ServiceGatewaySelector) Descriptor() ([]byte, []int) {
	return file_lane_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceGatewaySelector) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ServiceGatewaySelector) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceGatewaySelector) GetLabels() map[string]*model.MatchString {
	if x != nil {
		return x.Labels
	}
	return nil
}

// 普通服务入口定义
type ServiceSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Service   string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// 决定要不要部份
	Labels map[string]*model.MatchString `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServiceSelector) Reset() {
	*x = ServiceSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSelector) ProtoMessage() {}

func (x *ServiceSelector) ProtoReflect() protoreflect.Message {
	mi := &file_lane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSelector.ProtoReflect.Descriptor instead.
func (*ServiceSelector) Descriptor() ([]byte, []int) {
	return file_lane_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceSelector) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ServiceSelector) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceSelector) GetLabels() map[string]*model.MatchString {
	if x != nil {
		return x.Labels
	}
	return nil
}

// 泳道组实体定义
type LaneGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 泳道组 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 泳道组名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 泳道组内的流量入口信息
	Entries []*TrafficEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
	// 在泳道组内的服务列表信息
	Destinations []*DestinationGroup `protobuf:"bytes,4,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// 泳道组描述信息
	Revision string `protobuf:"bytes,7,opt,name=revision,proto3" json:"revision,omitempty"`
	// 泳道组描述信息
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// 泳道组的创建时间
	Ctime string `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// 泳道组的更新时间
	Mtime string `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// 泳道组内的流量入口信息
	Rules []*LaneRule `protobuf:"bytes,11,rep,name=rules,proto3" json:"rules,omitempty"`
	// 泳道组标签信息
	Metadata map[string]string `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LaneGroup) Reset() {
	*x = LaneGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaneGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaneGroup) ProtoMessage() {}

func (x *LaneGroup) ProtoReflect() protoreflect.Message {
	mi := &file_lane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaneGroup.ProtoReflect.Descriptor instead.
func (*LaneGroup) Descriptor() ([]byte, []int) {
	return file_lane_proto_rawDescGZIP(), []int{3}
}

func (x *LaneGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LaneGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaneGroup) GetEntries() []*TrafficEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *LaneGroup) GetDestinations() []*DestinationGroup {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *LaneGroup) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *LaneGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LaneGroup) GetCtime() string {
	if x != nil {
		return x.Ctime
	}
	return ""
}

func (x *LaneGroup) GetMtime() string {
	if x != nil {
		return x.Mtime
	}
	return ""
}

func (x *LaneGroup) GetRules() []*LaneRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *LaneGroup) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TrafficMatchRule 流量匹配规则
type TrafficMatchRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 流量匹配规则，判断哪些流量需要进入泳道
	Arguments []*SourceMatch                    `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
	MatchMode TrafficMatchRule_TrafficMatchMode `protobuf:"varint,14,opt,name=matchMode,proto3,enum=v1.TrafficMatchRule_TrafficMatchMode" json:"matchMode,omitempty"`
}

func (x *TrafficMatchRule) Reset() {
	*x = TrafficMatchRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficMatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficMatchRule) ProtoMessage() {}

func (x *TrafficMatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_lane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficMatchRule.ProtoReflect.Descriptor instead.
func (*TrafficMatchRule) Descriptor() ([]byte, []int) {
	return file_lane_proto_rawDescGZIP(), []int{4}
}

func (x *TrafficMatchRule) GetArguments() []*SourceMatch {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *TrafficMatchRule) GetMatchMode() TrafficMatchRule_TrafficMatchMode {
	if x != nil {
		return x.MatchMode
	}
	return TrafficMatchRule_AND
}

// 泳道规则
type LaneRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 所属泳道组的名称
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// 流量匹配规则
	TrafficMatchRule *TrafficMatchRule `protobuf:"bytes,4,opt,name=traffic_match_rule,json=trafficMatchRule,proto3" json:"traffic_match_rule,omitempty"`
	// 保存这个泳道的默认实例标签
	DefaultLabelValue string `protobuf:"bytes,5,opt,name=default_label_value,json=defaultLabelValue,proto3" json:"default_label_value,omitempty"`
	// 泳道规则是否启用
	Enable    bool                   `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
	MatchMode LaneRule_LaneMatchMode `protobuf:"varint,7,opt,name=match_mode,json=matchMode,proto3,enum=v1.LaneRule_LaneMatchMode" json:"match_mode,omitempty"`
	// revision routing version
	Revision string `protobuf:"bytes,8,opt,name=revision,proto3" json:"revision,omitempty"`
	// ctime create time of the rules
	Ctime string `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// mtime modify time of the rules
	Mtime string `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// etime enable time of the rules
	Etime string `protobuf:"bytes,11,opt,name=etime,proto3" json:"etime,omitempty"`
	// priority rules priority
	Priority uint32 `protobuf:"varint,12,opt,name=priority,proto3" json:"priority,omitempty"`
	// description simple description rules
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *LaneRule) Reset() {
	*x = LaneRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaneRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaneRule) ProtoMessage() {}

func (x *LaneRule) ProtoReflect() protoreflect.Message {
	mi := &file_lane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaneRule.ProtoReflect.Descriptor instead.
func (*LaneRule) Descriptor() ([]byte, []int) {
	return file_lane_proto_rawDescGZIP(), []int{5}
}

func (x *LaneRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LaneRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaneRule) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *LaneRule) GetTrafficMatchRule() *TrafficMatchRule {
	if x != nil {
		return x.TrafficMatchRule
	}
	return nil
}

func (x *LaneRule) GetDefaultLabelValue() string {
	if x != nil {
		return x.DefaultLabelValue
	}
	return ""
}

func (x *LaneRule) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *LaneRule) GetMatchMode() LaneRule_LaneMatchMode {
	if x != nil {
		return x.MatchMode
	}
	return LaneRule_STRICT
}

func (x *LaneRule) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *LaneRule) GetCtime() string {
	if x != nil {
		return x.Ctime
	}
	return ""
}

func (x *LaneRule) GetMtime() string {
	if x != nil {
		return x.Mtime
	}
	return ""
}

func (x *LaneRule) GetEtime() string {
	if x != nil {
		return x.Etime
	}
	return ""
}

func (x *LaneRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *LaneRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_lane_proto protoreflect.FileDescriptor

var file_lane_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xdc, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x4a, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x03,
	0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x23, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x22, 0xdd, 0x03, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x42, 0x8a, 0x01, 0x0a, 0x37, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x42, 0x09, 0x4c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x44,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lane_proto_rawDescOnce sync.Once
	file_lane_proto_rawDescData = file_lane_proto_rawDesc
)

func file_lane_proto_rawDescGZIP() []byte {
	file_lane_proto_rawDescOnce.Do(func() {
		file_lane_proto_rawDescData = protoimpl.X.CompressGZIP(file_lane_proto_rawDescData)
	})
	return file_lane_proto_rawDescData
}

var file_lane_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_lane_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_lane_proto_goTypes = []interface{}{
	(TrafficMatchRule_TrafficMatchMode)(0), // 0: v1.TrafficMatchRule.TrafficMatchMode
	(LaneRule_LaneMatchMode)(0),            // 1: v1.LaneRule.LaneMatchMode
	(*TrafficEntry)(nil),                   // 2: v1.TrafficEntry
	(*ServiceGatewaySelector)(nil),         // 3: v1.ServiceGatewaySelector
	(*ServiceSelector)(nil),                // 4: v1.ServiceSelector
	(*LaneGroup)(nil),                      // 5: v1.LaneGroup
	(*TrafficMatchRule)(nil),               // 6: v1.TrafficMatchRule
	(*LaneRule)(nil),                       // 7: v1.LaneRule
	nil,                                    // 8: v1.ServiceGatewaySelector.LabelsEntry
	nil,                                    // 9: v1.ServiceSelector.LabelsEntry
	nil,                                    // 10: v1.LaneGroup.MetadataEntry
	(*anypb.Any)(nil),                      // 11: google.protobuf.Any
	(*DestinationGroup)(nil),               // 12: v1.DestinationGroup
	(*SourceMatch)(nil),                    // 13: v1.SourceMatch
	(*model.MatchString)(nil),              // 14: v1.MatchString
}
var file_lane_proto_depIdxs = []int32{
	11, // 0: v1.TrafficEntry.selector:type_name -> google.protobuf.Any
	8,  // 1: v1.ServiceGatewaySelector.labels:type_name -> v1.ServiceGatewaySelector.LabelsEntry
	9,  // 2: v1.ServiceSelector.labels:type_name -> v1.ServiceSelector.LabelsEntry
	2,  // 3: v1.LaneGroup.entries:type_name -> v1.TrafficEntry
	12, // 4: v1.LaneGroup.destinations:type_name -> v1.DestinationGroup
	7,  // 5: v1.LaneGroup.rules:type_name -> v1.LaneRule
	10, // 6: v1.LaneGroup.metadata:type_name -> v1.LaneGroup.MetadataEntry
	13, // 7: v1.TrafficMatchRule.arguments:type_name -> v1.SourceMatch
	0,  // 8: v1.TrafficMatchRule.matchMode:type_name -> v1.TrafficMatchRule.TrafficMatchMode
	6,  // 9: v1.LaneRule.traffic_match_rule:type_name -> v1.TrafficMatchRule
	1,  // 10: v1.LaneRule.match_mode:type_name -> v1.LaneRule.LaneMatchMode
	14, // 11: v1.ServiceGatewaySelector.LabelsEntry.value:type_name -> v1.MatchString
	14, // 12: v1.ServiceSelector.LabelsEntry.value:type_name -> v1.MatchString
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_lane_proto_init() }
func file_lane_proto_init() {
	if File_lane_proto != nil {
		return
	}
	file_routing_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGatewaySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaneGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficMatchRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaneRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lane_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lane_proto_goTypes,
		DependencyIndexes: file_lane_proto_depIdxs,
		EnumInfos:         file_lane_proto_enumTypes,
		MessageInfos:      file_lane_proto_msgTypes,
	}.Build()
	File_lane_proto = out.File
	file_lane_proto_rawDesc = nil
	file_lane_proto_goTypes = nil
	file_lane_proto_depIdxs = nil
}
