// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcapi.proto

package service_manage // import "github.com/polarismesh/specification/source/go/api/v1/service_manage"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolarisGRPCClient is the client API for PolarisGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolarisGRPCClient interface {
	// 客户端上报
	ReportClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Response, error)
	// 被调方注册服务实例
	RegisterInstance(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*Response, error)
	// 被调方反注册服务实例
	DeregisterInstance(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*Response, error)
	// 统一发现接口
	Discover(ctx context.Context, opts ...grpc.CallOption) (PolarisGRPC_DiscoverClient, error)
	// 被调方上报心跳
	Heartbeat(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*Response, error)
}

type polarisGRPCClient struct {
	cc *grpc.ClientConn
}

func NewPolarisGRPCClient(cc *grpc.ClientConn) PolarisGRPCClient {
	return &polarisGRPCClient{cc}
}

func (c *polarisGRPCClient) ReportClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/v1.PolarisGRPC/ReportClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polarisGRPCClient) RegisterInstance(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/v1.PolarisGRPC/RegisterInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polarisGRPCClient) DeregisterInstance(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/v1.PolarisGRPC/DeregisterInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polarisGRPCClient) Discover(ctx context.Context, opts ...grpc.CallOption) (PolarisGRPC_DiscoverClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PolarisGRPC_serviceDesc.Streams[0], "/v1.PolarisGRPC/Discover", opts...)
	if err != nil {
		return nil, err
	}
	x := &polarisGRPCDiscoverClient{stream}
	return x, nil
}

type PolarisGRPC_DiscoverClient interface {
	Send(*DiscoverRequest) error
	Recv() (*DiscoverResponse, error)
	grpc.ClientStream
}

type polarisGRPCDiscoverClient struct {
	grpc.ClientStream
}

func (x *polarisGRPCDiscoverClient) Send(m *DiscoverRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *polarisGRPCDiscoverClient) Recv() (*DiscoverResponse, error) {
	m := new(DiscoverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polarisGRPCClient) Heartbeat(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/v1.PolarisGRPC/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolarisGRPCServer is the server API for PolarisGRPC service.
type PolarisGRPCServer interface {
	// 客户端上报
	ReportClient(context.Context, *Client) (*Response, error)
	// 被调方注册服务实例
	RegisterInstance(context.Context, *Instance) (*Response, error)
	// 被调方反注册服务实例
	DeregisterInstance(context.Context, *Instance) (*Response, error)
	// 统一发现接口
	Discover(PolarisGRPC_DiscoverServer) error
	// 被调方上报心跳
	Heartbeat(context.Context, *Instance) (*Response, error)
}

func RegisterPolarisGRPCServer(s *grpc.Server, srv PolarisGRPCServer) {
	s.RegisterService(&_PolarisGRPC_serviceDesc, srv)
}

func _PolarisGRPC_ReportClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisGRPCServer).ReportClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisGRPC/ReportClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisGRPCServer).ReportClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolarisGRPC_RegisterInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisGRPCServer).RegisterInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisGRPC/RegisterInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisGRPCServer).RegisterInstance(ctx, req.(*Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolarisGRPC_DeregisterInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisGRPCServer).DeregisterInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisGRPC/DeregisterInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisGRPCServer).DeregisterInstance(ctx, req.(*Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolarisGRPC_Discover_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PolarisGRPCServer).Discover(&polarisGRPCDiscoverServer{stream})
}

type PolarisGRPC_DiscoverServer interface {
	Send(*DiscoverResponse) error
	Recv() (*DiscoverRequest, error)
	grpc.ServerStream
}

type polarisGRPCDiscoverServer struct {
	grpc.ServerStream
}

func (x *polarisGRPCDiscoverServer) Send(m *DiscoverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *polarisGRPCDiscoverServer) Recv() (*DiscoverRequest, error) {
	m := new(DiscoverRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PolarisGRPC_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisGRPCServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisGRPC/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisGRPCServer).Heartbeat(ctx, req.(*Instance))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolarisGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PolarisGRPC",
	HandlerType: (*PolarisGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportClient",
			Handler:    _PolarisGRPC_ReportClient_Handler,
		},
		{
			MethodName: "RegisterInstance",
			Handler:    _PolarisGRPC_RegisterInstance_Handler,
		},
		{
			MethodName: "DeregisterInstance",
			Handler:    _PolarisGRPC_DeregisterInstance_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _PolarisGRPC_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Discover",
			Handler:       _PolarisGRPC_Discover_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcapi.proto",
}

// PolarisHeartbeatGRPCClient is the client API for PolarisHeartbeatGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolarisHeartbeatGRPCClient interface {
	// 被调方批量上报心跳
	BatchHeartbeat(ctx context.Context, opts ...grpc.CallOption) (PolarisHeartbeatGRPC_BatchHeartbeatClient, error)
	// 批量获取心跳记录
	BatchGetHeartbeat(ctx context.Context, in *GetHeartbeatsRequest, opts ...grpc.CallOption) (*GetHeartbeatsResponse, error)
	// 批量删除心跳记录
	BatchDelHeartbeat(ctx context.Context, in *DelHeartbeatsRequest, opts ...grpc.CallOption) (*DelHeartbeatsResponse, error)
}

type polarisHeartbeatGRPCClient struct {
	cc *grpc.ClientConn
}

func NewPolarisHeartbeatGRPCClient(cc *grpc.ClientConn) PolarisHeartbeatGRPCClient {
	return &polarisHeartbeatGRPCClient{cc}
}

func (c *polarisHeartbeatGRPCClient) BatchHeartbeat(ctx context.Context, opts ...grpc.CallOption) (PolarisHeartbeatGRPC_BatchHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PolarisHeartbeatGRPC_serviceDesc.Streams[0], "/v1.PolarisHeartbeatGRPC/BatchHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &polarisHeartbeatGRPCBatchHeartbeatClient{stream}
	return x, nil
}

type PolarisHeartbeatGRPC_BatchHeartbeatClient interface {
	Send(*HeartbeatsRequest) error
	Recv() (*HeartbeatsResponse, error)
	grpc.ClientStream
}

type polarisHeartbeatGRPCBatchHeartbeatClient struct {
	grpc.ClientStream
}

func (x *polarisHeartbeatGRPCBatchHeartbeatClient) Send(m *HeartbeatsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *polarisHeartbeatGRPCBatchHeartbeatClient) Recv() (*HeartbeatsResponse, error) {
	m := new(HeartbeatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polarisHeartbeatGRPCClient) BatchGetHeartbeat(ctx context.Context, in *GetHeartbeatsRequest, opts ...grpc.CallOption) (*GetHeartbeatsResponse, error) {
	out := new(GetHeartbeatsResponse)
	err := c.cc.Invoke(ctx, "/v1.PolarisHeartbeatGRPC/BatchGetHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polarisHeartbeatGRPCClient) BatchDelHeartbeat(ctx context.Context, in *DelHeartbeatsRequest, opts ...grpc.CallOption) (*DelHeartbeatsResponse, error) {
	out := new(DelHeartbeatsResponse)
	err := c.cc.Invoke(ctx, "/v1.PolarisHeartbeatGRPC/BatchDelHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolarisHeartbeatGRPCServer is the server API for PolarisHeartbeatGRPC service.
type PolarisHeartbeatGRPCServer interface {
	// 被调方批量上报心跳
	BatchHeartbeat(PolarisHeartbeatGRPC_BatchHeartbeatServer) error
	// 批量获取心跳记录
	BatchGetHeartbeat(context.Context, *GetHeartbeatsRequest) (*GetHeartbeatsResponse, error)
	// 批量删除心跳记录
	BatchDelHeartbeat(context.Context, *DelHeartbeatsRequest) (*DelHeartbeatsResponse, error)
}

func RegisterPolarisHeartbeatGRPCServer(s *grpc.Server, srv PolarisHeartbeatGRPCServer) {
	s.RegisterService(&_PolarisHeartbeatGRPC_serviceDesc, srv)
}

func _PolarisHeartbeatGRPC_BatchHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PolarisHeartbeatGRPCServer).BatchHeartbeat(&polarisHeartbeatGRPCBatchHeartbeatServer{stream})
}

type PolarisHeartbeatGRPC_BatchHeartbeatServer interface {
	Send(*HeartbeatsResponse) error
	Recv() (*HeartbeatsRequest, error)
	grpc.ServerStream
}

type polarisHeartbeatGRPCBatchHeartbeatServer struct {
	grpc.ServerStream
}

func (x *polarisHeartbeatGRPCBatchHeartbeatServer) Send(m *HeartbeatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *polarisHeartbeatGRPCBatchHeartbeatServer) Recv() (*HeartbeatsRequest, error) {
	m := new(HeartbeatsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PolarisHeartbeatGRPC_BatchGetHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeartbeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisHeartbeatGRPCServer).BatchGetHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisHeartbeatGRPC/BatchGetHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisHeartbeatGRPCServer).BatchGetHeartbeat(ctx, req.(*GetHeartbeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolarisHeartbeatGRPC_BatchDelHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelHeartbeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisHeartbeatGRPCServer).BatchDelHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisHeartbeatGRPC/BatchDelHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisHeartbeatGRPCServer).BatchDelHeartbeat(ctx, req.(*DelHeartbeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolarisHeartbeatGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PolarisHeartbeatGRPC",
	HandlerType: (*PolarisHeartbeatGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchGetHeartbeat",
			Handler:    _PolarisHeartbeatGRPC_BatchGetHeartbeat_Handler,
		},
		{
			MethodName: "BatchDelHeartbeat",
			Handler:    _PolarisHeartbeatGRPC_BatchDelHeartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchHeartbeat",
			Handler:       _PolarisHeartbeatGRPC_BatchHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcapi.proto",
}

// PolarisServiceContractGRPCClient is the client API for PolarisServiceContractGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolarisServiceContractGRPCClient interface {
	// 上报服务契约
	ReportServiceContract(ctx context.Context, in *ServiceContract, opts ...grpc.CallOption) (*Response, error)
}

type polarisServiceContractGRPCClient struct {
	cc *grpc.ClientConn
}

func NewPolarisServiceContractGRPCClient(cc *grpc.ClientConn) PolarisServiceContractGRPCClient {
	return &polarisServiceContractGRPCClient{cc}
}

func (c *polarisServiceContractGRPCClient) ReportServiceContract(ctx context.Context, in *ServiceContract, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/v1.PolarisServiceContractGRPC/ReportServiceContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolarisServiceContractGRPCServer is the server API for PolarisServiceContractGRPC service.
type PolarisServiceContractGRPCServer interface {
	// 上报服务契约
	ReportServiceContract(context.Context, *ServiceContract) (*Response, error)
}

func RegisterPolarisServiceContractGRPCServer(s *grpc.Server, srv PolarisServiceContractGRPCServer) {
	s.RegisterService(&_PolarisServiceContractGRPC_serviceDesc, srv)
}

func _PolarisServiceContractGRPC_ReportServiceContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisServiceContractGRPCServer).ReportServiceContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisServiceContractGRPC/ReportServiceContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisServiceContractGRPCServer).ReportServiceContract(ctx, req.(*ServiceContract))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolarisServiceContractGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PolarisServiceContractGRPC",
	HandlerType: (*PolarisServiceContractGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportServiceContract",
			Handler:    _PolarisServiceContractGRPC_ReportServiceContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcapi.proto",
}

func init() { proto.RegisterFile("grpcapi.proto", fileDescriptor_grpcapi_cf23ac24a9d0726a) }

var fileDescriptor_grpcapi_cf23ac24a9d0726a = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0xad, 0x3c, 0x14, 0x2d, 0x6b, 0xbb, 0x2d, 0x6b, 0x17, 0xad, 0xc6, 0x4e, 0x6d, 0x07, 0xca,
	0x72, 0x86, 0x0c, 0xc9, 0x64, 0x2b, 0x70, 0x92, 0xc9, 0x50, 0x36, 0x2f, 0x01, 0x4d, 0x5c, 0x24,
	0x02, 0x16, 0xa9, 0x90, 0xb4, 0x7e, 0x21, 0x1f, 0x90, 0x6f, 0xcd, 0x1e, 0x48, 0x24, 0x65, 0x4b,
	0x09, 0x02, 0x64, 0xe3, 0xbd, 0xc7, 0xf7, 0x8e, 0x77, 0x7c, 0x68, 0x94, 0xa9, 0x92, 0xd1, 0x92,
	0x93, 0x52, 0x49, 0x23, 0xf1, 0xa0, 0x8a, 0xc3, 0x21, 0xdb, 0x71, 0x10, 0xc6, 0x22, 0xe1, 0x48,
	0x83, 0xaa, 0x38, 0x03, 0x5f, 0x2a, 0xb8, 0xdf, 0x83, 0xf6, 0xec, 0x58, 0x81, 0x2e, 0xa5, 0xd0,
	0x9e, 0xfe, 0x9a, 0x03, 0x55, 0x66, 0x0b, 0xb4, 0xbd, 0xc0, 0xa4, 0x30, 0x8a, 0x32, 0x57, 0xcf,
	0x1f, 0x06, 0xe8, 0xcb, 0x5a, 0xee, 0xa8, 0xe2, 0x7a, 0x95, 0xae, 0x97, 0xf8, 0x3f, 0x1a, 0xa6,
	0x50, 0x4a, 0x65, 0x96, 0x4d, 0x53, 0x8c, 0x48, 0x15, 0x13, 0x7b, 0x0e, 0x87, 0xf5, 0x39, 0x75,
	0x0d, 0xfe, 0x7c, 0xc0, 0x33, 0xf4, 0x2d, 0x85, 0x8c, 0x6b, 0x03, 0xea, 0x4a, 0x68, 0x43, 0x05,
	0x03, 0xdc, 0xdc, 0xf1, 0xd5, 0x0b, 0xc5, 0x1c, 0xe1, 0x04, 0xd4, 0xfb, 0x34, 0x67, 0xe8, 0x53,
	0xc2, 0x35, 0x93, 0x15, 0x28, 0xfc, 0xa3, 0xe6, 0x7c, 0x95, 0xda, 0xc9, 0xc3, 0x49, 0x17, 0xf4,
	0xc2, 0xbf, 0xc1, 0x2c, 0xc0, 0xff, 0xd0, 0xe7, 0x4b, 0xbf, 0x81, 0xb7, 0xfb, 0xcc, 0x9f, 0x02,
	0x34, 0x71, 0x9b, 0x68, 0x25, 0xcd, 0x4a, 0x2e, 0xd0, 0x78, 0x41, 0x0d, 0xcb, 0x0f, 0x46, 0xd3,
	0x5a, 0xda, 0x96, 0xda, 0x3f, 0xe4, 0x67, 0x1f, 0xee, 0x3c, 0xe5, 0x1a, 0x7d, 0x6f, 0x6c, 0x56,
	0x60, 0x0e, 0x4e, 0xbf, 0x6a, 0xc9, 0x31, 0xd2, 0x9a, 0xfd, 0x7e, 0x85, 0x69, 0x77, 0xe2, 0xbd,
	0x12, 0xd8, 0xf5, 0xbc, 0x8e, 0x91, 0xae, 0x57, 0x8f, 0x69, 0xe7, 0xde, 0xa0, 0xd0, 0x8d, 0x7d,
	0x63, 0x93, 0xb5, 0x74, 0x09, 0x69, 0x86, 0x3f, 0x47, 0x53, 0x9b, 0x87, 0x1e, 0x69, 0xbf, 0xa2,
	0x07, 0xf6, 0x77, 0xba, 0x78, 0x0c, 0xd0, 0x29, 0x93, 0x05, 0x31, 0x20, 0x58, 0x13, 0x61, 0xdb,
	0x88, 0xe8, 0x12, 0x18, 0xbf, 0xe3, 0x8c, 0x1a, 0x2e, 0x05, 0xa9, 0xe3, 0x5e, 0xc5, 0xc4, 0x07,
	0xbb, 0xa0, 0x82, 0x66, 0xb0, 0xc0, 0x47, 0xb1, 0x74, 0x7d, 0x36, 0x49, 0xc6, 0x4d, 0xbe, 0xdf,
	0x12, 0x26, 0x8b, 0xc8, 0x79, 0x15, 0xa0, 0xf3, 0xa8, 0xe3, 0x17, 0x69, 0xb9, 0x57, 0x0c, 0xa2,
	0x4c, 0x46, 0xb4, 0xe4, 0x51, 0x15, 0x47, 0xce, 0xf9, 0xd6, 0x3a, 0x6f, 0x3f, 0x36, 0xd1, 0x3f,
	0x79, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xfd, 0xe9, 0x43, 0x6c, 0x03, 0x00, 0x00,
}
