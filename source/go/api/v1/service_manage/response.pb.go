// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: response.proto

package service_manage

import (
	fault_tolerance "github.com/polarismesh/specification/source/go/api/v1/fault_tolerance"
	model "github.com/polarismesh/specification/source/go/api/v1/model"
	security "github.com/polarismesh/specification/source/go/api/v1/security"
	traffic_manage "github.com/polarismesh/specification/source/go/api/v1/traffic_manage"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiscoverResponse_DiscoverResponseType int32

const (
	DiscoverResponse_UNKNOWN         DiscoverResponse_DiscoverResponseType = 0
	DiscoverResponse_INSTANCE        DiscoverResponse_DiscoverResponseType = 1
	DiscoverResponse_CLUSTER         DiscoverResponse_DiscoverResponseType = 2
	DiscoverResponse_ROUTING         DiscoverResponse_DiscoverResponseType = 3
	DiscoverResponse_RATE_LIMIT      DiscoverResponse_DiscoverResponseType = 4
	DiscoverResponse_CIRCUIT_BREAKER DiscoverResponse_DiscoverResponseType = 5
	DiscoverResponse_SERVICES        DiscoverResponse_DiscoverResponseType = 6
	DiscoverResponse_NAMESPACES      DiscoverResponse_DiscoverResponseType = 12
	DiscoverResponse_FAULT_DETECTOR  DiscoverResponse_DiscoverResponseType = 13
	DiscoverResponse_LANE            DiscoverResponse_DiscoverResponseType = 100
	// 自定义路由规则
	DiscoverResponse_CUSTOM_ROUTE_RULE DiscoverResponse_DiscoverResponseType = 101
	// 就近路由规则
	DiscoverResponse_NEARBY_ROUTE_RULE DiscoverResponse_DiscoverResponseType = 102
	// 无损上下线规则
	DiscoverResponse_LOSSLESS DiscoverResponse_DiscoverResponseType = 103
)

// Enum value maps for DiscoverResponse_DiscoverResponseType.
var (
	DiscoverResponse_DiscoverResponseType_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "INSTANCE",
		2:   "CLUSTER",
		3:   "ROUTING",
		4:   "RATE_LIMIT",
		5:   "CIRCUIT_BREAKER",
		6:   "SERVICES",
		12:  "NAMESPACES",
		13:  "FAULT_DETECTOR",
		100: "LANE",
		101: "CUSTOM_ROUTE_RULE",
		102: "NEARBY_ROUTE_RULE",
		103: "LOSSLESS",
	}
	DiscoverResponse_DiscoverResponseType_value = map[string]int32{
		"UNKNOWN":           0,
		"INSTANCE":          1,
		"CLUSTER":           2,
		"ROUTING":           3,
		"RATE_LIMIT":        4,
		"CIRCUIT_BREAKER":   5,
		"SERVICES":          6,
		"NAMESPACES":        12,
		"FAULT_DETECTOR":    13,
		"LANE":              100,
		"CUSTOM_ROUTE_RULE": 101,
		"NEARBY_ROUTE_RULE": 102,
		"LOSSLESS":          103,
	}
)

func (x DiscoverResponse_DiscoverResponseType) Enum() *DiscoverResponse_DiscoverResponseType {
	p := new(DiscoverResponse_DiscoverResponseType)
	*p = x
	return p
}

func (x DiscoverResponse_DiscoverResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoverResponse_DiscoverResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[0].Descriptor()
}

func (DiscoverResponse_DiscoverResponseType) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[0]
}

func (x DiscoverResponse_DiscoverResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoverResponse_DiscoverResponseType.Descriptor instead.
func (DiscoverResponse_DiscoverResponseType) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{3, 0}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               *wrapperspb.UInt32Value         `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Info               *wrapperspb.StringValue         `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Client             *Client                         `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	Namespace          *model.Namespace                `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Service            *Service                        `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	Instance           *Instance                       `protobuf:"bytes,6,opt,name=instance,proto3" json:"instance,omitempty"`
	Routing            *traffic_manage.Routing         `protobuf:"bytes,7,opt,name=routing,proto3" json:"routing,omitempty"`
	Alias              *ServiceAlias                   `protobuf:"bytes,8,opt,name=alias,proto3" json:"alias,omitempty"`
	RateLimit          *traffic_manage.Rule            `protobuf:"bytes,9,opt,name=rateLimit,proto3" json:"rateLimit,omitempty"`
	CircuitBreaker     *fault_tolerance.CircuitBreaker `protobuf:"bytes,10,opt,name=circuitBreaker,proto3" json:"circuitBreaker,omitempty"`
	ConfigRelease      *ConfigRelease                  `protobuf:"bytes,11,opt,name=configRelease,proto3" json:"configRelease,omitempty"`
	User               *security.User                  `protobuf:"bytes,19,opt,name=user,proto3" json:"user,omitempty"`
	UserGroup          *security.UserGroup             `protobuf:"bytes,20,opt,name=userGroup,proto3" json:"userGroup,omitempty"`
	AuthStrategy       *security.AuthStrategy          `protobuf:"bytes,21,opt,name=authStrategy,proto3" json:"authStrategy,omitempty"`
	Relation           *security.UserGroupRelation     `protobuf:"bytes,22,opt,name=relation,proto3" json:"relation,omitempty"`
	LoginResponse      *security.LoginResponse         `protobuf:"bytes,23,opt,name=loginResponse,proto3" json:"loginResponse,omitempty"`
	ModifyAuthStrategy *security.ModifyAuthStrategy    `protobuf:"bytes,24,opt,name=modifyAuthStrategy,proto3" json:"modifyAuthStrategy,omitempty"`
	ModifyUserGroup    *security.ModifyUserGroup       `protobuf:"bytes,25,opt,name=modifyUserGroup,proto3" json:"modifyUserGroup,omitempty"`
	Resources          *security.StrategyResources     `protobuf:"bytes,26,opt,name=resources,proto3" json:"resources,omitempty"`
	OptionSwitch       *OptionSwitch                   `protobuf:"bytes,27,opt,name=optionSwitch,proto3" json:"optionSwitch,omitempty"`
	InstanceLabels     *InstanceLabels                 `protobuf:"bytes,28,opt,name=instanceLabels,proto3" json:"instanceLabels,omitempty"`
	Data               *anypb.Any                      `protobuf:"bytes,29,opt,name=data,proto3" json:"data,omitempty"`
	ServiceContract    *ServiceContract                `protobuf:"bytes,30,opt,name=serviceContract,proto3" json:"serviceContract,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetCode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Response) GetInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Response) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *Response) GetNamespace() *model.Namespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Response) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Response) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *Response) GetRouting() *traffic_manage.Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

func (x *Response) GetAlias() *ServiceAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Response) GetRateLimit() *traffic_manage.Rule {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *Response) GetCircuitBreaker() *fault_tolerance.CircuitBreaker {
	if x != nil {
		return x.CircuitBreaker
	}
	return nil
}

func (x *Response) GetConfigRelease() *ConfigRelease {
	if x != nil {
		return x.ConfigRelease
	}
	return nil
}

func (x *Response) GetUser() *security.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Response) GetUserGroup() *security.UserGroup {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

func (x *Response) GetAuthStrategy() *security.AuthStrategy {
	if x != nil {
		return x.AuthStrategy
	}
	return nil
}

func (x *Response) GetRelation() *security.UserGroupRelation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *Response) GetLoginResponse() *security.LoginResponse {
	if x != nil {
		return x.LoginResponse
	}
	return nil
}

func (x *Response) GetModifyAuthStrategy() *security.ModifyAuthStrategy {
	if x != nil {
		return x.ModifyAuthStrategy
	}
	return nil
}

func (x *Response) GetModifyUserGroup() *security.ModifyUserGroup {
	if x != nil {
		return x.ModifyUserGroup
	}
	return nil
}

func (x *Response) GetResources() *security.StrategyResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Response) GetOptionSwitch() *OptionSwitch {
	if x != nil {
		return x.OptionSwitch
	}
	return nil
}

func (x *Response) GetInstanceLabels() *InstanceLabels {
	if x != nil {
		return x.InstanceLabels
	}
	return nil
}

func (x *Response) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Response) GetServiceContract() *ServiceContract {
	if x != nil {
		return x.ServiceContract
	}
	return nil
}

type BatchWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Info      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Size      *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Responses []*Response             `protobuf:"bytes,4,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BatchWriteResponse) Reset() {
	*x = BatchWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWriteResponse) ProtoMessage() {}

func (x *BatchWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWriteResponse.ProtoReflect.Descriptor instead.
func (*BatchWriteResponse) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{1}
}

func (x *BatchWriteResponse) GetCode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *BatchWriteResponse) GetInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *BatchWriteResponse) GetSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *BatchWriteResponse) GetResponses() []*Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

type BatchQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               *wrapperspb.UInt32Value   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Info               *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Amount             *wrapperspb.UInt32Value   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Size               *wrapperspb.UInt32Value   `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Namespaces         []*model.Namespace        `protobuf:"bytes,5,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Services           []*Service                `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty"`
	Instances          []*Instance               `protobuf:"bytes,7,rep,name=instances,proto3" json:"instances,omitempty"`
	Routings           []*traffic_manage.Routing `protobuf:"bytes,8,rep,name=routings,proto3" json:"routings,omitempty"`
	Aliases            []*ServiceAlias           `protobuf:"bytes,9,rep,name=aliases,proto3" json:"aliases,omitempty"`
	RateLimits         []*traffic_manage.Rule    `protobuf:"bytes,10,rep,name=rateLimits,proto3" json:"rateLimits,omitempty"`
	ConfigWithServices []*ConfigWithService      `protobuf:"bytes,11,rep,name=configWithServices,proto3" json:"configWithServices,omitempty"`
	Users              []*security.User          `protobuf:"bytes,18,rep,name=users,proto3" json:"users,omitempty"`
	UserGroups         []*security.UserGroup     `protobuf:"bytes,19,rep,name=userGroups,proto3" json:"userGroups,omitempty"`
	AuthStrategies     []*security.AuthStrategy  `protobuf:"bytes,20,rep,name=authStrategies,proto3" json:"authStrategies,omitempty"`
	Clients            []*Client                 `protobuf:"bytes,21,rep,name=clients,proto3" json:"clients,omitempty"`
	Data               []*anypb.Any              `protobuf:"bytes,22,rep,name=data,proto3" json:"data,omitempty"`
	Summary            *model.Summary            `protobuf:"bytes,23,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *BatchQueryResponse) Reset() {
	*x = BatchQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryResponse) ProtoMessage() {}

func (x *BatchQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryResponse) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{2}
}

func (x *BatchQueryResponse) GetCode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *BatchQueryResponse) GetInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *BatchQueryResponse) GetAmount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BatchQueryResponse) GetSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *BatchQueryResponse) GetNamespaces() []*model.Namespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *BatchQueryResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *BatchQueryResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *BatchQueryResponse) GetRoutings() []*traffic_manage.Routing {
	if x != nil {
		return x.Routings
	}
	return nil
}

func (x *BatchQueryResponse) GetAliases() []*ServiceAlias {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *BatchQueryResponse) GetRateLimits() []*traffic_manage.Rule {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *BatchQueryResponse) GetConfigWithServices() []*ConfigWithService {
	if x != nil {
		return x.ConfigWithServices
	}
	return nil
}

func (x *BatchQueryResponse) GetUsers() []*security.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *BatchQueryResponse) GetUserGroups() []*security.UserGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *BatchQueryResponse) GetAuthStrategies() []*security.AuthStrategy {
	if x != nil {
		return x.AuthStrategies
	}
	return nil
}

func (x *BatchQueryResponse) GetClients() []*Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *BatchQueryResponse) GetData() []*anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BatchQueryResponse) GetSummary() *model.Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type DiscoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *wrapperspb.UInt32Value               `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Info           *wrapperspb.StringValue               `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Type           DiscoverResponse_DiscoverResponseType `protobuf:"varint,3,opt,name=type,proto3,enum=v1.DiscoverResponse_DiscoverResponseType" json:"type,omitempty"`
	Service        *Service                              `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Instances      []*Instance                           `protobuf:"bytes,5,rep,name=instances,proto3" json:"instances,omitempty"`
	Routing        *traffic_manage.Routing               `protobuf:"bytes,6,opt,name=routing,proto3" json:"routing,omitempty"`
	RateLimit      *traffic_manage.RateLimit             `protobuf:"bytes,7,opt,name=rateLimit,proto3" json:"rateLimit,omitempty"`
	CircuitBreaker *fault_tolerance.CircuitBreaker       `protobuf:"bytes,8,opt,name=circuitBreaker,proto3" json:"circuitBreaker,omitempty"`
	Services       []*Service                            `protobuf:"bytes,9,rep,name=services,proto3" json:"services,omitempty"`
	Namespaces     []*model.Namespace                    `protobuf:"bytes,10,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	FaultDetector  *fault_tolerance.FaultDetector        `protobuf:"bytes,11,opt,name=faultDetector,proto3" json:"faultDetector,omitempty"`
	AliasFor       *Service                              `protobuf:"bytes,21,opt,name=aliasFor,proto3" json:"aliasFor,omitempty"`
	Lanes          []*traffic_manage.LaneGroup           `protobuf:"bytes,22,rep,name=lanes,proto3" json:"lanes,omitempty"`
	// 自定义路由规则内容
	CustomRouteRules []*traffic_manage.RouteRule `protobuf:"bytes,23,rep,name=customRouteRules,proto3" json:"customRouteRules,omitempty"`
	// 就近路由规则内容
	NearbyRouteRules []*traffic_manage.RouteRule `protobuf:"bytes,24,rep,name=nearbyRouteRules,proto3" json:"nearbyRouteRules,omitempty"`
	// 无损上下线规则内容
	LosslessRules []*traffic_manage.LosslessRule `protobuf:"bytes,25,rep,name=losslessRules,proto3" json:"losslessRules,omitempty"`
}

func (x *DiscoverResponse) Reset() {
	*x = DiscoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverResponse) ProtoMessage() {}

func (x *DiscoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverResponse.ProtoReflect.Descriptor instead.
func (*DiscoverResponse) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{3}
}

func (x *DiscoverResponse) GetCode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *DiscoverResponse) GetInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DiscoverResponse) GetType() DiscoverResponse_DiscoverResponseType {
	if x != nil {
		return x.Type
	}
	return DiscoverResponse_UNKNOWN
}

func (x *DiscoverResponse) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *DiscoverResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *DiscoverResponse) GetRouting() *traffic_manage.Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

func (x *DiscoverResponse) GetRateLimit() *traffic_manage.RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *DiscoverResponse) GetCircuitBreaker() *fault_tolerance.CircuitBreaker {
	if x != nil {
		return x.CircuitBreaker
	}
	return nil
}

func (x *DiscoverResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *DiscoverResponse) GetNamespaces() []*model.Namespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *DiscoverResponse) GetFaultDetector() *fault_tolerance.FaultDetector {
	if x != nil {
		return x.FaultDetector
	}
	return nil
}

func (x *DiscoverResponse) GetAliasFor() *Service {
	if x != nil {
		return x.AliasFor
	}
	return nil
}

func (x *DiscoverResponse) GetLanes() []*traffic_manage.LaneGroup {
	if x != nil {
		return x.Lanes
	}
	return nil
}

func (x *DiscoverResponse) GetCustomRouteRules() []*traffic_manage.RouteRule {
	if x != nil {
		return x.CustomRouteRules
	}
	return nil
}

func (x *DiscoverResponse) GetNearbyRouteRules() []*traffic_manage.RouteRule {
	if x != nil {
		return x.NearbyRouteRules
	}
	return nil
}

func (x *DiscoverResponse) GetLosslessRules() []*traffic_manage.LosslessRule {
	if x != nil {
		return x.LosslessRules
	}
	return nil
}

type OptionSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OptionSwitch) Reset() {
	*x = OptionSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionSwitch) ProtoMessage() {}

func (x *OptionSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionSwitch.ProtoReflect.Descriptor instead.
func (*OptionSwitch) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{4}
}

func (x *OptionSwitch) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type InstanceLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels    map[string]*model.StringList `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Namespace string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Service   string                       `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	ServiceId string                       `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *InstanceLabels) Reset() {
	*x = InstanceLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceLabels) ProtoMessage() {}

func (x *InstanceLabels) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceLabels.ProtoReflect.Descriptor instead.
func (*InstanceLabels) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{5}
}

func (x *InstanceLabels) GetLabels() map[string]*model.StringList {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InstanceLabels) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InstanceLabels) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *InstanceLabels) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

var File_response_proto protoreflect.FileDescriptor

var file_response_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x86, 0x09, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a,
	0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x13, 0x22, 0xd6, 0x01, 0x0a,
	0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xb0, 0x06, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x38, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x12, 0x22, 0xdc, 0x08, 0x0a, 0x10, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x46, 0x6f, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x05, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x10, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x6c, 0x6f, 0x73, 0x73,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0xae, 0x02, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10,
	0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x10,
	0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x64, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x10, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x41, 0x52, 0x42, 0x59,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x66, 0x12, 0x0c, 0x0a,
	0x08, 0x4c, 0x4f, 0x53, 0x53, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x67, 0x22, 0x04, 0x08, 0x07, 0x10,
	0x0b, 0x22, 0x04, 0x08, 0x0e, 0x10, 0x63, 0x2a, 0x04, 0x4d, 0x45, 0x53, 0x48, 0x2a, 0x0b, 0x4d,
	0x45, 0x53, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x2a, 0x0e, 0x46, 0x4c, 0x55, 0x58,
	0x5f, 0x44, 0x42, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x2a, 0x08, 0x46, 0x4c, 0x55, 0x58,
	0x5f, 0x53, 0x44, 0x4b, 0x2a, 0x0b, 0x46, 0x4c, 0x55, 0x58, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x15, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01,
	0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x36, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x1a,
	0x49, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x8e, 0x01, 0x0a, 0x37, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_response_proto_rawDescOnce sync.Once
	file_response_proto_rawDescData = file_response_proto_rawDesc
)

func file_response_proto_rawDescGZIP() []byte {
	file_response_proto_rawDescOnce.Do(func() {
		file_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_response_proto_rawDescData)
	})
	return file_response_proto_rawDescData
}

var file_response_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_response_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_response_proto_goTypes = []interface{}{
	(DiscoverResponse_DiscoverResponseType)(0), // 0: v1.DiscoverResponse.DiscoverResponseType
	(*Response)(nil),                       // 1: v1.Response
	(*BatchWriteResponse)(nil),             // 2: v1.BatchWriteResponse
	(*BatchQueryResponse)(nil),             // 3: v1.BatchQueryResponse
	(*DiscoverResponse)(nil),               // 4: v1.DiscoverResponse
	(*OptionSwitch)(nil),                   // 5: v1.OptionSwitch
	(*InstanceLabels)(nil),                 // 6: v1.InstanceLabels
	nil,                                    // 7: v1.OptionSwitch.OptionsEntry
	nil,                                    // 8: v1.InstanceLabels.LabelsEntry
	(*wrapperspb.UInt32Value)(nil),         // 9: google.protobuf.UInt32Value
	(*wrapperspb.StringValue)(nil),         // 10: google.protobuf.StringValue
	(*Client)(nil),                         // 11: v1.Client
	(*model.Namespace)(nil),                // 12: v1.Namespace
	(*Service)(nil),                        // 13: v1.Service
	(*Instance)(nil),                       // 14: v1.Instance
	(*traffic_manage.Routing)(nil),         // 15: v1.Routing
	(*ServiceAlias)(nil),                   // 16: v1.ServiceAlias
	(*traffic_manage.Rule)(nil),            // 17: v1.Rule
	(*fault_tolerance.CircuitBreaker)(nil), // 18: v1.CircuitBreaker
	(*ConfigRelease)(nil),                  // 19: v1.ConfigRelease
	(*security.User)(nil),                  // 20: v1.User
	(*security.UserGroup)(nil),             // 21: v1.UserGroup
	(*security.AuthStrategy)(nil),          // 22: v1.AuthStrategy
	(*security.UserGroupRelation)(nil),     // 23: v1.UserGroupRelation
	(*security.LoginResponse)(nil),         // 24: v1.LoginResponse
	(*security.ModifyAuthStrategy)(nil),    // 25: v1.ModifyAuthStrategy
	(*security.ModifyUserGroup)(nil),       // 26: v1.ModifyUserGroup
	(*security.StrategyResources)(nil),     // 27: v1.StrategyResources
	(*anypb.Any)(nil),                      // 28: google.protobuf.Any
	(*ServiceContract)(nil),                // 29: v1.ServiceContract
	(*ConfigWithService)(nil),              // 30: v1.ConfigWithService
	(*model.Summary)(nil),                  // 31: v1.Summary
	(*traffic_manage.RateLimit)(nil),       // 32: v1.RateLimit
	(*fault_tolerance.FaultDetector)(nil),  // 33: v1.FaultDetector
	(*traffic_manage.LaneGroup)(nil),       // 34: v1.LaneGroup
	(*traffic_manage.RouteRule)(nil),       // 35: v1.RouteRule
	(*traffic_manage.LosslessRule)(nil),    // 36: v1.LosslessRule
	(*model.StringList)(nil),               // 37: v1.StringList
}
var file_response_proto_depIdxs = []int32{
	9,  // 0: v1.Response.code:type_name -> google.protobuf.UInt32Value
	10, // 1: v1.Response.info:type_name -> google.protobuf.StringValue
	11, // 2: v1.Response.client:type_name -> v1.Client
	12, // 3: v1.Response.namespace:type_name -> v1.Namespace
	13, // 4: v1.Response.service:type_name -> v1.Service
	14, // 5: v1.Response.instance:type_name -> v1.Instance
	15, // 6: v1.Response.routing:type_name -> v1.Routing
	16, // 7: v1.Response.alias:type_name -> v1.ServiceAlias
	17, // 8: v1.Response.rateLimit:type_name -> v1.Rule
	18, // 9: v1.Response.circuitBreaker:type_name -> v1.CircuitBreaker
	19, // 10: v1.Response.configRelease:type_name -> v1.ConfigRelease
	20, // 11: v1.Response.user:type_name -> v1.User
	21, // 12: v1.Response.userGroup:type_name -> v1.UserGroup
	22, // 13: v1.Response.authStrategy:type_name -> v1.AuthStrategy
	23, // 14: v1.Response.relation:type_name -> v1.UserGroupRelation
	24, // 15: v1.Response.loginResponse:type_name -> v1.LoginResponse
	25, // 16: v1.Response.modifyAuthStrategy:type_name -> v1.ModifyAuthStrategy
	26, // 17: v1.Response.modifyUserGroup:type_name -> v1.ModifyUserGroup
	27, // 18: v1.Response.resources:type_name -> v1.StrategyResources
	5,  // 19: v1.Response.optionSwitch:type_name -> v1.OptionSwitch
	6,  // 20: v1.Response.instanceLabels:type_name -> v1.InstanceLabels
	28, // 21: v1.Response.data:type_name -> google.protobuf.Any
	29, // 22: v1.Response.serviceContract:type_name -> v1.ServiceContract
	9,  // 23: v1.BatchWriteResponse.code:type_name -> google.protobuf.UInt32Value
	10, // 24: v1.BatchWriteResponse.info:type_name -> google.protobuf.StringValue
	9,  // 25: v1.BatchWriteResponse.size:type_name -> google.protobuf.UInt32Value
	1,  // 26: v1.BatchWriteResponse.responses:type_name -> v1.Response
	9,  // 27: v1.BatchQueryResponse.code:type_name -> google.protobuf.UInt32Value
	10, // 28: v1.BatchQueryResponse.info:type_name -> google.protobuf.StringValue
	9,  // 29: v1.BatchQueryResponse.amount:type_name -> google.protobuf.UInt32Value
	9,  // 30: v1.BatchQueryResponse.size:type_name -> google.protobuf.UInt32Value
	12, // 31: v1.BatchQueryResponse.namespaces:type_name -> v1.Namespace
	13, // 32: v1.BatchQueryResponse.services:type_name -> v1.Service
	14, // 33: v1.BatchQueryResponse.instances:type_name -> v1.Instance
	15, // 34: v1.BatchQueryResponse.routings:type_name -> v1.Routing
	16, // 35: v1.BatchQueryResponse.aliases:type_name -> v1.ServiceAlias
	17, // 36: v1.BatchQueryResponse.rateLimits:type_name -> v1.Rule
	30, // 37: v1.BatchQueryResponse.configWithServices:type_name -> v1.ConfigWithService
	20, // 38: v1.BatchQueryResponse.users:type_name -> v1.User
	21, // 39: v1.BatchQueryResponse.userGroups:type_name -> v1.UserGroup
	22, // 40: v1.BatchQueryResponse.authStrategies:type_name -> v1.AuthStrategy
	11, // 41: v1.BatchQueryResponse.clients:type_name -> v1.Client
	28, // 42: v1.BatchQueryResponse.data:type_name -> google.protobuf.Any
	31, // 43: v1.BatchQueryResponse.summary:type_name -> v1.Summary
	9,  // 44: v1.DiscoverResponse.code:type_name -> google.protobuf.UInt32Value
	10, // 45: v1.DiscoverResponse.info:type_name -> google.protobuf.StringValue
	0,  // 46: v1.DiscoverResponse.type:type_name -> v1.DiscoverResponse.DiscoverResponseType
	13, // 47: v1.DiscoverResponse.service:type_name -> v1.Service
	14, // 48: v1.DiscoverResponse.instances:type_name -> v1.Instance
	15, // 49: v1.DiscoverResponse.routing:type_name -> v1.Routing
	32, // 50: v1.DiscoverResponse.rateLimit:type_name -> v1.RateLimit
	18, // 51: v1.DiscoverResponse.circuitBreaker:type_name -> v1.CircuitBreaker
	13, // 52: v1.DiscoverResponse.services:type_name -> v1.Service
	12, // 53: v1.DiscoverResponse.namespaces:type_name -> v1.Namespace
	33, // 54: v1.DiscoverResponse.faultDetector:type_name -> v1.FaultDetector
	13, // 55: v1.DiscoverResponse.aliasFor:type_name -> v1.Service
	34, // 56: v1.DiscoverResponse.lanes:type_name -> v1.LaneGroup
	35, // 57: v1.DiscoverResponse.customRouteRules:type_name -> v1.RouteRule
	35, // 58: v1.DiscoverResponse.nearbyRouteRules:type_name -> v1.RouteRule
	36, // 59: v1.DiscoverResponse.losslessRules:type_name -> v1.LosslessRule
	7,  // 60: v1.OptionSwitch.options:type_name -> v1.OptionSwitch.OptionsEntry
	8,  // 61: v1.InstanceLabels.labels:type_name -> v1.InstanceLabels.LabelsEntry
	37, // 62: v1.InstanceLabels.LabelsEntry.value:type_name -> v1.StringList
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_response_proto_init() }
func file_response_proto_init() {
	if File_response_proto != nil {
		return
	}
	file_service_proto_init()
	file_client_proto_init()
	file_configrelease_proto_init()
	file_contract_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_response_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_response_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_response_proto_goTypes,
		DependencyIndexes: file_response_proto_depIdxs,
		EnumInfos:         file_response_proto_enumTypes,
		MessageInfos:      file_response_proto_msgTypes,
	}.Build()
	File_response_proto = out.File
	file_response_proto_rawDesc = nil
	file_response_proto_goTypes = nil
	file_response_proto_depIdxs = nil
}
