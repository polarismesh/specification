// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_config_api.proto

package config_manage // import "github.com/polarismesh/specification/source/go/api/v1/config_manage"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolarisConfigGRPCClient is the client API for PolarisConfigGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolarisConfigGRPCClient interface {
	// 拉取配置
	GetConfigFile(ctx context.Context, in *ClientConfigFileInfo, opts ...grpc.CallOption) (*ConfigClientResponse, error)
	// 创建或更新配置
	UpsertConfigFile(ctx context.Context, in *ClientConfigFileInfo, opts ...grpc.CallOption) (*ConfigSimpleResponse, error)
	// 发布配置
	PublishConfigFile(ctx context.Context, in *ClientConfigFileInfo, opts ...grpc.CallOption) (*ConfigSimpleResponse, error)
	// 订阅配置变更
	WatchConfigFiles(ctx context.Context, in *ClientWatchConfigFileRequest, opts ...grpc.CallOption) (*ConfigClientResponse, error)
}

type polarisConfigGRPCClient struct {
	cc *grpc.ClientConn
}

func NewPolarisConfigGRPCClient(cc *grpc.ClientConn) PolarisConfigGRPCClient {
	return &polarisConfigGRPCClient{cc}
}

func (c *polarisConfigGRPCClient) GetConfigFile(ctx context.Context, in *ClientConfigFileInfo, opts ...grpc.CallOption) (*ConfigClientResponse, error) {
	out := new(ConfigClientResponse)
	err := c.cc.Invoke(ctx, "/v1.PolarisConfigGRPC/GetConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polarisConfigGRPCClient) UpsertConfigFile(ctx context.Context, in *ClientConfigFileInfo, opts ...grpc.CallOption) (*ConfigSimpleResponse, error) {
	out := new(ConfigSimpleResponse)
	err := c.cc.Invoke(ctx, "/v1.PolarisConfigGRPC/UpsertConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polarisConfigGRPCClient) PublishConfigFile(ctx context.Context, in *ClientConfigFileInfo, opts ...grpc.CallOption) (*ConfigSimpleResponse, error) {
	out := new(ConfigSimpleResponse)
	err := c.cc.Invoke(ctx, "/v1.PolarisConfigGRPC/PublishConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polarisConfigGRPCClient) WatchConfigFiles(ctx context.Context, in *ClientWatchConfigFileRequest, opts ...grpc.CallOption) (*ConfigClientResponse, error) {
	out := new(ConfigClientResponse)
	err := c.cc.Invoke(ctx, "/v1.PolarisConfigGRPC/WatchConfigFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolarisConfigGRPCServer is the server API for PolarisConfigGRPC service.
type PolarisConfigGRPCServer interface {
	// 拉取配置
	GetConfigFile(context.Context, *ClientConfigFileInfo) (*ConfigClientResponse, error)
	// 创建或更新配置
	UpsertConfigFile(context.Context, *ClientConfigFileInfo) (*ConfigSimpleResponse, error)
	// 发布配置
	PublishConfigFile(context.Context, *ClientConfigFileInfo) (*ConfigSimpleResponse, error)
	// 订阅配置变更
	WatchConfigFiles(context.Context, *ClientWatchConfigFileRequest) (*ConfigClientResponse, error)
}

func RegisterPolarisConfigGRPCServer(s *grpc.Server, srv PolarisConfigGRPCServer) {
	s.RegisterService(&_PolarisConfigGRPC_serviceDesc, srv)
}

func _PolarisConfigGRPC_GetConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConfigFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisConfigGRPCServer).GetConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisConfigGRPC/GetConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisConfigGRPCServer).GetConfigFile(ctx, req.(*ClientConfigFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolarisConfigGRPC_UpsertConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConfigFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisConfigGRPCServer).UpsertConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisConfigGRPC/UpsertConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisConfigGRPCServer).UpsertConfigFile(ctx, req.(*ClientConfigFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolarisConfigGRPC_PublishConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConfigFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisConfigGRPCServer).PublishConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisConfigGRPC/PublishConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisConfigGRPCServer).PublishConfigFile(ctx, req.(*ClientConfigFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolarisConfigGRPC_WatchConfigFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientWatchConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolarisConfigGRPCServer).WatchConfigFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolarisConfigGRPC/WatchConfigFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolarisConfigGRPCServer).WatchConfigFiles(ctx, req.(*ClientWatchConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolarisConfigGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PolarisConfigGRPC",
	HandlerType: (*PolarisConfigGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigFile",
			Handler:    _PolarisConfigGRPC_GetConfigFile_Handler,
		},
		{
			MethodName: "UpsertConfigFile",
			Handler:    _PolarisConfigGRPC_UpsertConfigFile_Handler,
		},
		{
			MethodName: "PublishConfigFile",
			Handler:    _PolarisConfigGRPC_PublishConfigFile_Handler,
		},
		{
			MethodName: "WatchConfigFiles",
			Handler:    _PolarisConfigGRPC_WatchConfigFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_config_api.proto",
}

func init() {
	proto.RegisterFile("grpc_config_api.proto", fileDescriptor_grpc_config_api_dce27c161daf0bf6)
}

var fileDescriptor_grpc_config_api_dce27c161daf0bf6 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x41, 0x4a, 0xc4, 0x30,
	0x14, 0x86, 0x75, 0x16, 0x2e, 0x02, 0xc2, 0x4c, 0x41, 0x18, 0xba, 0x12, 0x0f, 0x90, 0x50, 0x05,
	0x0f, 0x30, 0x45, 0xc7, 0xd9, 0x95, 0x0e, 0x22, 0xb8, 0x29, 0x69, 0x78, 0x6d, 0x1f, 0xa4, 0x79,
	0x31, 0x49, 0x7b, 0x15, 0xcf, 0xe3, 0xcd, 0xc4, 0xa6, 0x60, 0x55, 0x10, 0xc4, 0xed, 0xf7, 0x87,
	0x2f, 0xbc, 0xff, 0x67, 0x17, 0xad, 0xb3, 0xaa, 0x52, 0x64, 0x1a, 0x6c, 0x2b, 0x69, 0x91, 0x5b,
	0x47, 0x81, 0x92, 0xd5, 0x98, 0xa5, 0x9b, 0x99, 0x36, 0xa8, 0x21, 0xe2, 0x34, 0x5d, 0xa0, 0xca,
	0x81, 0xb7, 0x64, 0xfc, 0x9c, 0x5d, 0xbf, 0xad, 0xd8, 0xa6, 0x20, 0x2d, 0x1d, 0xfa, 0x7c, 0x7a,
	0xb5, 0x2f, 0x8b, 0x3c, 0xb9, 0x63, 0xe7, 0x7b, 0x08, 0x11, 0xdc, 0xa3, 0x86, 0x64, 0xcb, 0xc7,
	0x8c, 0xe7, 0x1a, 0xc1, 0x2c, 0xe8, 0xc1, 0x34, 0x94, 0xc6, 0x64, 0x62, 0x31, 0x2f, 0xe7, 0x0f,
	0xae, 0x4e, 0x92, 0x07, 0xb6, 0x7e, 0xb4, 0x1e, 0xdc, 0x9f, 0x4d, 0x47, 0xec, 0xad, 0x86, 0x85,
	0xe9, 0xc0, 0x36, 0xc5, 0x50, 0x6b, 0xf4, 0xdd, 0xbf, 0x55, 0x05, 0x5b, 0x3f, 0xc9, 0xa0, 0x16,
	0x22, 0x9f, 0x5c, 0x7e, 0x9a, 0xbe, 0x65, 0x25, 0xbc, 0x0c, 0xe0, 0xc3, 0x6f, 0x67, 0xee, 0x5e,
	0x4f, 0xd9, 0xad, 0xa2, 0x9e, 0x07, 0x30, 0x0a, 0x4c, 0xe0, 0x36, 0xf6, 0xc9, 0xbd, 0x05, 0x85,
	0x0d, 0x2a, 0x19, 0x90, 0x0c, 0xff, 0x98, 0x69, 0xcc, 0x78, 0xdc, 0x82, 0xf7, 0xd2, 0xc8, 0x16,
	0x76, 0xdb, 0x1f, 0xdd, 0x1f, 0xc1, 0x8d, 0xa8, 0xe0, 0x39, 0x6f, 0x31, 0x74, 0x43, 0xcd, 0x15,
	0xf5, 0x62, 0x16, 0xf6, 0xe0, 0x3b, 0xf1, 0x45, 0x2a, 0x3c, 0x0d, 0x4e, 0x81, 0x68, 0x49, 0x48,
	0x8b, 0x62, 0xcc, 0xc4, 0x3c, 0x75, 0xd4, 0xd7, 0x67, 0xd3, 0xc8, 0x37, 0xef, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x25, 0xd5, 0x04, 0xf8, 0x30, 0x02, 0x00, 0x00,
}
