// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: block_allow_list.proto

package security

import (
	model "github.com/polarismesh/specification/source/go/api/v1/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockAllowConfig_BlockAllowPolicy int32

const (
	BlockAllowConfig_ALLOW_LIST BlockAllowConfig_BlockAllowPolicy = 0
	BlockAllowConfig_BLOCK_LIST BlockAllowConfig_BlockAllowPolicy = 1
)

// Enum value maps for BlockAllowConfig_BlockAllowPolicy.
var (
	BlockAllowConfig_BlockAllowPolicy_name = map[int32]string{
		0: "ALLOW_LIST",
		1: "BLOCK_LIST",
	}
	BlockAllowConfig_BlockAllowPolicy_value = map[string]int32{
		"ALLOW_LIST": 0,
		"BLOCK_LIST": 1,
	}
)

func (x BlockAllowConfig_BlockAllowPolicy) Enum() *BlockAllowConfig_BlockAllowPolicy {
	p := new(BlockAllowConfig_BlockAllowPolicy)
	*p = x
	return p
}

func (x BlockAllowConfig_BlockAllowPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockAllowConfig_BlockAllowPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_block_allow_list_proto_enumTypes[0].Descriptor()
}

func (BlockAllowConfig_BlockAllowPolicy) Type() protoreflect.EnumType {
	return &file_block_allow_list_proto_enumTypes[0]
}

func (x BlockAllowConfig_BlockAllowPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockAllowConfig_BlockAllowPolicy.Descriptor instead.
func (BlockAllowConfig_BlockAllowPolicy) EnumDescriptor() ([]byte, []int) {
	return file_block_allow_list_proto_rawDescGZIP(), []int{1, 0}
}

// label type for gateway request
type BlockAllowConfig_MatchArgument_Type int32

const (
	// custom arguments
	BlockAllowConfig_MatchArgument_CUSTOM BlockAllowConfig_MatchArgument_Type = 0
	// header, match the http header, dubbo attachment, grpc header
	BlockAllowConfig_MatchArgument_HEADER BlockAllowConfig_MatchArgument_Type = 1
	// query, match the http query, dubbo argument
	BlockAllowConfig_MatchArgument_QUERY BlockAllowConfig_MatchArgument_Type = 2
	// caller service
	BlockAllowConfig_MatchArgument_CALLER_SERVICE BlockAllowConfig_MatchArgument_Type = 3
	// caller host ip
	BlockAllowConfig_MatchArgument_CALLER_IP BlockAllowConfig_MatchArgument_Type = 4
	// caller instance metadata
	BlockAllowConfig_MatchArgument_CALLER_METADATA BlockAllowConfig_MatchArgument_Type = 5
	// caller instance metadata
	BlockAllowConfig_MatchArgument_CALLEE_METADATA BlockAllowConfig_MatchArgument_Type = 6
)

// Enum value maps for BlockAllowConfig_MatchArgument_Type.
var (
	BlockAllowConfig_MatchArgument_Type_name = map[int32]string{
		0: "CUSTOM",
		1: "HEADER",
		2: "QUERY",
		3: "CALLER_SERVICE",
		4: "CALLER_IP",
		5: "CALLER_METADATA",
		6: "CALLEE_METADATA",
	}
	BlockAllowConfig_MatchArgument_Type_value = map[string]int32{
		"CUSTOM":          0,
		"HEADER":          1,
		"QUERY":           2,
		"CALLER_SERVICE":  3,
		"CALLER_IP":       4,
		"CALLER_METADATA": 5,
		"CALLEE_METADATA": 6,
	}
)

func (x BlockAllowConfig_MatchArgument_Type) Enum() *BlockAllowConfig_MatchArgument_Type {
	p := new(BlockAllowConfig_MatchArgument_Type)
	*p = x
	return p
}

func (x BlockAllowConfig_MatchArgument_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockAllowConfig_MatchArgument_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_block_allow_list_proto_enumTypes[1].Descriptor()
}

func (BlockAllowConfig_MatchArgument_Type) Type() protoreflect.EnumType {
	return &file_block_allow_list_proto_enumTypes[1]
}

func (x BlockAllowConfig_MatchArgument_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockAllowConfig_MatchArgument_Type.Descriptor instead.
func (BlockAllowConfig_MatchArgument_Type) EnumDescriptor() ([]byte, []int) {
	return file_block_allow_list_proto_rawDescGZIP(), []int{1, 0, 0}
}

type BlockAllowListRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique rule id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// unique rule name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// metadata for block allow list rules
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// service namespace
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// service name
	Service string `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// rule description
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// rule priority
	Priority uint32 `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`
	// rule enable
	Enable bool `protobuf:"varint,8,opt,name=enable,proto3" json:"enable,omitempty"`
	// ctime create time of the rules
	Ctime string `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// mtime modify time of the rules
	Mtime string `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// etime enable time of the rules
	Etime string `protobuf:"bytes,11,opt,name=etime,proto3" json:"etime,omitempty"`
	// block or allow configuration
	BlockAllowConfig []*BlockAllowConfig `protobuf:"bytes,12,rep,name=blockAllowConfig,json=block_allow_config,proto3" json:"blockAllowConfig,omitempty"`
}

func (x *BlockAllowListRule) Reset() {
	*x = BlockAllowListRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_allow_list_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockAllowListRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAllowListRule) ProtoMessage() {}

func (x *BlockAllowListRule) ProtoReflect() protoreflect.Message {
	mi := &file_block_allow_list_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAllowListRule.ProtoReflect.Descriptor instead.
func (*BlockAllowListRule) Descriptor() ([]byte, []int) {
	return file_block_allow_list_proto_rawDescGZIP(), []int{0}
}

func (x *BlockAllowListRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockAllowListRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockAllowListRule) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BlockAllowListRule) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *BlockAllowListRule) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *BlockAllowListRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BlockAllowListRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *BlockAllowListRule) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *BlockAllowListRule) GetCtime() string {
	if x != nil {
		return x.Ctime
	}
	return ""
}

func (x *BlockAllowListRule) GetMtime() string {
	if x != nil {
		return x.Mtime
	}
	return ""
}

func (x *BlockAllowListRule) GetEtime() string {
	if x != nil {
		return x.Etime
	}
	return ""
}

func (x *BlockAllowListRule) GetBlockAllowConfig() []*BlockAllowConfig {
	if x != nil {
		return x.BlockAllowConfig
	}
	return nil
}

type BlockAllowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blocking target api
	Api *model.API `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// arguments to match this config
	Arguments []*BlockAllowConfig_MatchArgument `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	// block or allow as policy
	BlockAllowPolicy BlockAllowConfig_BlockAllowPolicy `protobuf:"varint,3,opt,name=blockAllowPolicy,json=block_allow_policy,proto3,enum=v1.BlockAllowConfig_BlockAllowPolicy" json:"blockAllowPolicy,omitempty"`
}

func (x *BlockAllowConfig) Reset() {
	*x = BlockAllowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_allow_list_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockAllowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAllowConfig) ProtoMessage() {}

func (x *BlockAllowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_block_allow_list_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAllowConfig.ProtoReflect.Descriptor instead.
func (*BlockAllowConfig) Descriptor() ([]byte, []int) {
	return file_block_allow_list_proto_rawDescGZIP(), []int{1}
}

func (x *BlockAllowConfig) GetApi() *model.API {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BlockAllowConfig) GetArguments() []*BlockAllowConfig_MatchArgument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *BlockAllowConfig) GetBlockAllowPolicy() BlockAllowConfig_BlockAllowPolicy {
	if x != nil {
		return x.BlockAllowPolicy
	}
	return BlockAllowConfig_ALLOW_LIST
}

type BlockAllowConfig_MatchArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type BlockAllowConfig_MatchArgument_Type `protobuf:"varint,1,opt,name=type,proto3,enum=v1.BlockAllowConfig_MatchArgument_Type" json:"type,omitempty"`
	// header key or query key
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// header value or query value
	Value *model.MatchString `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BlockAllowConfig_MatchArgument) Reset() {
	*x = BlockAllowConfig_MatchArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_allow_list_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockAllowConfig_MatchArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAllowConfig_MatchArgument) ProtoMessage() {}

func (x *BlockAllowConfig_MatchArgument) ProtoReflect() protoreflect.Message {
	mi := &file_block_allow_list_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAllowConfig_MatchArgument.ProtoReflect.Descriptor instead.
func (*BlockAllowConfig_MatchArgument) Descriptor() ([]byte, []int) {
	return file_block_allow_list_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BlockAllowConfig_MatchArgument) GetType() BlockAllowConfig_MatchArgument_Type {
	if x != nil {
		return x.Type
	}
	return BlockAllowConfig_MatchArgument_CUSTOM
}

func (x *BlockAllowConfig_MatchArgument) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BlockAllowConfig_MatchArgument) GetValue() *model.MatchString {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_block_allow_list_proto protoreflect.FileDescriptor

var file_block_allow_list_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x03, 0x0a, 0x12, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x03, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x50, 0x49, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xfd,
	0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x49, 0x50, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4c,
	0x4c, 0x45, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x06, 0x22, 0x32,
	0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x01, 0x42, 0x88, 0x01, 0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x73, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_block_allow_list_proto_rawDescOnce sync.Once
	file_block_allow_list_proto_rawDescData = file_block_allow_list_proto_rawDesc
)

func file_block_allow_list_proto_rawDescGZIP() []byte {
	file_block_allow_list_proto_rawDescOnce.Do(func() {
		file_block_allow_list_proto_rawDescData = protoimpl.X.CompressGZIP(file_block_allow_list_proto_rawDescData)
	})
	return file_block_allow_list_proto_rawDescData
}

var file_block_allow_list_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_block_allow_list_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_block_allow_list_proto_goTypes = []interface{}{
	(BlockAllowConfig_BlockAllowPolicy)(0),   // 0: v1.BlockAllowConfig.BlockAllowPolicy
	(BlockAllowConfig_MatchArgument_Type)(0), // 1: v1.BlockAllowConfig.MatchArgument.Type
	(*BlockAllowListRule)(nil),               // 2: v1.BlockAllowListRule
	(*BlockAllowConfig)(nil),                 // 3: v1.BlockAllowConfig
	nil,                                      // 4: v1.BlockAllowListRule.MetadataEntry
	(*BlockAllowConfig_MatchArgument)(nil),   // 5: v1.BlockAllowConfig.MatchArgument
	(*model.API)(nil),                        // 6: v1.API
	(*model.MatchString)(nil),                // 7: v1.MatchString
}
var file_block_allow_list_proto_depIdxs = []int32{
	4, // 0: v1.BlockAllowListRule.metadata:type_name -> v1.BlockAllowListRule.MetadataEntry
	3, // 1: v1.BlockAllowListRule.blockAllowConfig:type_name -> v1.BlockAllowConfig
	6, // 2: v1.BlockAllowConfig.api:type_name -> v1.API
	5, // 3: v1.BlockAllowConfig.arguments:type_name -> v1.BlockAllowConfig.MatchArgument
	0, // 4: v1.BlockAllowConfig.blockAllowPolicy:type_name -> v1.BlockAllowConfig.BlockAllowPolicy
	1, // 5: v1.BlockAllowConfig.MatchArgument.type:type_name -> v1.BlockAllowConfig.MatchArgument.Type
	7, // 6: v1.BlockAllowConfig.MatchArgument.value:type_name -> v1.MatchString
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_block_allow_list_proto_init() }
func file_block_allow_list_proto_init() {
	if File_block_allow_list_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_block_allow_list_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockAllowListRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_allow_list_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockAllowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_allow_list_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockAllowConfig_MatchArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_block_allow_list_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_block_allow_list_proto_goTypes,
		DependencyIndexes: file_block_allow_list_proto_depIdxs,
		EnumInfos:         file_block_allow_list_proto_enumTypes,
		MessageInfos:      file_block_allow_list_proto_msgTypes,
	}.Build()
	File_block_allow_list_proto = out.File
	file_block_allow_list_proto_rawDesc = nil
	file_block_allow_list_proto_goTypes = nil
	file_block_allow_list_proto_depIdxs = nil
}
