// Code generated by protoc-gen-go. DO NOT EDIT.
// source: circuitbreaker.proto

package fault_tolerance // import "github.com/polarismesh/specification/source/go/api/v1/fault_tolerance"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import model "github.com/polarismesh/specification/source/go/api/v1/model"
import durationpb "google.golang.org/protobuf/types/known/durationpb"
import wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// circuitbreaking level
type Level int32

const (
	Level_UNKNOWN Level = 0
	// service level circuitbreaking
	Level_SERVICE Level = 1
	// method level circuitbreaking
	Level_METHOD Level = 2
	// group level circuitbreaking
	Level_GROUP Level = 3
	// instance level circuitbreaking
	Level_INSTANCE Level = 4
)

var Level_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVICE",
	2: "METHOD",
	3: "GROUP",
	4: "INSTANCE",
}
var Level_value = map[string]int32{
	"UNKNOWN":  0,
	"SERVICE":  1,
	"METHOD":   2,
	"GROUP":    3,
	"INSTANCE": 4,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}
func (Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{0}
}

// 主动探测配置
type RecoverConfig_OutlierDetectWhen int32

const (
	// 不开启监控探测
	RecoverConfig_NEVER RecoverConfig_OutlierDetectWhen = 0
	// 只有在熔断恢复时才开启健康探测
	RecoverConfig_ON_RECOVER RecoverConfig_OutlierDetectWhen = 1
	// 一直开启健康探测
	RecoverConfig_ALWAYS RecoverConfig_OutlierDetectWhen = 2
)

var RecoverConfig_OutlierDetectWhen_name = map[int32]string{
	0: "NEVER",
	1: "ON_RECOVER",
	2: "ALWAYS",
}
var RecoverConfig_OutlierDetectWhen_value = map[string]int32{
	"NEVER":      0,
	"ON_RECOVER": 1,
	"ALWAYS":     2,
}

func (x RecoverConfig_OutlierDetectWhen) String() string {
	return proto.EnumName(RecoverConfig_OutlierDetectWhen_name, int32(x))
}
func (RecoverConfig_OutlierDetectWhen) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{2, 0}
}

// 需要进行熔断的资源
// 支持SUBSET（子集群），以及INSTANCE（单个实例），默认为SUBSET
type DestinationSet_Resource int32

const (
	// 针对实例分组进行熔断
	DestinationSet_SUBSET DestinationSet_Resource = 0
	// 针对实例进行熔断
	DestinationSet_INSTANCE DestinationSet_Resource = 1
)

var DestinationSet_Resource_name = map[int32]string{
	0: "SUBSET",
	1: "INSTANCE",
}
var DestinationSet_Resource_value = map[string]int32{
	"SUBSET":   0,
	"INSTANCE": 1,
}

func (x DestinationSet_Resource) String() string {
	return proto.EnumName(DestinationSet_Resource_name, int32(x))
}
func (DestinationSet_Resource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{4, 0}
}

// 熔断决策类型，支持GLOBAL（分布式决策）以及LOCAL(本地决策），默认GLOBAL
// 当指定为GLOBAL时，则会定期上报统计数据并根据汇总数据进行熔断决策
type DestinationSet_Type int32

const (
	DestinationSet_GLOBAL DestinationSet_Type = 0
	DestinationSet_LOCAL  DestinationSet_Type = 1
)

var DestinationSet_Type_name = map[int32]string{
	0: "GLOBAL",
	1: "LOCAL",
}
var DestinationSet_Type_value = map[string]int32{
	"GLOBAL": 0,
	"LOCAL":  1,
}

func (x DestinationSet_Type) String() string {
	return proto.EnumName(DestinationSet_Type_name, int32(x))
}
func (DestinationSet_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{4, 1}
}

// 熔断范围，是否扩散针对相同服务下所有接口进行熔断
type DestinationSet_Scope int32

const (
	// 触发熔断条件，扩散熔断所有接口
	DestinationSet_ALL DestinationSet_Scope = 0
	// 触发熔断条件，只熔断当前接口
	DestinationSet_CURRENT DestinationSet_Scope = 1
)

var DestinationSet_Scope_name = map[int32]string{
	0: "ALL",
	1: "CURRENT",
}
var DestinationSet_Scope_value = map[string]int32{
	"ALL":     0,
	"CURRENT": 1,
}

func (x DestinationSet_Scope) String() string {
	return proto.EnumName(DestinationSet_Scope_name, int32(x))
}
func (DestinationSet_Scope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{4, 2}
}

type ErrorCondition_InputType int32

const (
	ErrorCondition_UNKNOWN  ErrorCondition_InputType = 0
	ErrorCondition_RET_CODE ErrorCondition_InputType = 1
	ErrorCondition_DELAY    ErrorCondition_InputType = 2
)

var ErrorCondition_InputType_name = map[int32]string{
	0: "UNKNOWN",
	1: "RET_CODE",
	2: "DELAY",
}
var ErrorCondition_InputType_value = map[string]int32{
	"UNKNOWN":  0,
	"RET_CODE": 1,
	"DELAY":    2,
}

func (x ErrorCondition_InputType) String() string {
	return proto.EnumName(ErrorCondition_InputType_name, int32(x))
}
func (ErrorCondition_InputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{8, 0}
}

type TriggerCondition_TriggerType int32

const (
	TriggerCondition_UNKNOWN           TriggerCondition_TriggerType = 0
	TriggerCondition_ERROR_RATE        TriggerCondition_TriggerType = 1
	TriggerCondition_CONSECUTIVE_ERROR TriggerCondition_TriggerType = 2
)

var TriggerCondition_TriggerType_name = map[int32]string{
	0: "UNKNOWN",
	1: "ERROR_RATE",
	2: "CONSECUTIVE_ERROR",
}
var TriggerCondition_TriggerType_value = map[string]int32{
	"UNKNOWN":           0,
	"ERROR_RATE":        1,
	"CONSECUTIVE_ERROR": 2,
}

func (x TriggerCondition_TriggerType) String() string {
	return proto.EnumName(TriggerCondition_TriggerType_name, int32(x))
}
func (TriggerCondition_TriggerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{9, 0}
}

// 单个熔断规则定义
type CircuitBreaker struct {
	// deprecated
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 规则版本
	// deprecated
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// 规则名
	// deprecated
	Name *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 规则命名空间
	// deprecated
	Namespace *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 规则所属服务
	Service          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	ServiceNamespace *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	// 熔断规则可以分为被调规则和主调规则
	// 被调规则针对所有的指定主调生效，假如不指定则对所有的主调生效
	// 主调规则为当前主调方的规则，假如不指定则针对所有被调生效
	// deprecated
	Inbounds []*CbRule `protobuf:"bytes,7,rep,name=inbounds,proto3" json:"inbounds,omitempty"`
	// deprecated
	Outbounds []*CbRule `protobuf:"bytes,8,rep,name=outbounds,proto3" json:"outbounds,omitempty"`
	// deprecated
	Token *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
	// deprecated
	Owners *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=owners,proto3" json:"owners,omitempty"`
	// 业务
	// deprecated
	Business *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=business,proto3" json:"business,omitempty"`
	// 部门
	// deprecated
	Department *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=department,proto3" json:"department,omitempty"`
	// 规则描述
	// deprecated
	Comment *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	// deprecated
	Ctime *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// deprecated
	Mtime    *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Revision *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=revision,proto3" json:"revision,omitempty"`
	// circuitbreaker rules for current service
	Rules                []*CircuitBreakerRule `protobuf:"bytes,21,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CircuitBreaker) Reset()         { *m = CircuitBreaker{} }
func (m *CircuitBreaker) String() string { return proto.CompactTextString(m) }
func (*CircuitBreaker) ProtoMessage()    {}
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{0}
}
func (m *CircuitBreaker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker.Unmarshal(m, b)
}
func (m *CircuitBreaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker.Marshal(b, m, deterministic)
}
func (dst *CircuitBreaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker.Merge(dst, src)
}
func (m *CircuitBreaker) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker.Size(m)
}
func (m *CircuitBreaker) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker proto.InternalMessageInfo

func (m *CircuitBreaker) GetId() *wrapperspb.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CircuitBreaker) GetVersion() *wrapperspb.StringValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CircuitBreaker) GetName() *wrapperspb.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CircuitBreaker) GetNamespace() *wrapperspb.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *CircuitBreaker) GetService() *wrapperspb.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *CircuitBreaker) GetServiceNamespace() *wrapperspb.StringValue {
	if m != nil {
		return m.ServiceNamespace
	}
	return nil
}

func (m *CircuitBreaker) GetInbounds() []*CbRule {
	if m != nil {
		return m.Inbounds
	}
	return nil
}

func (m *CircuitBreaker) GetOutbounds() []*CbRule {
	if m != nil {
		return m.Outbounds
	}
	return nil
}

func (m *CircuitBreaker) GetToken() *wrapperspb.StringValue {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *CircuitBreaker) GetOwners() *wrapperspb.StringValue {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *CircuitBreaker) GetBusiness() *wrapperspb.StringValue {
	if m != nil {
		return m.Business
	}
	return nil
}

func (m *CircuitBreaker) GetDepartment() *wrapperspb.StringValue {
	if m != nil {
		return m.Department
	}
	return nil
}

func (m *CircuitBreaker) GetComment() *wrapperspb.StringValue {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *CircuitBreaker) GetCtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *CircuitBreaker) GetMtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *CircuitBreaker) GetRevision() *wrapperspb.StringValue {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *CircuitBreaker) GetRules() []*CircuitBreakerRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// 主调匹配规则
type SourceMatcher struct {
	// 主调命名空间以及服务名，可以为*，代表全匹配
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 可选，主调业务标签，用于匹配是否使用该熔断规则，可放置用户的接口信息等
	Labels               map[string]*model.MatchString `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SourceMatcher) Reset()         { *m = SourceMatcher{} }
func (m *SourceMatcher) String() string { return proto.CompactTextString(m) }
func (*SourceMatcher) ProtoMessage()    {}
func (*SourceMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{1}
}
func (m *SourceMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceMatcher.Unmarshal(m, b)
}
func (m *SourceMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceMatcher.Marshal(b, m, deterministic)
}
func (dst *SourceMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceMatcher.Merge(dst, src)
}
func (m *SourceMatcher) XXX_Size() int {
	return xxx_messageInfo_SourceMatcher.Size(m)
}
func (m *SourceMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_SourceMatcher proto.InternalMessageInfo

func (m *SourceMatcher) GetService() *wrapperspb.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *SourceMatcher) GetNamespace() *wrapperspb.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *SourceMatcher) GetLabels() map[string]*model.MatchString {
	if m != nil {
		return m.Labels
	}
	return nil
}

// 熔断恢复配置
type RecoverConfig struct {
	// 触发熔断后到半开状态之间的等待间隔
	SleepWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=sleepWindow,proto3" json:"sleepWindow,omitempty"`
	// 半开后，最多重试多少次恢复
	MaxRetryAfterHalfOpen *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=maxRetryAfterHalfOpen,proto3" json:"maxRetryAfterHalfOpen,omitempty"`
	// 半开后放量的最大百分比
	RequestRateAfterHalfOpen []*wrapperspb.UInt32Value `protobuf:"bytes,3,rep,name=requestRateAfterHalfOpen,proto3" json:"requestRateAfterHalfOpen,omitempty"`
	// 熔断器半开到关闭所必须的最少成功率，默认100%
	SuccessRateToClose *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=successRateToClose,proto3" json:"successRateToClose,omitempty"`
	// 半开后最大放量数（用户不配置最大百分比时默认使用该配置）
	RequestCountAfterHalfOpen *wrapperspb.UInt32Value         `protobuf:"bytes,5,opt,name=requestCountAfterHalfOpen,proto3" json:"requestCountAfterHalfOpen,omitempty"`
	OutlierDetectWhen         RecoverConfig_OutlierDetectWhen `protobuf:"varint,6,opt,name=outlierDetectWhen,proto3,enum=v1.RecoverConfig_OutlierDetectWhen" json:"outlierDetectWhen,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                        `json:"-"`
	XXX_unrecognized          []byte                          `json:"-"`
	XXX_sizecache             int32                           `json:"-"`
}

func (m *RecoverConfig) Reset()         { *m = RecoverConfig{} }
func (m *RecoverConfig) String() string { return proto.CompactTextString(m) }
func (*RecoverConfig) ProtoMessage()    {}
func (*RecoverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{2}
}
func (m *RecoverConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverConfig.Unmarshal(m, b)
}
func (m *RecoverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverConfig.Marshal(b, m, deterministic)
}
func (dst *RecoverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverConfig.Merge(dst, src)
}
func (m *RecoverConfig) XXX_Size() int {
	return xxx_messageInfo_RecoverConfig.Size(m)
}
func (m *RecoverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverConfig proto.InternalMessageInfo

func (m *RecoverConfig) GetSleepWindow() *durationpb.Duration {
	if m != nil {
		return m.SleepWindow
	}
	return nil
}

func (m *RecoverConfig) GetMaxRetryAfterHalfOpen() *wrapperspb.UInt32Value {
	if m != nil {
		return m.MaxRetryAfterHalfOpen
	}
	return nil
}

func (m *RecoverConfig) GetRequestRateAfterHalfOpen() []*wrapperspb.UInt32Value {
	if m != nil {
		return m.RequestRateAfterHalfOpen
	}
	return nil
}

func (m *RecoverConfig) GetSuccessRateToClose() *wrapperspb.UInt32Value {
	if m != nil {
		return m.SuccessRateToClose
	}
	return nil
}

func (m *RecoverConfig) GetRequestCountAfterHalfOpen() *wrapperspb.UInt32Value {
	if m != nil {
		return m.RequestCountAfterHalfOpen
	}
	return nil
}

func (m *RecoverConfig) GetOutlierDetectWhen() RecoverConfig_OutlierDetectWhen {
	if m != nil {
		return m.OutlierDetectWhen
	}
	return RecoverConfig_NEVER
}

// 熔断策略
type CbPolicy struct {
	ErrorRate *CbPolicy_ErrRateConfig  `protobuf:"bytes,1,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	SlowRate  *CbPolicy_SlowRateConfig `protobuf:"bytes,2,opt,name=slowRate,proto3" json:"slowRate,omitempty"`
	// 熔断的决策周期，多久触发一次熔断决策
	JudgeDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=judgeDuration,proto3" json:"judgeDuration,omitempty"`
	// 最大熔断比例，超过多少比例后不会继续熔断
	MaxEjectionPercent   *wrapperspb.UInt32Value        `protobuf:"bytes,4,opt,name=maxEjectionPercent,proto3" json:"maxEjectionPercent,omitempty"`
	Consecutive          *CbPolicy_ConsecutiveErrConfig `protobuf:"bytes,5,opt,name=consecutive,proto3" json:"consecutive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CbPolicy) Reset()         { *m = CbPolicy{} }
func (m *CbPolicy) String() string { return proto.CompactTextString(m) }
func (*CbPolicy) ProtoMessage()    {}
func (*CbPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{3}
}
func (m *CbPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy.Unmarshal(m, b)
}
func (m *CbPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy.Marshal(b, m, deterministic)
}
func (dst *CbPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy.Merge(dst, src)
}
func (m *CbPolicy) XXX_Size() int {
	return xxx_messageInfo_CbPolicy.Size(m)
}
func (m *CbPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy proto.InternalMessageInfo

func (m *CbPolicy) GetErrorRate() *CbPolicy_ErrRateConfig {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *CbPolicy) GetSlowRate() *CbPolicy_SlowRateConfig {
	if m != nil {
		return m.SlowRate
	}
	return nil
}

func (m *CbPolicy) GetJudgeDuration() *durationpb.Duration {
	if m != nil {
		return m.JudgeDuration
	}
	return nil
}

func (m *CbPolicy) GetMaxEjectionPercent() *wrapperspb.UInt32Value {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return nil
}

func (m *CbPolicy) GetConsecutive() *CbPolicy_ConsecutiveErrConfig {
	if m != nil {
		return m.Consecutive
	}
	return nil
}

// 错误率熔断配置
type CbPolicy_ErrRateConfig struct {
	// 是否启用错误率配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 触发错误率熔断的最低请求阈值
	RequestVolumeThreshold *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=requestVolumeThreshold,proto3" json:"requestVolumeThreshold,omitempty"`
	// 可选。触发保持状态的错误率阈值，假如不配置，则默认不会进入Preserved状态
	ErrorRateToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=errorRateToPreserved,proto3" json:"errorRateToPreserved,omitempty"`
	// 触发熔断的错误率阈值
	ErrorRateToOpen      *wrapperspb.UInt32Value                 `protobuf:"bytes,4,opt,name=errorRateToOpen,proto3" json:"errorRateToOpen,omitempty"`
	Specials             []*CbPolicy_ErrRateConfig_SpecialConfig `protobuf:"bytes,5,rep,name=specials,proto3" json:"specials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CbPolicy_ErrRateConfig) Reset()         { *m = CbPolicy_ErrRateConfig{} }
func (m *CbPolicy_ErrRateConfig) String() string { return proto.CompactTextString(m) }
func (*CbPolicy_ErrRateConfig) ProtoMessage()    {}
func (*CbPolicy_ErrRateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{3, 0}
}
func (m *CbPolicy_ErrRateConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy_ErrRateConfig.Unmarshal(m, b)
}
func (m *CbPolicy_ErrRateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy_ErrRateConfig.Marshal(b, m, deterministic)
}
func (dst *CbPolicy_ErrRateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy_ErrRateConfig.Merge(dst, src)
}
func (m *CbPolicy_ErrRateConfig) XXX_Size() int {
	return xxx_messageInfo_CbPolicy_ErrRateConfig.Size(m)
}
func (m *CbPolicy_ErrRateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy_ErrRateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy_ErrRateConfig proto.InternalMessageInfo

func (m *CbPolicy_ErrRateConfig) GetEnable() *wrapperspb.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig) GetRequestVolumeThreshold() *wrapperspb.UInt32Value {
	if m != nil {
		return m.RequestVolumeThreshold
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig) GetErrorRateToPreserved() *wrapperspb.UInt32Value {
	if m != nil {
		return m.ErrorRateToPreserved
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig) GetErrorRateToOpen() *wrapperspb.UInt32Value {
	if m != nil {
		return m.ErrorRateToOpen
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig) GetSpecials() []*CbPolicy_ErrRateConfig_SpecialConfig {
	if m != nil {
		return m.Specials
	}
	return nil
}

// 错误码相关特定配置
type CbPolicy_ErrRateConfig_SpecialConfig struct {
	// 熔断关心的错误类型，用户可以自己定义
	Type                 *wrapperspb.StringValue  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ErrorCodes           []*wrapperspb.Int64Value `protobuf:"bytes,2,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
	ErrorRateToPreserved *wrapperspb.UInt32Value  `protobuf:"bytes,3,opt,name=errorRateToPreserved,proto3" json:"errorRateToPreserved,omitempty"`
	ErrorRateToOpen      *wrapperspb.UInt32Value  `protobuf:"bytes,4,opt,name=errorRateToOpen,proto3" json:"errorRateToOpen,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CbPolicy_ErrRateConfig_SpecialConfig) Reset()         { *m = CbPolicy_ErrRateConfig_SpecialConfig{} }
func (m *CbPolicy_ErrRateConfig_SpecialConfig) String() string { return proto.CompactTextString(m) }
func (*CbPolicy_ErrRateConfig_SpecialConfig) ProtoMessage()    {}
func (*CbPolicy_ErrRateConfig_SpecialConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{3, 0, 0}
}
func (m *CbPolicy_ErrRateConfig_SpecialConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.Unmarshal(m, b)
}
func (m *CbPolicy_ErrRateConfig_SpecialConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.Marshal(b, m, deterministic)
}
func (dst *CbPolicy_ErrRateConfig_SpecialConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.Merge(dst, src)
}
func (m *CbPolicy_ErrRateConfig_SpecialConfig) XXX_Size() int {
	return xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.Size(m)
}
func (m *CbPolicy_ErrRateConfig_SpecialConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig proto.InternalMessageInfo

func (m *CbPolicy_ErrRateConfig_SpecialConfig) GetType() *wrapperspb.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorCodes() []*wrapperspb.Int64Value {
	if m != nil {
		return m.ErrorCodes
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorRateToPreserved() *wrapperspb.UInt32Value {
	if m != nil {
		return m.ErrorRateToPreserved
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorRateToOpen() *wrapperspb.UInt32Value {
	if m != nil {
		return m.ErrorRateToOpen
	}
	return nil
}

// 慢调用率熔断策略配置
type CbPolicy_SlowRateConfig struct {
	// 是否启用慢调用率配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 最大响应时间，超过该时间属于慢调用请求
	MaxRt *durationpb.Duration `protobuf:"bytes,2,opt,name=maxRt,proto3" json:"maxRt,omitempty"`
	// 可选。触发保持状态的超时率阈值，假如不配置，则默认不会进入Preserved状态
	SlowRateToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=slowRateToPreserved,proto3" json:"slowRateToPreserved,omitempty"`
	// 触发熔断的超时率阈值
	SlowRateToOpen       *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=slowRateToOpen,proto3" json:"slowRateToOpen,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CbPolicy_SlowRateConfig) Reset()         { *m = CbPolicy_SlowRateConfig{} }
func (m *CbPolicy_SlowRateConfig) String() string { return proto.CompactTextString(m) }
func (*CbPolicy_SlowRateConfig) ProtoMessage()    {}
func (*CbPolicy_SlowRateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{3, 1}
}
func (m *CbPolicy_SlowRateConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy_SlowRateConfig.Unmarshal(m, b)
}
func (m *CbPolicy_SlowRateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy_SlowRateConfig.Marshal(b, m, deterministic)
}
func (dst *CbPolicy_SlowRateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy_SlowRateConfig.Merge(dst, src)
}
func (m *CbPolicy_SlowRateConfig) XXX_Size() int {
	return xxx_messageInfo_CbPolicy_SlowRateConfig.Size(m)
}
func (m *CbPolicy_SlowRateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy_SlowRateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy_SlowRateConfig proto.InternalMessageInfo

func (m *CbPolicy_SlowRateConfig) GetEnable() *wrapperspb.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *CbPolicy_SlowRateConfig) GetMaxRt() *durationpb.Duration {
	if m != nil {
		return m.MaxRt
	}
	return nil
}

func (m *CbPolicy_SlowRateConfig) GetSlowRateToPreserved() *wrapperspb.UInt32Value {
	if m != nil {
		return m.SlowRateToPreserved
	}
	return nil
}

func (m *CbPolicy_SlowRateConfig) GetSlowRateToOpen() *wrapperspb.UInt32Value {
	if m != nil {
		return m.SlowRateToOpen
	}
	return nil
}

// 连续错误数熔断配置
type CbPolicy_ConsecutiveErrConfig struct {
	// 是否启用连续错误数配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 连续错误数阈值，进入Preserved状态
	ConsecutiveErrorToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=consecutiveErrorToPreserved,proto3" json:"consecutiveErrorToPreserved,omitempty"`
	// 连续错误数阈值，进入Open状态
	ConsecutiveErrorToOpen *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=consecutiveErrorToOpen,proto3" json:"consecutiveErrorToOpen,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *CbPolicy_ConsecutiveErrConfig) Reset()         { *m = CbPolicy_ConsecutiveErrConfig{} }
func (m *CbPolicy_ConsecutiveErrConfig) String() string { return proto.CompactTextString(m) }
func (*CbPolicy_ConsecutiveErrConfig) ProtoMessage()    {}
func (*CbPolicy_ConsecutiveErrConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{3, 2}
}
func (m *CbPolicy_ConsecutiveErrConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.Unmarshal(m, b)
}
func (m *CbPolicy_ConsecutiveErrConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.Marshal(b, m, deterministic)
}
func (dst *CbPolicy_ConsecutiveErrConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.Merge(dst, src)
}
func (m *CbPolicy_ConsecutiveErrConfig) XXX_Size() int {
	return xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.Size(m)
}
func (m *CbPolicy_ConsecutiveErrConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy_ConsecutiveErrConfig proto.InternalMessageInfo

func (m *CbPolicy_ConsecutiveErrConfig) GetEnable() *wrapperspb.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *CbPolicy_ConsecutiveErrConfig) GetConsecutiveErrorToPreserved() *wrapperspb.UInt32Value {
	if m != nil {
		return m.ConsecutiveErrorToPreserved
	}
	return nil
}

func (m *CbPolicy_ConsecutiveErrConfig) GetConsecutiveErrorToOpen() *wrapperspb.UInt32Value {
	if m != nil {
		return m.ConsecutiveErrorToOpen
	}
	return nil
}

// 目标set的规则
type DestinationSet struct {
	// 被调命名空间以及服务名，可以为*，代表全匹配
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 可选，SUBSET标识
	Metadata map[string]*model.MatchString `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resource DestinationSet_Resource       `protobuf:"varint,4,opt,name=resource,proto3,enum=v1.DestinationSet_Resource" json:"resource,omitempty"`
	Type     DestinationSet_Type           `protobuf:"varint,5,opt,name=type,proto3,enum=v1.DestinationSet_Type" json:"type,omitempty"`
	Scope    DestinationSet_Scope          `protobuf:"varint,6,opt,name=scope,proto3,enum=v1.DestinationSet_Scope" json:"scope,omitempty"`
	// 熔断数据度量周期
	// 所有的阈值指标按此周期进行统计
	MetricWindow *durationpb.Duration `protobuf:"bytes,7,opt,name=metricWindow,proto3" json:"metricWindow,omitempty"`
	// 熔断数据统计精度，决定数据度量的最小周期
	// 度量滑窗的步长=window/precision
	MetricPrecision *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=metricPrecision,proto3" json:"metricPrecision,omitempty"`
	// 熔断数据上报周期，对分布式熔断有效
	UpdateInterval *durationpb.Duration `protobuf:"bytes,9,opt,name=updateInterval,proto3" json:"updateInterval,omitempty"`
	// 触发熔断后恢复配置
	Recover *RecoverConfig `protobuf:"bytes,10,opt,name=recover,proto3" json:"recover,omitempty"`
	// 熔断策略
	Policy *CbPolicy `protobuf:"bytes,11,opt,name=policy,proto3" json:"policy,omitempty"`
	// 被调的接口信息，指定哪些接口会使用该规则
	Method *model.MatchString `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty"`
	// 返回码，指定哪些返回码会使用该规则
	ErrorCodes           []*wrapperspb.Int64Value `protobuf:"bytes,13,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DestinationSet) Reset()         { *m = DestinationSet{} }
func (m *DestinationSet) String() string { return proto.CompactTextString(m) }
func (*DestinationSet) ProtoMessage()    {}
func (*DestinationSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{4}
}
func (m *DestinationSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestinationSet.Unmarshal(m, b)
}
func (m *DestinationSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestinationSet.Marshal(b, m, deterministic)
}
func (dst *DestinationSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationSet.Merge(dst, src)
}
func (m *DestinationSet) XXX_Size() int {
	return xxx_messageInfo_DestinationSet.Size(m)
}
func (m *DestinationSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationSet.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationSet proto.InternalMessageInfo

func (m *DestinationSet) GetService() *wrapperspb.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *DestinationSet) GetNamespace() *wrapperspb.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *DestinationSet) GetMetadata() map[string]*model.MatchString {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DestinationSet) GetResource() DestinationSet_Resource {
	if m != nil {
		return m.Resource
	}
	return DestinationSet_SUBSET
}

func (m *DestinationSet) GetType() DestinationSet_Type {
	if m != nil {
		return m.Type
	}
	return DestinationSet_GLOBAL
}

func (m *DestinationSet) GetScope() DestinationSet_Scope {
	if m != nil {
		return m.Scope
	}
	return DestinationSet_ALL
}

func (m *DestinationSet) GetMetricWindow() *durationpb.Duration {
	if m != nil {
		return m.MetricWindow
	}
	return nil
}

func (m *DestinationSet) GetMetricPrecision() *wrapperspb.UInt32Value {
	if m != nil {
		return m.MetricPrecision
	}
	return nil
}

func (m *DestinationSet) GetUpdateInterval() *durationpb.Duration {
	if m != nil {
		return m.UpdateInterval
	}
	return nil
}

func (m *DestinationSet) GetRecover() *RecoverConfig {
	if m != nil {
		return m.Recover
	}
	return nil
}

func (m *DestinationSet) GetPolicy() *CbPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *DestinationSet) GetMethod() *model.MatchString {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *DestinationSet) GetErrorCodes() []*wrapperspb.Int64Value {
	if m != nil {
		return m.ErrorCodes
	}
	return nil
}

// 具体熔断规则
type CbRule struct {
	// 如果匹配Source规则，按照Destination进行熔断
	// 多个Source之间的关系为或
	Sources              []*SourceMatcher  `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations         []*DestinationSet `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CbRule) Reset()         { *m = CbRule{} }
func (m *CbRule) String() string { return proto.CompactTextString(m) }
func (*CbRule) ProtoMessage()    {}
func (*CbRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{5}
}
func (m *CbRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbRule.Unmarshal(m, b)
}
func (m *CbRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbRule.Marshal(b, m, deterministic)
}
func (dst *CbRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbRule.Merge(dst, src)
}
func (m *CbRule) XXX_Size() int {
	return xxx_messageInfo_CbRule.Size(m)
}
func (m *CbRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CbRule.DiscardUnknown(m)
}

var xxx_messageInfo_CbRule proto.InternalMessageInfo

func (m *CbRule) GetSources() []*SourceMatcher {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *CbRule) GetDestinations() []*DestinationSet {
	if m != nil {
		return m.Destinations
	}
	return nil
}

type RuleMatcher struct {
	Source               *RuleMatcher_SourceService      `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination          *RuleMatcher_DestinationService `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *RuleMatcher) Reset()         { *m = RuleMatcher{} }
func (m *RuleMatcher) String() string { return proto.CompactTextString(m) }
func (*RuleMatcher) ProtoMessage()    {}
func (*RuleMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{6}
}
func (m *RuleMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleMatcher.Unmarshal(m, b)
}
func (m *RuleMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleMatcher.Marshal(b, m, deterministic)
}
func (dst *RuleMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleMatcher.Merge(dst, src)
}
func (m *RuleMatcher) XXX_Size() int {
	return xxx_messageInfo_RuleMatcher.Size(m)
}
func (m *RuleMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_RuleMatcher proto.InternalMessageInfo

func (m *RuleMatcher) GetSource() *RuleMatcher_SourceService {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *RuleMatcher) GetDestination() *RuleMatcher_DestinationService {
	if m != nil {
		return m.Destination
	}
	return nil
}

type RuleMatcher_SourceService struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleMatcher_SourceService) Reset()         { *m = RuleMatcher_SourceService{} }
func (m *RuleMatcher_SourceService) String() string { return proto.CompactTextString(m) }
func (*RuleMatcher_SourceService) ProtoMessage()    {}
func (*RuleMatcher_SourceService) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{6, 0}
}
func (m *RuleMatcher_SourceService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleMatcher_SourceService.Unmarshal(m, b)
}
func (m *RuleMatcher_SourceService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleMatcher_SourceService.Marshal(b, m, deterministic)
}
func (dst *RuleMatcher_SourceService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleMatcher_SourceService.Merge(dst, src)
}
func (m *RuleMatcher_SourceService) XXX_Size() int {
	return xxx_messageInfo_RuleMatcher_SourceService.Size(m)
}
func (m *RuleMatcher_SourceService) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleMatcher_SourceService.DiscardUnknown(m)
}

var xxx_messageInfo_RuleMatcher_SourceService proto.InternalMessageInfo

func (m *RuleMatcher_SourceService) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RuleMatcher_SourceService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type RuleMatcher_DestinationService struct {
	Service   string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// deprecated_filed  using api.path in blockConfig instead
	Method               *model.MatchString `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RuleMatcher_DestinationService) Reset()         { *m = RuleMatcher_DestinationService{} }
func (m *RuleMatcher_DestinationService) String() string { return proto.CompactTextString(m) }
func (*RuleMatcher_DestinationService) ProtoMessage()    {}
func (*RuleMatcher_DestinationService) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{6, 1}
}
func (m *RuleMatcher_DestinationService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleMatcher_DestinationService.Unmarshal(m, b)
}
func (m *RuleMatcher_DestinationService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleMatcher_DestinationService.Marshal(b, m, deterministic)
}
func (dst *RuleMatcher_DestinationService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleMatcher_DestinationService.Merge(dst, src)
}
func (m *RuleMatcher_DestinationService) XXX_Size() int {
	return xxx_messageInfo_RuleMatcher_DestinationService.Size(m)
}
func (m *RuleMatcher_DestinationService) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleMatcher_DestinationService.DiscardUnknown(m)
}

var xxx_messageInfo_RuleMatcher_DestinationService proto.InternalMessageInfo

func (m *RuleMatcher_DestinationService) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RuleMatcher_DestinationService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Deprecated: Do not use.
func (m *RuleMatcher_DestinationService) GetMethod() *model.MatchString {
	if m != nil {
		return m.Method
	}
	return nil
}

// new specific rule for circuitbreaker config
type CircuitBreakerRule struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// rule name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// namespace of rule
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// enable this router
	Enable bool `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	// revision routing version
	Revision string `protobuf:"bytes,5,opt,name=revision,proto3" json:"revision,omitempty"`
	// ctime create time of the rules
	Ctime string `protobuf:"bytes,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// mtime modify time of the rules
	Mtime string `protobuf:"bytes,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// etime enable time of the rules
	Etime string `protobuf:"bytes,8,opt,name=etime,proto3" json:"etime,omitempty"`
	// description simple description rules
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// the circuitbreaking level
	Level Level `protobuf:"varint,21,opt,name=level,proto3,enum=v1.Level" json:"level,omitempty"`
	// match condition for this rule
	RuleMatcher *RuleMatcher `protobuf:"bytes,22,opt,name=rule_matcher,json=ruleMatcher,proto3" json:"rule_matcher,omitempty"`
	// deprecated_filed error conditions to judge an invocation as an error
	ErrorConditions []*ErrorCondition `protobuf:"bytes,23,rep,name=error_conditions,json=errorConditions,proto3" json:"error_conditions,omitempty"` // Deprecated: Do not use.
	// deprecated_filed trigger condition to trigger circuitbreaking
	TriggerCondition []*TriggerCondition `protobuf:"bytes,24,rep,name=trigger_condition,json=triggerCondition,proto3" json:"trigger_condition,omitempty"` // Deprecated: Do not use.
	// the maximum % of an upstream cluster that can be ejected
	MaxEjectionPercent uint32 `protobuf:"varint,25,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
	// recover condition to make resource open to close
	RecoverCondition *RecoverCondition `protobuf:"bytes,26,opt,name=recoverCondition,proto3" json:"recoverCondition,omitempty"`
	// fault detection enable config
	FaultDetectConfig *FaultDetectConfig `protobuf:"bytes,27,opt,name=faultDetectConfig,proto3" json:"faultDetectConfig,omitempty"`
	// fall back configuration
	FallbackConfig *FallbackConfig `protobuf:"bytes,28,opt,name=fallbackConfig,proto3" json:"fallbackConfig,omitempty"`
	// list for block configuration
	BlockConfigs []*BlockConfig `protobuf:"bytes,29,rep,name=block_configs,proto3" json:"block_configs,omitempty"`
	// priority rules priority
	Priority uint32 `protobuf:"varint,30,opt,name=priority,proto3" json:"priority,omitempty"`
	// 熔断规则标签数据
	Metadata             map[string]string `protobuf:"bytes,50,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CircuitBreakerRule) Reset()         { *m = CircuitBreakerRule{} }
func (m *CircuitBreakerRule) String() string { return proto.CompactTextString(m) }
func (*CircuitBreakerRule) ProtoMessage()    {}
func (*CircuitBreakerRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{7}
}
func (m *CircuitBreakerRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreakerRule.Unmarshal(m, b)
}
func (m *CircuitBreakerRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreakerRule.Marshal(b, m, deterministic)
}
func (dst *CircuitBreakerRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreakerRule.Merge(dst, src)
}
func (m *CircuitBreakerRule) XXX_Size() int {
	return xxx_messageInfo_CircuitBreakerRule.Size(m)
}
func (m *CircuitBreakerRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreakerRule.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreakerRule proto.InternalMessageInfo

func (m *CircuitBreakerRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CircuitBreakerRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CircuitBreakerRule) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CircuitBreakerRule) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *CircuitBreakerRule) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *CircuitBreakerRule) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *CircuitBreakerRule) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

func (m *CircuitBreakerRule) GetEtime() string {
	if m != nil {
		return m.Etime
	}
	return ""
}

func (m *CircuitBreakerRule) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CircuitBreakerRule) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_UNKNOWN
}

func (m *CircuitBreakerRule) GetRuleMatcher() *RuleMatcher {
	if m != nil {
		return m.RuleMatcher
	}
	return nil
}

// Deprecated: Do not use.
func (m *CircuitBreakerRule) GetErrorConditions() []*ErrorCondition {
	if m != nil {
		return m.ErrorConditions
	}
	return nil
}

// Deprecated: Do not use.
func (m *CircuitBreakerRule) GetTriggerCondition() []*TriggerCondition {
	if m != nil {
		return m.TriggerCondition
	}
	return nil
}

func (m *CircuitBreakerRule) GetMaxEjectionPercent() uint32 {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return 0
}

func (m *CircuitBreakerRule) GetRecoverCondition() *RecoverCondition {
	if m != nil {
		return m.RecoverCondition
	}
	return nil
}

func (m *CircuitBreakerRule) GetFaultDetectConfig() *FaultDetectConfig {
	if m != nil {
		return m.FaultDetectConfig
	}
	return nil
}

func (m *CircuitBreakerRule) GetFallbackConfig() *FallbackConfig {
	if m != nil {
		return m.FallbackConfig
	}
	return nil
}

func (m *CircuitBreakerRule) GetBlockConfigs() []*BlockConfig {
	if m != nil {
		return m.BlockConfigs
	}
	return nil
}

func (m *CircuitBreakerRule) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *CircuitBreakerRule) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// the condition to judge an input invocation as an error
type ErrorCondition struct {
	InputType            ErrorCondition_InputType `protobuf:"varint,1,opt,name=input_type,json=inputType,proto3,enum=v1.ErrorCondition_InputType" json:"input_type,omitempty"`
	Condition            *model.MatchString       `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ErrorCondition) Reset()         { *m = ErrorCondition{} }
func (m *ErrorCondition) String() string { return proto.CompactTextString(m) }
func (*ErrorCondition) ProtoMessage()    {}
func (*ErrorCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{8}
}
func (m *ErrorCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorCondition.Unmarshal(m, b)
}
func (m *ErrorCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorCondition.Marshal(b, m, deterministic)
}
func (dst *ErrorCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorCondition.Merge(dst, src)
}
func (m *ErrorCondition) XXX_Size() int {
	return xxx_messageInfo_ErrorCondition.Size(m)
}
func (m *ErrorCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorCondition.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorCondition proto.InternalMessageInfo

func (m *ErrorCondition) GetInputType() ErrorCondition_InputType {
	if m != nil {
		return m.InputType
	}
	return ErrorCondition_UNKNOWN
}

func (m *ErrorCondition) GetCondition() *model.MatchString {
	if m != nil {
		return m.Condition
	}
	return nil
}

// the error condition to trigger circuitbreaking
type TriggerCondition struct {
	TriggerType          TriggerCondition_TriggerType `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=v1.TriggerCondition_TriggerType" json:"trigger_type,omitempty"`
	ErrorCount           uint32                       `protobuf:"varint,2,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	ErrorPercent         uint32                       `protobuf:"varint,3,opt,name=error_percent,json=errorPercent,proto3" json:"error_percent,omitempty"`
	Interval             uint32                       `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	MinimumRequest       uint32                       `protobuf:"varint,5,opt,name=minimum_request,json=minimumRequest,proto3" json:"minimum_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TriggerCondition) Reset()         { *m = TriggerCondition{} }
func (m *TriggerCondition) String() string { return proto.CompactTextString(m) }
func (*TriggerCondition) ProtoMessage()    {}
func (*TriggerCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{9}
}
func (m *TriggerCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggerCondition.Unmarshal(m, b)
}
func (m *TriggerCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggerCondition.Marshal(b, m, deterministic)
}
func (dst *TriggerCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerCondition.Merge(dst, src)
}
func (m *TriggerCondition) XXX_Size() int {
	return xxx_messageInfo_TriggerCondition.Size(m)
}
func (m *TriggerCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerCondition.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerCondition proto.InternalMessageInfo

func (m *TriggerCondition) GetTriggerType() TriggerCondition_TriggerType {
	if m != nil {
		return m.TriggerType
	}
	return TriggerCondition_UNKNOWN
}

func (m *TriggerCondition) GetErrorCount() uint32 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *TriggerCondition) GetErrorPercent() uint32 {
	if m != nil {
		return m.ErrorPercent
	}
	return 0
}

func (m *TriggerCondition) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *TriggerCondition) GetMinimumRequest() uint32 {
	if m != nil {
		return m.MinimumRequest
	}
	return 0
}

// circuitbreaking OPEN status recover
type RecoverCondition struct {
	// seconds from open to half-open
	SleepWindow uint32 `protobuf:"varint,1,opt,name=sleep_window,json=sleepWindow,proto3" json:"sleep_window,omitempty"`
	// consecutive success request to recover
	ConsecutiveSuccess   uint32   `protobuf:"varint,2,opt,name=consecutiveSuccess,proto3" json:"consecutiveSuccess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecoverCondition) Reset()         { *m = RecoverCondition{} }
func (m *RecoverCondition) String() string { return proto.CompactTextString(m) }
func (*RecoverCondition) ProtoMessage()    {}
func (*RecoverCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{10}
}
func (m *RecoverCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverCondition.Unmarshal(m, b)
}
func (m *RecoverCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverCondition.Marshal(b, m, deterministic)
}
func (dst *RecoverCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverCondition.Merge(dst, src)
}
func (m *RecoverCondition) XXX_Size() int {
	return xxx_messageInfo_RecoverCondition.Size(m)
}
func (m *RecoverCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverCondition.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverCondition proto.InternalMessageInfo

func (m *RecoverCondition) GetSleepWindow() uint32 {
	if m != nil {
		return m.SleepWindow
	}
	return 0
}

func (m *RecoverCondition) GetConsecutiveSuccess() uint32 {
	if m != nil {
		return m.ConsecutiveSuccess
	}
	return 0
}

// fault detect config within circuitbreaking
type FaultDetectConfig struct {
	Enable               bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaultDetectConfig) Reset()         { *m = FaultDetectConfig{} }
func (m *FaultDetectConfig) String() string { return proto.CompactTextString(m) }
func (*FaultDetectConfig) ProtoMessage()    {}
func (*FaultDetectConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{11}
}
func (m *FaultDetectConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultDetectConfig.Unmarshal(m, b)
}
func (m *FaultDetectConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultDetectConfig.Marshal(b, m, deterministic)
}
func (dst *FaultDetectConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultDetectConfig.Merge(dst, src)
}
func (m *FaultDetectConfig) XXX_Size() int {
	return xxx_messageInfo_FaultDetectConfig.Size(m)
}
func (m *FaultDetectConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultDetectConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FaultDetectConfig proto.InternalMessageInfo

func (m *FaultDetectConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

// fallback config
type FallbackConfig struct {
	Enable               bool              `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Response             *FallbackResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FallbackConfig) Reset()         { *m = FallbackConfig{} }
func (m *FallbackConfig) String() string { return proto.CompactTextString(m) }
func (*FallbackConfig) ProtoMessage()    {}
func (*FallbackConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{12}
}
func (m *FallbackConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FallbackConfig.Unmarshal(m, b)
}
func (m *FallbackConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FallbackConfig.Marshal(b, m, deterministic)
}
func (dst *FallbackConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FallbackConfig.Merge(dst, src)
}
func (m *FallbackConfig) XXX_Size() int {
	return xxx_messageInfo_FallbackConfig.Size(m)
}
func (m *FallbackConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FallbackConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FallbackConfig proto.InternalMessageInfo

func (m *FallbackConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *FallbackConfig) GetResponse() *FallbackResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// fallback response
type FallbackResponse struct {
	Code                 int32                             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Headers              []*FallbackResponse_MessageHeader `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	Body                 string                            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *FallbackResponse) Reset()         { *m = FallbackResponse{} }
func (m *FallbackResponse) String() string { return proto.CompactTextString(m) }
func (*FallbackResponse) ProtoMessage()    {}
func (*FallbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{13}
}
func (m *FallbackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FallbackResponse.Unmarshal(m, b)
}
func (m *FallbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FallbackResponse.Marshal(b, m, deterministic)
}
func (dst *FallbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FallbackResponse.Merge(dst, src)
}
func (m *FallbackResponse) XXX_Size() int {
	return xxx_messageInfo_FallbackResponse.Size(m)
}
func (m *FallbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FallbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FallbackResponse proto.InternalMessageInfo

func (m *FallbackResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FallbackResponse) GetHeaders() []*FallbackResponse_MessageHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *FallbackResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type FallbackResponse_MessageHeader struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FallbackResponse_MessageHeader) Reset()         { *m = FallbackResponse_MessageHeader{} }
func (m *FallbackResponse_MessageHeader) String() string { return proto.CompactTextString(m) }
func (*FallbackResponse_MessageHeader) ProtoMessage()    {}
func (*FallbackResponse_MessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{13, 0}
}
func (m *FallbackResponse_MessageHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FallbackResponse_MessageHeader.Unmarshal(m, b)
}
func (m *FallbackResponse_MessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FallbackResponse_MessageHeader.Marshal(b, m, deterministic)
}
func (dst *FallbackResponse_MessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FallbackResponse_MessageHeader.Merge(dst, src)
}
func (m *FallbackResponse_MessageHeader) XXX_Size() int {
	return xxx_messageInfo_FallbackResponse_MessageHeader.Size(m)
}
func (m *FallbackResponse_MessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_FallbackResponse_MessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_FallbackResponse_MessageHeader proto.InternalMessageInfo

func (m *FallbackResponse_MessageHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FallbackResponse_MessageHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// blocking strategy
type BlockConfig struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// blocking target api
	Api *model.API `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
	// conditions to judge an invocation as an error
	ErrorConditions []*ErrorCondition `protobuf:"bytes,3,rep,name=error_conditions,proto3" json:"error_conditions,omitempty"`
	// trigger condition to trigger circuitbreaking
	TriggerConditions    []*TriggerCondition `protobuf:"bytes,4,rep,name=trigger_conditions,proto3" json:"trigger_conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BlockConfig) Reset()         { *m = BlockConfig{} }
func (m *BlockConfig) String() string { return proto.CompactTextString(m) }
func (*BlockConfig) ProtoMessage()    {}
func (*BlockConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_circuitbreaker_2a9ca54a8ade1f42, []int{14}
}
func (m *BlockConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockConfig.Unmarshal(m, b)
}
func (m *BlockConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockConfig.Marshal(b, m, deterministic)
}
func (dst *BlockConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockConfig.Merge(dst, src)
}
func (m *BlockConfig) XXX_Size() int {
	return xxx_messageInfo_BlockConfig.Size(m)
}
func (m *BlockConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BlockConfig proto.InternalMessageInfo

func (m *BlockConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlockConfig) GetApi() *model.API {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BlockConfig) GetErrorConditions() []*ErrorCondition {
	if m != nil {
		return m.ErrorConditions
	}
	return nil
}

func (m *BlockConfig) GetTriggerConditions() []*TriggerCondition {
	if m != nil {
		return m.TriggerConditions
	}
	return nil
}

func init() {
	proto.RegisterType((*CircuitBreaker)(nil), "v1.CircuitBreaker")
	proto.RegisterType((*SourceMatcher)(nil), "v1.SourceMatcher")
	proto.RegisterMapType((map[string]*model.MatchString)(nil), "v1.SourceMatcher.LabelsEntry")
	proto.RegisterType((*RecoverConfig)(nil), "v1.RecoverConfig")
	proto.RegisterType((*CbPolicy)(nil), "v1.CbPolicy")
	proto.RegisterType((*CbPolicy_ErrRateConfig)(nil), "v1.CbPolicy.ErrRateConfig")
	proto.RegisterType((*CbPolicy_ErrRateConfig_SpecialConfig)(nil), "v1.CbPolicy.ErrRateConfig.SpecialConfig")
	proto.RegisterType((*CbPolicy_SlowRateConfig)(nil), "v1.CbPolicy.SlowRateConfig")
	proto.RegisterType((*CbPolicy_ConsecutiveErrConfig)(nil), "v1.CbPolicy.ConsecutiveErrConfig")
	proto.RegisterType((*DestinationSet)(nil), "v1.DestinationSet")
	proto.RegisterMapType((map[string]*model.MatchString)(nil), "v1.DestinationSet.MetadataEntry")
	proto.RegisterType((*CbRule)(nil), "v1.CbRule")
	proto.RegisterType((*RuleMatcher)(nil), "v1.RuleMatcher")
	proto.RegisterType((*RuleMatcher_SourceService)(nil), "v1.RuleMatcher.SourceService")
	proto.RegisterType((*RuleMatcher_DestinationService)(nil), "v1.RuleMatcher.DestinationService")
	proto.RegisterType((*CircuitBreakerRule)(nil), "v1.CircuitBreakerRule")
	proto.RegisterMapType((map[string]string)(nil), "v1.CircuitBreakerRule.MetadataEntry")
	proto.RegisterType((*ErrorCondition)(nil), "v1.ErrorCondition")
	proto.RegisterType((*TriggerCondition)(nil), "v1.TriggerCondition")
	proto.RegisterType((*RecoverCondition)(nil), "v1.RecoverCondition")
	proto.RegisterType((*FaultDetectConfig)(nil), "v1.FaultDetectConfig")
	proto.RegisterType((*FallbackConfig)(nil), "v1.FallbackConfig")
	proto.RegisterType((*FallbackResponse)(nil), "v1.FallbackResponse")
	proto.RegisterType((*FallbackResponse_MessageHeader)(nil), "v1.FallbackResponse.MessageHeader")
	proto.RegisterType((*BlockConfig)(nil), "v1.BlockConfig")
	proto.RegisterEnum("v1.Level", Level_name, Level_value)
	proto.RegisterEnum("v1.RecoverConfig_OutlierDetectWhen", RecoverConfig_OutlierDetectWhen_name, RecoverConfig_OutlierDetectWhen_value)
	proto.RegisterEnum("v1.DestinationSet_Resource", DestinationSet_Resource_name, DestinationSet_Resource_value)
	proto.RegisterEnum("v1.DestinationSet_Type", DestinationSet_Type_name, DestinationSet_Type_value)
	proto.RegisterEnum("v1.DestinationSet_Scope", DestinationSet_Scope_name, DestinationSet_Scope_value)
	proto.RegisterEnum("v1.ErrorCondition_InputType", ErrorCondition_InputType_name, ErrorCondition_InputType_value)
	proto.RegisterEnum("v1.TriggerCondition_TriggerType", TriggerCondition_TriggerType_name, TriggerCondition_TriggerType_value)
}

func init() {
	proto.RegisterFile("circuitbreaker.proto", fileDescriptor_circuitbreaker_2a9ca54a8ade1f42)
}

var fileDescriptor_circuitbreaker_2a9ca54a8ade1f42 = []byte{
	// 2278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcd, 0x73, 0xdb, 0xc6,
	0x15, 0x0f, 0x29, 0xf1, 0xeb, 0x51, 0xa4, 0xa1, 0x8d, 0xe4, 0xc0, 0xb4, 0x93, 0x28, 0x4c, 0xda,
	0x78, 0xea, 0x94, 0xb2, 0x95, 0xd8, 0xf1, 0xd8, 0x6e, 0x1b, 0x8a, 0xa2, 0x6d, 0xb9, 0x34, 0xa9,
	0x2e, 0x29, 0xbb, 0xf1, 0xa1, 0x1c, 0x10, 0x5c, 0x51, 0x88, 0x01, 0x2c, 0xba, 0x00, 0x68, 0xeb,
	0xd6, 0x53, 0x2f, 0x9d, 0xde, 0x3a, 0x9d, 0x4e, 0xef, 0x3d, 0xf4, 0xd4, 0xe9, 0xf4, 0x3f, 0xe8,
	0x1f, 0xd0, 0xff, 0xa7, 0xb7, 0xce, 0x7e, 0x80, 0x04, 0xf8, 0xe1, 0xc0, 0xee, 0xa1, 0x3d, 0x89,
	0xd8, 0xf7, 0xfb, 0xbd, 0x7d, 0x78, 0xfb, 0xbe, 0x16, 0x82, 0x1d, 0xd3, 0x62, 0x66, 0x68, 0x05,
	0x23, 0x46, 0x8c, 0x97, 0x84, 0x35, 0x3c, 0x46, 0x03, 0x8a, 0xb2, 0xd3, 0x5b, 0xb5, 0x8f, 0x26,
	0x94, 0x4e, 0x6c, 0xb2, 0x2f, 0x56, 0x46, 0xe1, 0xd9, 0xfe, 0x2b, 0x66, 0x78, 0x1e, 0x61, 0xbe,
	0xc4, 0x2c, 0xcb, 0xc7, 0x21, 0x33, 0x02, 0x8b, 0xba, 0x4a, 0x5e, 0x76, 0xe8, 0x98, 0xd8, 0xf2,
	0xa1, 0xfe, 0xd7, 0x02, 0x54, 0x5b, 0x72, 0xa7, 0x43, 0xb9, 0x13, 0xfa, 0x02, 0xb2, 0xd6, 0x58,
	0xcf, 0xec, 0x65, 0xae, 0x97, 0x0f, 0xae, 0x35, 0xa4, 0xb2, 0x46, 0xa4, 0xac, 0xd1, 0x0f, 0x98,
	0xe5, 0x4e, 0x9e, 0x19, 0x76, 0x48, 0x70, 0xd6, 0x1a, 0xa3, 0x3b, 0x50, 0x98, 0x12, 0xe6, 0x5b,
	0xd4, 0xd5, 0xb3, 0x29, 0x28, 0x11, 0x18, 0xdd, 0x84, 0x4d, 0xd7, 0x70, 0x88, 0xbe, 0x91, 0x82,
	0x24, 0x90, 0xe8, 0x1e, 0x94, 0xf8, 0x5f, 0xdf, 0x33, 0x4c, 0xa2, 0x6f, 0xa6, 0xa0, 0xcd, 0xe1,
	0xdc, 0x4a, 0x9f, 0xb0, 0xa9, 0x65, 0x12, 0x3d, 0x97, 0xc6, 0x4a, 0x05, 0x46, 0xc7, 0xb0, 0xad,
	0x7e, 0x0e, 0xe7, 0x7b, 0xe7, 0x53, 0x68, 0xd0, 0x14, 0xad, 0x3b, 0x33, 0xe1, 0x87, 0x50, 0xb4,
	0xdc, 0x11, 0x0d, 0xdd, 0xb1, 0xaf, 0x17, 0xf6, 0x36, 0xae, 0x97, 0x0f, 0xa0, 0x31, 0xbd, 0xd5,
	0x68, 0x8d, 0x70, 0x68, 0x13, 0x3c, 0x93, 0xa1, 0xeb, 0x50, 0xa2, 0x61, 0xa0, 0x80, 0xc5, 0x25,
	0xe0, 0x5c, 0x88, 0x0e, 0x20, 0x17, 0xd0, 0x97, 0xc4, 0xd5, 0x4b, 0x29, 0x0c, 0x92, 0x50, 0xf4,
	0x15, 0xe4, 0xe9, 0x2b, 0x97, 0x30, 0x5f, 0x87, 0x14, 0x24, 0x85, 0x45, 0x77, 0xa1, 0x38, 0x0a,
	0x7d, 0xcb, 0x25, 0xbe, 0xaf, 0x97, 0x53, 0xf0, 0x66, 0x68, 0xf4, 0x00, 0x60, 0x4c, 0x3c, 0x83,
	0x05, 0x0e, 0x71, 0x03, 0x7d, 0x2b, 0x05, 0x37, 0x86, 0xe7, 0xc7, 0x66, 0x52, 0x47, 0x50, 0x2b,
	0x69, 0x8e, 0x4d, 0x81, 0xb9, 0x67, 0xcc, 0xc0, 0x72, 0x88, 0x5e, 0x4d, 0xe3, 0x19, 0x01, 0xe5,
	0x1c, 0x47, 0x70, 0x2e, 0xa5, 0xe1, 0x08, 0x28, 0xf7, 0x0b, 0x23, 0x53, 0x4b, 0x44, 0xbf, 0x96,
	0xc6, 0x2f, 0x11, 0x1a, 0x7d, 0x01, 0x39, 0x16, 0xda, 0xc4, 0xd7, 0x77, 0xc5, 0x09, 0x5f, 0x16,
	0x27, 0x9c, 0xc8, 0x43, 0x71, 0xda, 0x12, 0xf4, 0x64, 0xb3, 0xb8, 0xad, 0xed, 0xd6, 0x7f, 0x9b,
	0x85, 0x4a, 0x9f, 0x86, 0xcc, 0x24, 0x4f, 0x8d, 0xc0, 0x3c, 0x27, 0x2c, 0x1e, 0xd6, 0x99, 0xb7,
	0x09, 0xeb, 0x44, 0x2a, 0x65, 0xdf, 0x2e, 0x95, 0x6e, 0x43, 0xde, 0x36, 0x46, 0xc4, 0xf6, 0xf5,
	0x0d, 0x61, 0xfa, 0x87, 0xdc, 0xf4, 0x84, 0x59, 0x8d, 0x8e, 0x90, 0xb7, 0xdd, 0x80, 0x5d, 0x60,
	0x05, 0xae, 0x3d, 0x81, 0x72, 0x6c, 0x19, 0x69, 0xb0, 0xf1, 0x92, 0x5c, 0x08, 0xab, 0x4b, 0x98,
	0xff, 0x44, 0x3f, 0x80, 0xdc, 0x94, 0xef, 0xa5, 0xec, 0xb9, 0xc4, 0xd5, 0x0a, 0x85, 0xd2, 0x0e,
	0x2c, 0xa5, 0xf7, 0xb2, 0x77, 0x33, 0xf5, 0x7f, 0x6c, 0x42, 0x05, 0x13, 0x93, 0x4e, 0x09, 0x6b,
	0x51, 0xf7, 0xcc, 0x9a, 0xa0, 0xfb, 0x50, 0xf6, 0x6d, 0x42, 0xbc, 0xe7, 0x96, 0x3b, 0xa6, 0xaf,
	0x94, 0x33, 0xae, 0x2c, 0xbd, 0xd2, 0x91, 0xaa, 0x84, 0x38, 0x8e, 0x46, 0x18, 0x76, 0x1d, 0xe3,
	0x35, 0x26, 0x01, 0xbb, 0x68, 0x9e, 0x05, 0x84, 0x3d, 0x36, 0xec, 0xb3, 0x9e, 0x47, 0xd6, 0x17,
	0xb4, 0xd3, 0x63, 0x37, 0xf8, 0xf2, 0x40, 0x7a, 0x66, 0x35, 0x15, 0xfd, 0x12, 0x74, 0x46, 0x7e,
	0x1d, 0x12, 0x3f, 0xc0, 0x46, 0x40, 0x92, 0x6a, 0xa5, 0xdf, 0xde, 0xac, 0x76, 0x2d, 0x1b, 0x75,
	0x00, 0xf9, 0xa1, 0x69, 0x12, 0xdf, 0xe7, 0xb2, 0x01, 0x6d, 0xd9, 0xd4, 0x5f, 0x5f, 0x0f, 0xe3,
	0x3a, 0x57, 0xf0, 0xd0, 0x0b, 0xb8, 0xa2, 0x76, 0x6a, 0xd1, 0xd0, 0x0d, 0x92, 0x86, 0xe6, 0x52,
	0x28, 0x5d, 0x4f, 0x47, 0xbf, 0x80, 0x6d, 0x1a, 0x06, 0xb6, 0x45, 0xd8, 0x11, 0x09, 0x88, 0x19,
	0x3c, 0x3f, 0x27, 0xae, 0x28, 0x9e, 0xd5, 0x83, 0x4f, 0xf9, 0xe9, 0x26, 0x8e, 0xb0, 0xd1, 0x5b,
	0x84, 0xe2, 0x65, 0x76, 0xfd, 0x1e, 0x6c, 0x2f, 0xe1, 0x50, 0x09, 0x72, 0xdd, 0xf6, 0xb3, 0x36,
	0xd6, 0xde, 0x43, 0x55, 0x80, 0x5e, 0x77, 0x88, 0xdb, 0xad, 0x1e, 0x7f, 0xce, 0x20, 0x80, 0x7c,
	0xb3, 0xf3, 0xbc, 0xf9, 0x6d, 0x5f, 0xcb, 0xd6, 0xff, 0x5d, 0x86, 0x62, 0x6b, 0x74, 0x42, 0x6d,
	0xcb, 0xbc, 0x40, 0x77, 0xa1, 0x44, 0x18, 0xa3, 0x8c, 0xfb, 0x42, 0x85, 0x4b, 0x4d, 0x56, 0x59,
	0x09, 0x68, 0xb4, 0x99, 0x90, 0x49, 0xe3, 0xf0, 0x1c, 0x8c, 0xbe, 0x86, 0xa2, 0x6f, 0xd3, 0x57,
	0x82, 0x28, 0x03, 0xe4, 0x6a, 0x82, 0xd8, 0x57, 0x42, 0xc5, 0x9c, 0x81, 0xd1, 0xcf, 0xa0, 0xf2,
	0x5d, 0x38, 0x9e, 0x90, 0x28, 0x08, 0x55, 0xeb, 0x7b, 0x43, 0x94, 0x26, 0xf1, 0xfc, 0xe4, 0x1d,
	0xe3, 0x75, 0xfb, 0x3b, 0x62, 0xf2, 0xc7, 0x13, 0xc2, 0x4c, 0x5e, 0x18, 0x53, 0x9d, 0xfc, 0x32,
	0x0f, 0xb5, 0xa0, 0x6c, 0x52, 0xd7, 0x27, 0x66, 0x18, 0x58, 0xd3, 0xa8, 0x2d, 0x7e, 0x92, 0x78,
	0x95, 0xd6, 0x5c, 0xde, 0x66, 0xea, 0x9c, 0x70, 0x9c, 0x55, 0xfb, 0x43, 0x0e, 0x2a, 0x09, 0x4f,
	0xa1, 0x03, 0xc8, 0x13, 0xd7, 0x18, 0xd9, 0x73, 0xaf, 0x2e, 0x1a, 0x76, 0x48, 0xa9, 0xad, 0xda,
	0x8b, 0x44, 0xa2, 0x01, 0x5c, 0x56, 0x51, 0xf4, 0x8c, 0xda, 0xa1, 0x43, 0x06, 0xe7, 0x8c, 0xf8,
	0xe7, 0xd4, 0x1e, 0xa7, 0xca, 0xc0, 0x35, 0x5c, 0x74, 0x02, 0x3b, 0xb3, 0x53, 0x1b, 0xd0, 0x13,
	0x46, 0x78, 0xf5, 0x23, 0xe3, 0xb5, 0x13, 0x47, 0x5c, 0xe7, 0x4a, 0x26, 0x7a, 0x08, 0x97, 0x62,
	0xeb, 0x22, 0x45, 0xd2, 0x78, 0x7f, 0x91, 0x84, 0x8e, 0xa0, 0xe8, 0x7b, 0xc4, 0xb4, 0x0c, 0xdb,
	0xd7, 0x73, 0xa2, 0x18, 0x5c, 0x5f, 0x1f, 0x7b, 0x8d, 0xbe, 0x84, 0xce, 0xe2, 0x49, 0x31, 0x6b,
	0x7f, 0xe2, 0xed, 0x20, 0x2e, 0xe3, 0x33, 0x55, 0x70, 0xe1, 0xa5, 0xeb, 0x05, 0x02, 0x89, 0xee,
	0x03, 0x08, 0xe3, 0x5a, 0x74, 0x4c, 0x7c, 0x3d, 0x2b, 0x6c, 0xb9, 0xba, 0xc4, 0x3b, 0x76, 0x83,
	0x3b, 0x5f, 0xa9, 0xee, 0x3c, 0x87, 0xff, 0xff, 0x3a, 0xb8, 0xf6, 0xbb, 0x2c, 0x54, 0x93, 0x79,
	0xf8, 0x4e, 0x71, 0xb9, 0x0f, 0x39, 0x5e, 0xdd, 0x03, 0x15, 0x86, 0x6f, 0xc8, 0x54, 0x89, 0x43,
	0x5d, 0x78, 0x3f, 0x4a, 0xf7, 0xb7, 0x75, 0xc8, 0x2a, 0x22, 0x3a, 0x82, 0xea, 0x7c, 0x39, 0xb5,
	0x3b, 0x16, 0x38, 0xb5, 0xdf, 0x64, 0x61, 0x67, 0x55, 0x2a, 0xbf, 0x93, 0x4f, 0x7e, 0x05, 0x57,
	0xcd, 0x84, 0x2e, 0xca, 0xe2, 0xaf, 0x9a, 0x26, 0x61, 0xdf, 0xa4, 0x80, 0xd7, 0x82, 0x65, 0xb1,
	0x6a, 0x9b, 0x29, 0x6a, 0xc1, 0x6a, 0x6e, 0xfd, 0xf7, 0x05, 0xa8, 0x1e, 0x11, 0x3f, 0xb0, 0x5c,
	0x71, 0x5e, 0x7d, 0x12, 0xfc, 0x4f, 0x66, 0xa7, 0x07, 0x50, 0x74, 0x48, 0x60, 0x8c, 0x8d, 0xc0,
	0x50, 0x53, 0xc0, 0x1e, 0x4f, 0xfc, 0xa4, 0x65, 0x8d, 0xa7, 0x0a, 0x22, 0x07, 0xa8, 0x19, 0x83,
	0x77, 0x1e, 0x46, 0x7c, 0x31, 0x69, 0x89, 0x38, 0xa8, 0xca, 0xce, 0xb3, 0xc0, 0xc6, 0x0a, 0x82,
	0x67, 0x60, 0x74, 0x43, 0xd5, 0x85, 0x9c, 0x20, 0x7d, 0xb0, 0x82, 0x34, 0xb8, 0xf0, 0xa2, 0x92,
	0xd0, 0x80, 0x9c, 0x6f, 0x52, 0x8f, 0xa8, 0x4e, 0xad, 0xaf, 0x40, 0xf7, 0xb9, 0x1c, 0x4b, 0x18,
	0xfa, 0x09, 0x6c, 0x39, 0x24, 0x60, 0x96, 0xa9, 0x66, 0xaf, 0xc2, 0xf7, 0xe5, 0x4a, 0x02, 0xce,
	0x53, 0x5e, 0x3e, 0x9f, 0x30, 0x62, 0xca, 0x49, 0xba, 0x98, 0x26, 0xe5, 0x17, 0x48, 0xa8, 0x09,
	0xd5, 0xd0, 0x1b, 0x1b, 0x01, 0x39, 0x76, 0x03, 0xc2, 0xa6, 0x86, 0xad, 0x6e, 0x45, 0x6f, 0x30,
	0x64, 0x81, 0x80, 0x6e, 0x40, 0x81, 0xc9, 0x91, 0x44, 0x5d, 0x8e, 0xb6, 0x97, 0xa6, 0x14, 0x1c,
	0x21, 0xd0, 0x67, 0x90, 0xf7, 0x44, 0xb5, 0x56, 0x17, 0xa2, 0xad, 0x78, 0x05, 0xc7, 0x4a, 0x86,
	0x3e, 0x87, 0xbc, 0x43, 0x82, 0x73, 0x3a, 0x56, 0x57, 0x9f, 0xa5, 0xa9, 0x56, 0x89, 0x17, 0x0a,
	0x71, 0xe5, 0xad, 0x0a, 0x71, 0xad, 0x03, 0x95, 0x44, 0xcc, 0xfc, 0x77, 0xd3, 0xf5, 0x67, 0x50,
	0x8c, 0x62, 0x88, 0xcf, 0x4f, 0xfd, 0xd3, 0xc3, 0x7e, 0x7b, 0xa0, 0xbd, 0x87, 0xb6, 0xa0, 0x78,
	0xdc, 0xed, 0x0f, 0x9a, 0xdd, 0x56, 0x5b, 0xcb, 0xd4, 0x3f, 0x84, 0x4d, 0x1e, 0x34, 0x1c, 0xf1,
	0xa8, 0xd3, 0x3b, 0x6c, 0x76, 0xb4, 0xf7, 0xf8, 0x20, 0xd6, 0xe9, 0xb5, 0x9a, 0x1d, 0x21, 0xce,
	0x89, 0x28, 0x41, 0x05, 0xd8, 0x68, 0x76, 0xb8, 0xb0, 0x0c, 0x85, 0xd6, 0x29, 0xc6, 0xed, 0xee,
	0x40, 0xcb, 0xd4, 0x1d, 0xc8, 0xcb, 0xfb, 0x2c, 0x77, 0xba, 0xdc, 0xcb, 0xd7, 0x33, 0xe2, 0xad,
	0xb7, 0x97, 0xee, 0x13, 0x38, 0x42, 0xa0, 0x3b, 0xb0, 0x35, 0x9e, 0x87, 0x62, 0xd4, 0xb0, 0xd0,
	0x72, 0x88, 0xe2, 0x04, 0xae, 0xfe, 0xaf, 0x2c, 0x94, 0xf9, 0x6e, 0xd1, 0xbd, 0xe9, 0x36, 0xe4,
	0x55, 0x1e, 0xc9, 0xd4, 0x17, 0x77, 0x98, 0x18, 0x40, 0xed, 0xdf, 0x97, 0x29, 0x8f, 0x15, 0x18,
	0x1d, 0x41, 0x39, 0xa6, 0x56, 0xb9, 0xb2, 0xbe, 0xc8, 0x4d, 0x58, 0x22, 0x15, 0xc4, 0x69, 0xb5,
	0x47, 0xd1, 0x2d, 0x4e, 0x49, 0x91, 0x9e, 0xac, 0x44, 0xa5, 0x79, 0xad, 0xb9, 0xb6, 0x58, 0x6b,
	0x4a, 0xb1, 0x6a, 0x52, 0xbb, 0x00, 0xb4, 0xbc, 0xd7, 0xbb, 0x6a, 0x43, 0x37, 0x66, 0xa1, 0xba,
	0xb1, 0x32, 0x44, 0x0e, 0xb3, 0x7a, 0x26, 0x0a, 0xd7, 0xfa, 0x9f, 0x0b, 0x80, 0x96, 0xaf, 0xab,
	0xa8, 0x3a, 0xfb, 0x74, 0x54, 0x12, 0x1f, 0x87, 0x90, 0xfa, 0xc8, 0x23, 0x37, 0x93, 0x9f, 0x71,
	0x12, 0x56, 0x6c, 0x2c, 0x5a, 0x71, 0x79, 0xd6, 0x92, 0x78, 0x85, 0x2b, 0xce, 0xda, 0x4e, 0x2d,
	0x76, 0xd3, 0xce, 0x09, 0xd2, 0xfc, 0x2e, 0xbd, 0x13, 0xdd, 0xf6, 0xf3, 0x42, 0xa0, 0xee, 0xf3,
	0x3b, 0xd1, 0x7d, 0xbe, 0x20, 0x57, 0x9d, 0x68, 0x95, 0x88, 0xd5, 0xa2, 0x5c, 0x15, 0x0f, 0x68,
	0x4f, 0x1c, 0xac, 0xc9, 0x2c, 0x4f, 0x1c, 0x6c, 0x49, 0xc8, 0xe2, 0x4b, 0xe8, 0x63, 0xc8, 0xd9,
	0x64, 0x4a, 0x6c, 0x7d, 0x57, 0x54, 0xc5, 0x12, 0x77, 0x4e, 0x87, 0x2f, 0x60, 0xb9, 0x8e, 0x0e,
	0x60, 0x8b, 0xdf, 0xd5, 0x87, 0x8e, 0x8c, 0x02, 0xfd, 0xf2, 0xdc, 0x89, 0xb1, 0xe0, 0xc0, 0x65,
	0x16, 0x0b, 0xc3, 0x26, 0x68, 0x22, 0x8b, 0x87, 0x26, 0x75, 0xc7, 0x96, 0x0c, 0xe9, 0x0f, 0xe6,
	0x21, 0xdd, 0x96, 0x19, 0xae, 0x44, 0xc2, 0xff, 0x97, 0x48, 0x62, 0xcd, 0x47, 0x6d, 0xd8, 0x0e,
	0x98, 0x35, 0x99, 0x90, 0x98, 0x12, 0x5d, 0x17, 0x3a, 0x76, 0xb8, 0x8e, 0x81, 0x14, 0x26, 0xb5,
	0x68, 0xc1, 0xc2, 0x2a, 0xba, 0x09, 0x3b, 0x8e, 0xf1, 0x7a, 0x48, 0xd4, 0x1d, 0x61, 0xe8, 0xa9,
	0xcb, 0xc5, 0x95, 0xbd, 0xcc, 0xf5, 0xca, 0xca, 0xeb, 0xc3, 0x37, 0xa0, 0xb1, 0x59, 0x65, 0x54,
	0xfb, 0xd6, 0xc4, 0x3b, 0xef, 0x24, 0xab, 0xa6, 0x94, 0xe1, 0x25, 0x34, 0x6a, 0xc1, 0xf6, 0x99,
	0x11, 0xda, 0x81, 0xbc, 0xc9, 0xc9, 0xfa, 0xaa, 0x5f, 0x15, 0x2a, 0x76, 0xb9, 0x8a, 0x87, 0x8b,
	0x42, 0xbc, 0x8c, 0x47, 0xf7, 0xa0, 0x7a, 0x66, 0xd8, 0xf6, 0xc8, 0x30, 0x5f, 0x2a, 0x0d, 0xd7,
	0x84, 0x06, 0x24, 0x35, 0xc4, 0x25, 0x78, 0x01, 0x89, 0x6e, 0x43, 0x65, 0x64, 0x53, 0xf3, 0x25,
	0xf7, 0xdc, 0x99, 0x35, 0xf1, 0xf5, 0x0f, 0x85, 0xdf, 0xc4, 0x99, 0x1d, 0x72, 0x81, 0xe2, 0x25,
	0x51, 0x3c, 0x14, 0x3d, 0x66, 0x51, 0x66, 0x05, 0x17, 0xfa, 0x47, 0xc2, 0x3f, 0xb3, 0x67, 0xf4,
	0x4d, 0xac, 0xc1, 0x1f, 0x08, 0x6d, 0x9f, 0xad, 0xfe, 0xb2, 0xb3, 0xae, 0xc9, 0xd7, 0xee, 0x7f,
	0x7f, 0x2d, 0xdf, 0x89, 0xd7, 0xf2, 0x52, 0xac, 0x74, 0x3f, 0xd9, 0x2c, 0x82, 0xb6, 0x5b, 0xff,
	0x5b, 0x06, 0xaa, 0xc9, 0xd8, 0xe1, 0xed, 0xc5, 0x72, 0xbd, 0x30, 0x18, 0xce, 0xee, 0x07, 0xd5,
	0x83, 0x6b, 0xcb, 0x31, 0xd6, 0x38, 0xe6, 0x20, 0x31, 0x0c, 0x94, 0xac, 0xe8, 0x27, 0xfa, 0x31,
	0x94, 0xe6, 0xb1, 0xb5, 0xa6, 0x7f, 0xcc, 0x11, 0xf5, 0x5b, 0x50, 0x9a, 0xa9, 0xe1, 0x55, 0xff,
	0xb4, 0xfb, 0xf3, 0x6e, 0xef, 0x79, 0x57, 0x76, 0x10, 0xdc, 0x1e, 0x0c, 0x5b, 0xbd, 0xa3, 0xb6,
	0x96, 0xe1, 0xdd, 0xe2, 0xa8, 0xdd, 0x69, 0x7e, 0xab, 0x65, 0xeb, 0x7f, 0xc9, 0x82, 0xb6, 0x18,
	0xa9, 0xa8, 0x05, 0x5b, 0x51, 0x68, 0xc7, 0xac, 0xde, 0x5b, 0x15, 0xd5, 0xd1, 0x82, 0xb0, 0xbc,
	0x1c, 0xcc, 0x1f, 0xd0, 0xc7, 0x50, 0x8e, 0x52, 0x2c, 0x74, 0xe5, 0x20, 0x5f, 0x99, 0xf5, 0xce,
	0xd0, 0x0d, 0xd0, 0xa7, 0x50, 0x91, 0x80, 0x28, 0xe4, 0x37, 0x04, 0x64, 0x4b, 0x2c, 0x46, 0xc1,
	0x5e, 0x83, 0xa2, 0x15, 0x8d, 0x15, 0x9b, 0xf2, 0xc8, 0xa3, 0x67, 0xf4, 0x39, 0x5c, 0x72, 0x2c,
	0xd7, 0x72, 0x42, 0x67, 0xa8, 0x2e, 0xa2, 0xa2, 0x40, 0x55, 0x70, 0x55, 0x2d, 0x63, 0xb9, 0x5a,
	0x6f, 0x42, 0x39, 0x66, 0x66, 0xd2, 0x33, 0x55, 0x80, 0x36, 0xc6, 0x3d, 0x3c, 0xc4, 0xcd, 0x01,
	0xf7, 0xcd, 0x2e, 0x6c, 0xb7, 0x7a, 0xdd, 0x7e, 0xbb, 0x75, 0x3a, 0x38, 0x7e, 0xd6, 0x1e, 0x0a,
	0x99, 0x96, 0xad, 0x13, 0xd0, 0x16, 0x13, 0x0b, 0x7d, 0x02, 0x5b, 0xe2, 0x63, 0xd6, 0xf0, 0xd5,
	0xfc, 0xdb, 0x57, 0x25, 0xf9, 0x81, 0xab, 0x01, 0x28, 0x36, 0x17, 0xf7, 0xe5, 0x57, 0x20, 0xe5,
	0x8b, 0x15, 0x92, 0xfa, 0x0d, 0xd8, 0x5e, 0x4a, 0xbe, 0x58, 0x65, 0xce, 0xc4, 0x2b, 0x73, 0xfd,
	0x05, 0x54, 0x93, 0x79, 0xb6, 0x0e, 0x89, 0x6e, 0x8a, 0xf9, 0xd5, 0xe3, 0xfb, 0xa9, 0x30, 0xda,
	0x89, 0x67, 0x29, 0x56, 0x32, 0x3c, 0x43, 0xd5, 0xff, 0x9e, 0x01, 0x6d, 0x51, 0xcc, 0x9b, 0x8a,
	0x49, 0xc7, 0x52, 0x79, 0x0e, 0x8b, 0xdf, 0xe8, 0x01, 0x14, 0xce, 0x89, 0x31, 0x26, 0x2c, 0x9a,
	0x09, 0xea, 0xab, 0x34, 0x37, 0x9e, 0x12, 0xdf, 0x37, 0x26, 0xe4, 0xb1, 0x80, 0xe2, 0x88, 0xc2,
	0x35, 0x8e, 0xe8, 0xf8, 0x42, 0x75, 0x23, 0xf1, 0xbb, 0xf6, 0x35, 0xcf, 0xc3, 0x18, 0x3a, 0x6d,
	0x1e, 0xd6, 0xff, 0x99, 0x81, 0x72, 0xac, 0x7a, 0xcc, 0x7a, 0x60, 0x26, 0xd6, 0x03, 0xaf, 0xc0,
	0x86, 0xe1, 0x59, 0xca, 0x09, 0x05, 0x6e, 0x6a, 0xf3, 0xe4, 0x18, 0xf3, 0x35, 0xf4, 0xd3, 0x15,
	0x3d, 0x61, 0x63, 0x5d, 0x4f, 0xc0, 0x4b, 0x58, 0x74, 0x04, 0x68, 0xa9, 0x21, 0xf8, 0xfa, 0xe6,
	0xfa, 0x8e, 0x80, 0x57, 0xe0, 0x7f, 0xf4, 0x10, 0x72, 0xa2, 0xbb, 0x25, 0xa3, 0xb4, 0x0c, 0x85,
	0x7e, 0x1b, 0x3f, 0x3b, 0xe6, 0x03, 0x20, 0x1f, 0xfc, 0x9e, 0xb6, 0x07, 0x8f, 0x7b, 0x47, 0x5a,
	0x96, 0xa7, 0xf2, 0x23, 0xdc, 0x3b, 0x3d, 0xd1, 0x36, 0x12, 0x53, 0xe2, 0xe6, 0xe1, 0x1f, 0x33,
	0x70, 0xd7, 0xa4, 0x4e, 0x23, 0x20, 0x2e, 0x4f, 0xa4, 0x86, 0x47, 0x6d, 0x83, 0x59, 0x7e, 0x43,
	0x7c, 0xc4, 0x38, 0xb3, 0x4c, 0xf9, 0x7f, 0x29, 0xc3, 0xb3, 0xb8, 0x65, 0xa2, 0xba, 0x37, 0x02,
	0x6a, 0x13, 0x66, 0xb8, 0x26, 0x39, 0x7c, 0x3f, 0x59, 0x36, 0x4f, 0xf8, 0x14, 0xfc, 0xa2, 0x3d,
	0xb1, 0x82, 0xf3, 0x70, 0xd4, 0x30, 0xa9, 0xb3, 0xaf, 0xb4, 0x39, 0xc4, 0x3f, 0xdf, 0x4f, 0x68,
	0xdc, 0x97, 0x03, 0xdb, 0xfe, 0x84, 0xee, 0x1b, 0x9e, 0xb5, 0x3f, 0xbd, 0xb5, 0x2f, 0x74, 0x0f,
	0x67, 0xba, 0x47, 0x79, 0x31, 0x53, 0x7f, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xcc,
	0x44, 0x22, 0x67, 0x1b, 0x00, 0x00,
}
