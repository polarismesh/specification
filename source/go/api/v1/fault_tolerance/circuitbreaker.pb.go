// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: circuitbreaker.proto

package fault_tolerance

import (
	model "github.com/polarismesh/specification/source/go/api/v1/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// circuitbreaking level
type Level int32

const (
	Level_UNKNOWN Level = 0
	// service level circuitbreaking
	Level_SERVICE Level = 1
	// method level circuitbreaking
	Level_METHOD Level = 2
	// group level circuitbreaking
	Level_GROUP Level = 3
	// instance level circuitbreaking
	Level_INSTANCE Level = 4
)

// Enum value maps for Level.
var (
	Level_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVICE",
		2: "METHOD",
		3: "GROUP",
		4: "INSTANCE",
	}
	Level_value = map[string]int32{
		"UNKNOWN":  0,
		"SERVICE":  1,
		"METHOD":   2,
		"GROUP":    3,
		"INSTANCE": 4,
	}
)

func (x Level) Enum() *Level {
	p := new(Level)
	*p = x
	return p
}

func (x Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Level) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[0].Descriptor()
}

func (Level) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[0]
}

func (x Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Level.Descriptor instead.
func (Level) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{0}
}

//主动探测配置
type RecoverConfig_OutlierDetectWhen int32

const (
	//不开启监控探测
	RecoverConfig_NEVER RecoverConfig_OutlierDetectWhen = 0
	//只有在熔断恢复时才开启健康探测
	RecoverConfig_ON_RECOVER RecoverConfig_OutlierDetectWhen = 1
	//一直开启健康探测
	RecoverConfig_ALWAYS RecoverConfig_OutlierDetectWhen = 2
)

// Enum value maps for RecoverConfig_OutlierDetectWhen.
var (
	RecoverConfig_OutlierDetectWhen_name = map[int32]string{
		0: "NEVER",
		1: "ON_RECOVER",
		2: "ALWAYS",
	}
	RecoverConfig_OutlierDetectWhen_value = map[string]int32{
		"NEVER":      0,
		"ON_RECOVER": 1,
		"ALWAYS":     2,
	}
)

func (x RecoverConfig_OutlierDetectWhen) Enum() *RecoverConfig_OutlierDetectWhen {
	p := new(RecoverConfig_OutlierDetectWhen)
	*p = x
	return p
}

func (x RecoverConfig_OutlierDetectWhen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecoverConfig_OutlierDetectWhen) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[1].Descriptor()
}

func (RecoverConfig_OutlierDetectWhen) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[1]
}

func (x RecoverConfig_OutlierDetectWhen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecoverConfig_OutlierDetectWhen.Descriptor instead.
func (RecoverConfig_OutlierDetectWhen) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{2, 0}
}

// 需要进行熔断的资源
// 支持SUBSET（子集群），以及INSTANCE（单个实例），默认为SUBSET
type DestinationSet_Resource int32

const (
	// 针对实例分组进行熔断
	DestinationSet_SUBSET DestinationSet_Resource = 0
	// 针对实例进行熔断
	DestinationSet_INSTANCE DestinationSet_Resource = 1
)

// Enum value maps for DestinationSet_Resource.
var (
	DestinationSet_Resource_name = map[int32]string{
		0: "SUBSET",
		1: "INSTANCE",
	}
	DestinationSet_Resource_value = map[string]int32{
		"SUBSET":   0,
		"INSTANCE": 1,
	}
)

func (x DestinationSet_Resource) Enum() *DestinationSet_Resource {
	p := new(DestinationSet_Resource)
	*p = x
	return p
}

func (x DestinationSet_Resource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationSet_Resource) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[2].Descriptor()
}

func (DestinationSet_Resource) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[2]
}

func (x DestinationSet_Resource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationSet_Resource.Descriptor instead.
func (DestinationSet_Resource) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4, 0}
}

// 熔断决策类型，支持GLOBAL（分布式决策）以及LOCAL(本地决策），默认GLOBAL
// 当指定为GLOBAL时，则会定期上报统计数据并根据汇总数据进行熔断决策
type DestinationSet_Type int32

const (
	DestinationSet_GLOBAL DestinationSet_Type = 0
	DestinationSet_LOCAL  DestinationSet_Type = 1
)

// Enum value maps for DestinationSet_Type.
var (
	DestinationSet_Type_name = map[int32]string{
		0: "GLOBAL",
		1: "LOCAL",
	}
	DestinationSet_Type_value = map[string]int32{
		"GLOBAL": 0,
		"LOCAL":  1,
	}
)

func (x DestinationSet_Type) Enum() *DestinationSet_Type {
	p := new(DestinationSet_Type)
	*p = x
	return p
}

func (x DestinationSet_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationSet_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[3].Descriptor()
}

func (DestinationSet_Type) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[3]
}

func (x DestinationSet_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationSet_Type.Descriptor instead.
func (DestinationSet_Type) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4, 1}
}

//熔断范围，是否扩散针对相同服务下所有接口进行熔断
type DestinationSet_Scope int32

const (
	//触发熔断条件，扩散熔断所有接口
	DestinationSet_ALL DestinationSet_Scope = 0
	//触发熔断条件，只熔断当前接口
	DestinationSet_CURRENT DestinationSet_Scope = 1
)

// Enum value maps for DestinationSet_Scope.
var (
	DestinationSet_Scope_name = map[int32]string{
		0: "ALL",
		1: "CURRENT",
	}
	DestinationSet_Scope_value = map[string]int32{
		"ALL":     0,
		"CURRENT": 1,
	}
)

func (x DestinationSet_Scope) Enum() *DestinationSet_Scope {
	p := new(DestinationSet_Scope)
	*p = x
	return p
}

func (x DestinationSet_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationSet_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[4].Descriptor()
}

func (DestinationSet_Scope) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[4]
}

func (x DestinationSet_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationSet_Scope.Descriptor instead.
func (DestinationSet_Scope) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4, 2}
}

type ErrorCondition_InputType int32

const (
	ErrorCondition_UNKNOWN  ErrorCondition_InputType = 0
	ErrorCondition_RET_CODE ErrorCondition_InputType = 1
	ErrorCondition_DELAY    ErrorCondition_InputType = 2
)

// Enum value maps for ErrorCondition_InputType.
var (
	ErrorCondition_InputType_name = map[int32]string{
		0: "UNKNOWN",
		1: "RET_CODE",
		2: "DELAY",
	}
	ErrorCondition_InputType_value = map[string]int32{
		"UNKNOWN":  0,
		"RET_CODE": 1,
		"DELAY":    2,
	}
)

func (x ErrorCondition_InputType) Enum() *ErrorCondition_InputType {
	p := new(ErrorCondition_InputType)
	*p = x
	return p
}

func (x ErrorCondition_InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCondition_InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[5].Descriptor()
}

func (ErrorCondition_InputType) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[5]
}

func (x ErrorCondition_InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCondition_InputType.Descriptor instead.
func (ErrorCondition_InputType) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{8, 0}
}

type TriggerCondition_TriggerType int32

const (
	TriggerCondition_UNKNOWN           TriggerCondition_TriggerType = 0
	TriggerCondition_ERROR_RATE        TriggerCondition_TriggerType = 1
	TriggerCondition_CONSECUTIVE_ERROR TriggerCondition_TriggerType = 2
)

// Enum value maps for TriggerCondition_TriggerType.
var (
	TriggerCondition_TriggerType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ERROR_RATE",
		2: "CONSECUTIVE_ERROR",
	}
	TriggerCondition_TriggerType_value = map[string]int32{
		"UNKNOWN":           0,
		"ERROR_RATE":        1,
		"CONSECUTIVE_ERROR": 2,
	}
)

func (x TriggerCondition_TriggerType) Enum() *TriggerCondition_TriggerType {
	p := new(TriggerCondition_TriggerType)
	*p = x
	return p
}

func (x TriggerCondition_TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerCondition_TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[6].Descriptor()
}

func (TriggerCondition_TriggerType) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[6]
}

func (x TriggerCondition_TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerCondition_TriggerType.Descriptor instead.
func (TriggerCondition_TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{9, 0}
}

//单个熔断规则定义
type CircuitBreaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 规则版本
	// deprecated
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// 规则名
	// deprecated
	Name *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 规则命名空间
	// deprecated
	Namespace *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 规则所属服务
	Service          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	ServiceNamespace *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	//熔断规则可以分为被调规则和主调规则
	//被调规则针对所有的指定主调生效，假如不指定则对所有的主调生效
	//主调规则为当前主调方的规则，假如不指定则针对所有被调生效
	// deprecated
	Inbounds []*CbRule `protobuf:"bytes,7,rep,name=inbounds,proto3" json:"inbounds,omitempty"`
	// deprecated
	Outbounds []*CbRule `protobuf:"bytes,8,rep,name=outbounds,proto3" json:"outbounds,omitempty"`
	// deprecated
	Token *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
	// deprecated
	Owners *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=owners,proto3" json:"owners,omitempty"`
	// 业务
	// deprecated
	Business *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=business,proto3" json:"business,omitempty"`
	// 部门
	// deprecated
	Department *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=department,proto3" json:"department,omitempty"`
	// 规则描述
	// deprecated
	Comment *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	// deprecated
	Ctime *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// deprecated
	Mtime    *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Revision *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=revision,proto3" json:"revision,omitempty"`
	// circuitbreaker rules for current service
	Rules []*CircuitBreakerRule `protobuf:"bytes,21,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *CircuitBreaker) Reset() {
	*x = CircuitBreaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker) ProtoMessage() {}

func (x *CircuitBreaker) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker.ProtoReflect.Descriptor instead.
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{0}
}

func (x *CircuitBreaker) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CircuitBreaker) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CircuitBreaker) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CircuitBreaker) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *CircuitBreaker) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *CircuitBreaker) GetServiceNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceNamespace
	}
	return nil
}

func (x *CircuitBreaker) GetInbounds() []*CbRule {
	if x != nil {
		return x.Inbounds
	}
	return nil
}

func (x *CircuitBreaker) GetOutbounds() []*CbRule {
	if x != nil {
		return x.Outbounds
	}
	return nil
}

func (x *CircuitBreaker) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CircuitBreaker) GetOwners() *wrapperspb.StringValue {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *CircuitBreaker) GetBusiness() *wrapperspb.StringValue {
	if x != nil {
		return x.Business
	}
	return nil
}

func (x *CircuitBreaker) GetDepartment() *wrapperspb.StringValue {
	if x != nil {
		return x.Department
	}
	return nil
}

func (x *CircuitBreaker) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *CircuitBreaker) GetCtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *CircuitBreaker) GetMtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *CircuitBreaker) GetRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *CircuitBreaker) GetRules() []*CircuitBreakerRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// 主调匹配规则
type SourceMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主调命名空间以及服务名，可以为*，代表全匹配
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 可选，主调业务标签，用于匹配是否使用该熔断规则，可放置用户的接口信息等
	Labels map[string]*model.MatchString `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceMatcher) Reset() {
	*x = SourceMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMatcher) ProtoMessage() {}

func (x *SourceMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMatcher.ProtoReflect.Descriptor instead.
func (*SourceMatcher) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{1}
}

func (x *SourceMatcher) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *SourceMatcher) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *SourceMatcher) GetLabels() map[string]*model.MatchString {
	if x != nil {
		return x.Labels
	}
	return nil
}

// 熔断恢复配置
type RecoverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 触发熔断后到半开状态之间的等待间隔
	SleepWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=sleepWindow,proto3" json:"sleepWindow,omitempty"`
	// 半开后，最多重试多少次恢复
	MaxRetryAfterHalfOpen *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=maxRetryAfterHalfOpen,proto3" json:"maxRetryAfterHalfOpen,omitempty"`
	// 半开后放量的最大百分比
	RequestRateAfterHalfOpen []*wrapperspb.UInt32Value `protobuf:"bytes,3,rep,name=requestRateAfterHalfOpen,proto3" json:"requestRateAfterHalfOpen,omitempty"`
	// 熔断器半开到关闭所必须的最少成功率，默认100%
	SuccessRateToClose *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=successRateToClose,proto3" json:"successRateToClose,omitempty"`
	// 半开后最大放量数（用户不配置最大百分比时默认使用该配置）
	RequestCountAfterHalfOpen *wrapperspb.UInt32Value         `protobuf:"bytes,5,opt,name=requestCountAfterHalfOpen,proto3" json:"requestCountAfterHalfOpen,omitempty"`
	OutlierDetectWhen         RecoverConfig_OutlierDetectWhen `protobuf:"varint,6,opt,name=outlierDetectWhen,proto3,enum=v1.RecoverConfig_OutlierDetectWhen" json:"outlierDetectWhen,omitempty"`
}

func (x *RecoverConfig) Reset() {
	*x = RecoverConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverConfig) ProtoMessage() {}

func (x *RecoverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverConfig.ProtoReflect.Descriptor instead.
func (*RecoverConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{2}
}

func (x *RecoverConfig) GetSleepWindow() *durationpb.Duration {
	if x != nil {
		return x.SleepWindow
	}
	return nil
}

func (x *RecoverConfig) GetMaxRetryAfterHalfOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxRetryAfterHalfOpen
	}
	return nil
}

func (x *RecoverConfig) GetRequestRateAfterHalfOpen() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestRateAfterHalfOpen
	}
	return nil
}

func (x *RecoverConfig) GetSuccessRateToClose() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SuccessRateToClose
	}
	return nil
}

func (x *RecoverConfig) GetRequestCountAfterHalfOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestCountAfterHalfOpen
	}
	return nil
}

func (x *RecoverConfig) GetOutlierDetectWhen() RecoverConfig_OutlierDetectWhen {
	if x != nil {
		return x.OutlierDetectWhen
	}
	return RecoverConfig_NEVER
}

// 熔断策略
type CbPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorRate *CbPolicy_ErrRateConfig  `protobuf:"bytes,1,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	SlowRate  *CbPolicy_SlowRateConfig `protobuf:"bytes,2,opt,name=slowRate,proto3" json:"slowRate,omitempty"`
	// 熔断的决策周期，多久触发一次熔断决策
	JudgeDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=judgeDuration,proto3" json:"judgeDuration,omitempty"`
	//最大熔断比例，超过多少比例后不会继续熔断
	MaxEjectionPercent *wrapperspb.UInt32Value        `protobuf:"bytes,4,opt,name=maxEjectionPercent,proto3" json:"maxEjectionPercent,omitempty"`
	Consecutive        *CbPolicy_ConsecutiveErrConfig `protobuf:"bytes,5,opt,name=consecutive,proto3" json:"consecutive,omitempty"`
}

func (x *CbPolicy) Reset() {
	*x = CbPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy) ProtoMessage() {}

func (x *CbPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy.ProtoReflect.Descriptor instead.
func (*CbPolicy) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{3}
}

func (x *CbPolicy) GetErrorRate() *CbPolicy_ErrRateConfig {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

func (x *CbPolicy) GetSlowRate() *CbPolicy_SlowRateConfig {
	if x != nil {
		return x.SlowRate
	}
	return nil
}

func (x *CbPolicy) GetJudgeDuration() *durationpb.Duration {
	if x != nil {
		return x.JudgeDuration
	}
	return nil
}

func (x *CbPolicy) GetMaxEjectionPercent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxEjectionPercent
	}
	return nil
}

func (x *CbPolicy) GetConsecutive() *CbPolicy_ConsecutiveErrConfig {
	if x != nil {
		return x.Consecutive
	}
	return nil
}

// 目标set的规则
type DestinationSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 被调命名空间以及服务名，可以为*，代表全匹配
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 可选，SUBSET标识
	Metadata map[string]*model.MatchString `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resource DestinationSet_Resource       `protobuf:"varint,4,opt,name=resource,proto3,enum=v1.DestinationSet_Resource" json:"resource,omitempty"`
	Type     DestinationSet_Type           `protobuf:"varint,5,opt,name=type,proto3,enum=v1.DestinationSet_Type" json:"type,omitempty"`
	Scope    DestinationSet_Scope          `protobuf:"varint,6,opt,name=scope,proto3,enum=v1.DestinationSet_Scope" json:"scope,omitempty"`
	// 熔断数据度量周期
	// 所有的阈值指标按此周期进行统计
	MetricWindow *durationpb.Duration `protobuf:"bytes,7,opt,name=metricWindow,proto3" json:"metricWindow,omitempty"`
	// 熔断数据统计精度，决定数据度量的最小周期
	// 度量滑窗的步长=window/precision
	MetricPrecision *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=metricPrecision,proto3" json:"metricPrecision,omitempty"`
	// 熔断数据上报周期，对分布式熔断有效
	UpdateInterval *durationpb.Duration `protobuf:"bytes,9,opt,name=updateInterval,proto3" json:"updateInterval,omitempty"`
	// 触发熔断后恢复配置
	Recover *RecoverConfig `protobuf:"bytes,10,opt,name=recover,proto3" json:"recover,omitempty"`
	// 熔断策略
	Policy *CbPolicy `protobuf:"bytes,11,opt,name=policy,proto3" json:"policy,omitempty"`
	// 被调的接口信息，指定哪些接口会使用该规则
	Method *model.MatchString `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty"`
	// 返回码，指定哪些返回码会使用该规则
	ErrorCodes []*wrapperspb.Int64Value `protobuf:"bytes,13,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
}

func (x *DestinationSet) Reset() {
	*x = DestinationSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSet) ProtoMessage() {}

func (x *DestinationSet) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSet.ProtoReflect.Descriptor instead.
func (*DestinationSet) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4}
}

func (x *DestinationSet) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *DestinationSet) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *DestinationSet) GetMetadata() map[string]*model.MatchString {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DestinationSet) GetResource() DestinationSet_Resource {
	if x != nil {
		return x.Resource
	}
	return DestinationSet_SUBSET
}

func (x *DestinationSet) GetType() DestinationSet_Type {
	if x != nil {
		return x.Type
	}
	return DestinationSet_GLOBAL
}

func (x *DestinationSet) GetScope() DestinationSet_Scope {
	if x != nil {
		return x.Scope
	}
	return DestinationSet_ALL
}

func (x *DestinationSet) GetMetricWindow() *durationpb.Duration {
	if x != nil {
		return x.MetricWindow
	}
	return nil
}

func (x *DestinationSet) GetMetricPrecision() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MetricPrecision
	}
	return nil
}

func (x *DestinationSet) GetUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateInterval
	}
	return nil
}

func (x *DestinationSet) GetRecover() *RecoverConfig {
	if x != nil {
		return x.Recover
	}
	return nil
}

func (x *DestinationSet) GetPolicy() *CbPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *DestinationSet) GetMethod() *model.MatchString {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *DestinationSet) GetErrorCodes() []*wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

// 具体熔断规则
type CbRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 如果匹配Source规则，按照Destination进行熔断
	// 多个Source之间的关系为或
	Sources      []*SourceMatcher  `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations []*DestinationSet `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *CbRule) Reset() {
	*x = CbRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbRule) ProtoMessage() {}

func (x *CbRule) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbRule.ProtoReflect.Descriptor instead.
func (*CbRule) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{5}
}

func (x *CbRule) GetSources() []*SourceMatcher {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *CbRule) GetDestinations() []*DestinationSet {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type RuleMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      *RuleMatcher_SourceService      `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination *RuleMatcher_DestinationService `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *RuleMatcher) Reset() {
	*x = RuleMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleMatcher) ProtoMessage() {}

func (x *RuleMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleMatcher.ProtoReflect.Descriptor instead.
func (*RuleMatcher) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{6}
}

func (x *RuleMatcher) GetSource() *RuleMatcher_SourceService {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RuleMatcher) GetDestination() *RuleMatcher_DestinationService {
	if x != nil {
		return x.Destination
	}
	return nil
}

// new specific rule for circuitbreaker config
type CircuitBreakerRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// rule name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// namespace of rule
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// enable this router
	Enable bool `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	// revision routing version
	Revision string `protobuf:"bytes,5,opt,name=revision,proto3" json:"revision,omitempty"`
	// ctime create time of the rules
	Ctime string `protobuf:"bytes,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// mtime modify time of the rules
	Mtime string `protobuf:"bytes,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// etime enable time of the rules
	Etime string `protobuf:"bytes,8,opt,name=etime,proto3" json:"etime,omitempty"`
	// description simple description rules
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// the circuitbreaking level
	Level Level `protobuf:"varint,21,opt,name=level,proto3,enum=v1.Level" json:"level,omitempty"`
	// match condition for this rule
	RuleMatcher *RuleMatcher `protobuf:"bytes,22,opt,name=rule_matcher,json=ruleMatcher,proto3" json:"rule_matcher,omitempty"`
	// deprecated_filed error conditions to judge an invocation as an error
	//
	// Deprecated: Marked as deprecated in circuitbreaker.proto.
	ErrorConditions []*ErrorCondition `protobuf:"bytes,23,rep,name=error_conditions,json=errorConditions,proto3" json:"error_conditions,omitempty"`
	// deprecated_filed trigger condition to trigger circuitbreaking
	//
	// Deprecated: Marked as deprecated in circuitbreaker.proto.
	TriggerCondition []*TriggerCondition `protobuf:"bytes,24,rep,name=trigger_condition,json=triggerCondition,proto3" json:"trigger_condition,omitempty"`
	// the maximum % of an upstream cluster that can be ejected
	MaxEjectionPercent uint32 `protobuf:"varint,25,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
	// recover condition to make resource open to close
	RecoverCondition *RecoverCondition `protobuf:"bytes,26,opt,name=recoverCondition,proto3" json:"recoverCondition,omitempty"`
	// fault detection enable config
	FaultDetectConfig *FaultDetectConfig `protobuf:"bytes,27,opt,name=faultDetectConfig,proto3" json:"faultDetectConfig,omitempty"`
	// fall back configuration
	FallbackConfig *FallbackConfig `protobuf:"bytes,28,opt,name=fallbackConfig,proto3" json:"fallbackConfig,omitempty"`
	// list for block configuration
	BlockConfigs []*BlockConfig `protobuf:"bytes,29,rep,name=block_configs,proto3" json:"block_configs,omitempty"`
	// priority rules priority
	Priority uint32 `protobuf:"varint,30,opt,name=priority,proto3" json:"priority,omitempty"`
	// 熔断规则标签数据
	Metadata map[string]string `protobuf:"bytes,31,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CircuitBreakerRule) Reset() {
	*x = CircuitBreakerRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerRule) ProtoMessage() {}

func (x *CircuitBreakerRule) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerRule.ProtoReflect.Descriptor instead.
func (*CircuitBreakerRule) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{7}
}

func (x *CircuitBreakerRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CircuitBreakerRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CircuitBreakerRule) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CircuitBreakerRule) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CircuitBreakerRule) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *CircuitBreakerRule) GetCtime() string {
	if x != nil {
		return x.Ctime
	}
	return ""
}

func (x *CircuitBreakerRule) GetMtime() string {
	if x != nil {
		return x.Mtime
	}
	return ""
}

func (x *CircuitBreakerRule) GetEtime() string {
	if x != nil {
		return x.Etime
	}
	return ""
}

func (x *CircuitBreakerRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CircuitBreakerRule) GetLevel() Level {
	if x != nil {
		return x.Level
	}
	return Level_UNKNOWN
}

func (x *CircuitBreakerRule) GetRuleMatcher() *RuleMatcher {
	if x != nil {
		return x.RuleMatcher
	}
	return nil
}

// Deprecated: Marked as deprecated in circuitbreaker.proto.
func (x *CircuitBreakerRule) GetErrorConditions() []*ErrorCondition {
	if x != nil {
		return x.ErrorConditions
	}
	return nil
}

// Deprecated: Marked as deprecated in circuitbreaker.proto.
func (x *CircuitBreakerRule) GetTriggerCondition() []*TriggerCondition {
	if x != nil {
		return x.TriggerCondition
	}
	return nil
}

func (x *CircuitBreakerRule) GetMaxEjectionPercent() uint32 {
	if x != nil {
		return x.MaxEjectionPercent
	}
	return 0
}

func (x *CircuitBreakerRule) GetRecoverCondition() *RecoverCondition {
	if x != nil {
		return x.RecoverCondition
	}
	return nil
}

func (x *CircuitBreakerRule) GetFaultDetectConfig() *FaultDetectConfig {
	if x != nil {
		return x.FaultDetectConfig
	}
	return nil
}

func (x *CircuitBreakerRule) GetFallbackConfig() *FallbackConfig {
	if x != nil {
		return x.FallbackConfig
	}
	return nil
}

func (x *CircuitBreakerRule) GetBlockConfigs() []*BlockConfig {
	if x != nil {
		return x.BlockConfigs
	}
	return nil
}

func (x *CircuitBreakerRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CircuitBreakerRule) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// the condition to judge an input invocation as an error
type ErrorCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputType ErrorCondition_InputType `protobuf:"varint,1,opt,name=input_type,json=inputType,proto3,enum=v1.ErrorCondition_InputType" json:"input_type,omitempty"`
	Condition *model.MatchString       `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *ErrorCondition) Reset() {
	*x = ErrorCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorCondition) ProtoMessage() {}

func (x *ErrorCondition) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorCondition.ProtoReflect.Descriptor instead.
func (*ErrorCondition) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{8}
}

func (x *ErrorCondition) GetInputType() ErrorCondition_InputType {
	if x != nil {
		return x.InputType
	}
	return ErrorCondition_UNKNOWN
}

func (x *ErrorCondition) GetCondition() *model.MatchString {
	if x != nil {
		return x.Condition
	}
	return nil
}

// the error condition to trigger circuitbreaking
type TriggerCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerType    TriggerCondition_TriggerType `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=v1.TriggerCondition_TriggerType" json:"trigger_type,omitempty"`
	ErrorCount     uint32                       `protobuf:"varint,2,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	ErrorPercent   uint32                       `protobuf:"varint,3,opt,name=error_percent,json=errorPercent,proto3" json:"error_percent,omitempty"`
	Interval       uint32                       `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	MinimumRequest uint32                       `protobuf:"varint,5,opt,name=minimum_request,json=minimumRequest,proto3" json:"minimum_request,omitempty"`
}

func (x *TriggerCondition) Reset() {
	*x = TriggerCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerCondition) ProtoMessage() {}

func (x *TriggerCondition) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerCondition.ProtoReflect.Descriptor instead.
func (*TriggerCondition) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{9}
}

func (x *TriggerCondition) GetTriggerType() TriggerCondition_TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerCondition_UNKNOWN
}

func (x *TriggerCondition) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *TriggerCondition) GetErrorPercent() uint32 {
	if x != nil {
		return x.ErrorPercent
	}
	return 0
}

func (x *TriggerCondition) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *TriggerCondition) GetMinimumRequest() uint32 {
	if x != nil {
		return x.MinimumRequest
	}
	return 0
}

// circuitbreaking OPEN status recover
type RecoverCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// seconds from open to half-open
	SleepWindow uint32 `protobuf:"varint,1,opt,name=sleep_window,json=sleepWindow,proto3" json:"sleep_window,omitempty"`
	// consecutive success request to recover
	ConsecutiveSuccess uint32 `protobuf:"varint,2,opt,name=consecutiveSuccess,proto3" json:"consecutiveSuccess,omitempty"`
}

func (x *RecoverCondition) Reset() {
	*x = RecoverCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverCondition) ProtoMessage() {}

func (x *RecoverCondition) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverCondition.ProtoReflect.Descriptor instead.
func (*RecoverCondition) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{10}
}

func (x *RecoverCondition) GetSleepWindow() uint32 {
	if x != nil {
		return x.SleepWindow
	}
	return 0
}

func (x *RecoverCondition) GetConsecutiveSuccess() uint32 {
	if x != nil {
		return x.ConsecutiveSuccess
	}
	return 0
}

// fault detect config within circuitbreaking
type FaultDetectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *FaultDetectConfig) Reset() {
	*x = FaultDetectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultDetectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultDetectConfig) ProtoMessage() {}

func (x *FaultDetectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultDetectConfig.ProtoReflect.Descriptor instead.
func (*FaultDetectConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{11}
}

func (x *FaultDetectConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// blocking strategy
type BlockConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// blocking target api
	Api *model.API `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
	// conditions to judge an invocation as an error
	ErrorConditions []*ErrorCondition `protobuf:"bytes,3,rep,name=error_conditions,proto3" json:"error_conditions,omitempty"`
	// trigger condition to trigger circuitbreaking
	TriggerConditions []*TriggerCondition `protobuf:"bytes,4,rep,name=trigger_conditions,proto3" json:"trigger_conditions,omitempty"`
}

func (x *BlockConfig) Reset() {
	*x = BlockConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockConfig) ProtoMessage() {}

func (x *BlockConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockConfig.ProtoReflect.Descriptor instead.
func (*BlockConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{12}
}

func (x *BlockConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockConfig) GetApi() *model.API {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BlockConfig) GetErrorConditions() []*ErrorCondition {
	if x != nil {
		return x.ErrorConditions
	}
	return nil
}

func (x *BlockConfig) GetTriggerConditions() []*TriggerCondition {
	if x != nil {
		return x.TriggerConditions
	}
	return nil
}

// fallback config
type FallbackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable   bool              `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Response *FallbackResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FallbackConfig) Reset() {
	*x = FallbackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallbackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallbackConfig) ProtoMessage() {}

func (x *FallbackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallbackConfig.ProtoReflect.Descriptor instead.
func (*FallbackConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{13}
}

func (x *FallbackConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *FallbackConfig) GetResponse() *FallbackResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// fallback response
type FallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Headers []*FallbackResponse_MessageHeader `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	Body    string                            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *FallbackResponse) Reset() {
	*x = FallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallbackResponse) ProtoMessage() {}

func (x *FallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallbackResponse.ProtoReflect.Descriptor instead.
func (*FallbackResponse) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{14}
}

func (x *FallbackResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FallbackResponse) GetHeaders() []*FallbackResponse_MessageHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FallbackResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// 错误率熔断配置
type CbPolicy_ErrRateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//是否启用错误率配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 触发错误率熔断的最低请求阈值
	RequestVolumeThreshold *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=requestVolumeThreshold,proto3" json:"requestVolumeThreshold,omitempty"`
	// 可选。触发保持状态的错误率阈值，假如不配置，则默认不会进入Preserved状态
	ErrorRateToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=errorRateToPreserved,proto3" json:"errorRateToPreserved,omitempty"`
	// 触发熔断的错误率阈值
	ErrorRateToOpen *wrapperspb.UInt32Value                 `protobuf:"bytes,4,opt,name=errorRateToOpen,proto3" json:"errorRateToOpen,omitempty"`
	Specials        []*CbPolicy_ErrRateConfig_SpecialConfig `protobuf:"bytes,5,rep,name=specials,proto3" json:"specials,omitempty"`
}

func (x *CbPolicy_ErrRateConfig) Reset() {
	*x = CbPolicy_ErrRateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy_ErrRateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy_ErrRateConfig) ProtoMessage() {}

func (x *CbPolicy_ErrRateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy_ErrRateConfig.ProtoReflect.Descriptor instead.
func (*CbPolicy_ErrRateConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CbPolicy_ErrRateConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig) GetRequestVolumeThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestVolumeThreshold
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig) GetErrorRateToPreserved() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ErrorRateToPreserved
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig) GetErrorRateToOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ErrorRateToOpen
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig) GetSpecials() []*CbPolicy_ErrRateConfig_SpecialConfig {
	if x != nil {
		return x.Specials
	}
	return nil
}

// 慢调用率熔断策略配置
type CbPolicy_SlowRateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启用慢调用率配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 最大响应时间，超过该时间属于慢调用请求
	MaxRt *durationpb.Duration `protobuf:"bytes,2,opt,name=maxRt,proto3" json:"maxRt,omitempty"`
	// 可选。触发保持状态的超时率阈值，假如不配置，则默认不会进入Preserved状态
	SlowRateToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=slowRateToPreserved,proto3" json:"slowRateToPreserved,omitempty"`
	// 触发熔断的超时率阈值
	SlowRateToOpen *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=slowRateToOpen,proto3" json:"slowRateToOpen,omitempty"`
}

func (x *CbPolicy_SlowRateConfig) Reset() {
	*x = CbPolicy_SlowRateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy_SlowRateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy_SlowRateConfig) ProtoMessage() {}

func (x *CbPolicy_SlowRateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy_SlowRateConfig.ProtoReflect.Descriptor instead.
func (*CbPolicy_SlowRateConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CbPolicy_SlowRateConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CbPolicy_SlowRateConfig) GetMaxRt() *durationpb.Duration {
	if x != nil {
		return x.MaxRt
	}
	return nil
}

func (x *CbPolicy_SlowRateConfig) GetSlowRateToPreserved() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlowRateToPreserved
	}
	return nil
}

func (x *CbPolicy_SlowRateConfig) GetSlowRateToOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlowRateToOpen
	}
	return nil
}

//连续错误数熔断配置
type CbPolicy_ConsecutiveErrConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启用连续错误数配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 连续错误数阈值，进入Preserved状态
	ConsecutiveErrorToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=consecutiveErrorToPreserved,proto3" json:"consecutiveErrorToPreserved,omitempty"`
	// 连续错误数阈值，进入Open状态
	ConsecutiveErrorToOpen *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=consecutiveErrorToOpen,proto3" json:"consecutiveErrorToOpen,omitempty"`
}

func (x *CbPolicy_ConsecutiveErrConfig) Reset() {
	*x = CbPolicy_ConsecutiveErrConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy_ConsecutiveErrConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy_ConsecutiveErrConfig) ProtoMessage() {}

func (x *CbPolicy_ConsecutiveErrConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy_ConsecutiveErrConfig.ProtoReflect.Descriptor instead.
func (*CbPolicy_ConsecutiveErrConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CbPolicy_ConsecutiveErrConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CbPolicy_ConsecutiveErrConfig) GetConsecutiveErrorToPreserved() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConsecutiveErrorToPreserved
	}
	return nil
}

func (x *CbPolicy_ConsecutiveErrConfig) GetConsecutiveErrorToOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConsecutiveErrorToOpen
	}
	return nil
}

//错误码相关特定配置
type CbPolicy_ErrRateConfig_SpecialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 熔断关心的错误类型，用户可以自己定义
	Type                 *wrapperspb.StringValue  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ErrorCodes           []*wrapperspb.Int64Value `protobuf:"bytes,2,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
	ErrorRateToPreserved *wrapperspb.UInt32Value  `protobuf:"bytes,3,opt,name=errorRateToPreserved,proto3" json:"errorRateToPreserved,omitempty"`
	ErrorRateToOpen      *wrapperspb.UInt32Value  `protobuf:"bytes,4,opt,name=errorRateToOpen,proto3" json:"errorRateToOpen,omitempty"`
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) Reset() {
	*x = CbPolicy_ErrRateConfig_SpecialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy_ErrRateConfig_SpecialConfig) ProtoMessage() {}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy_ErrRateConfig_SpecialConfig.ProtoReflect.Descriptor instead.
func (*CbPolicy_ErrRateConfig_SpecialConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorCodes() []*wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorRateToPreserved() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ErrorRateToPreserved
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorRateToOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ErrorRateToOpen
	}
	return nil
}

type RuleMatcher_SourceService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service   string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *RuleMatcher_SourceService) Reset() {
	*x = RuleMatcher_SourceService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleMatcher_SourceService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleMatcher_SourceService) ProtoMessage() {}

func (x *RuleMatcher_SourceService) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleMatcher_SourceService.ProtoReflect.Descriptor instead.
func (*RuleMatcher_SourceService) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{6, 0}
}

func (x *RuleMatcher_SourceService) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *RuleMatcher_SourceService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type RuleMatcher_DestinationService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service   string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// deprecated_filed  using api.path in blockConfig instead
	//
	// Deprecated: Marked as deprecated in circuitbreaker.proto.
	Method *model.MatchString `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *RuleMatcher_DestinationService) Reset() {
	*x = RuleMatcher_DestinationService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleMatcher_DestinationService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleMatcher_DestinationService) ProtoMessage() {}

func (x *RuleMatcher_DestinationService) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleMatcher_DestinationService.ProtoReflect.Descriptor instead.
func (*RuleMatcher_DestinationService) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{6, 1}
}

func (x *RuleMatcher_DestinationService) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *RuleMatcher_DestinationService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Deprecated: Marked as deprecated in circuitbreaker.proto.
func (x *RuleMatcher_DestinationService) GetMethod() *model.MatchString {
	if x != nil {
		return x.Method
	}
	return nil
}

type FallbackResponse_MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FallbackResponse_MessageHeader) Reset() {
	*x = FallbackResponse_MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallbackResponse_MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallbackResponse_MessageHeader) ProtoMessage() {}

func (x *FallbackResponse_MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallbackResponse_MessageHeader.ProtoReflect.Descriptor instead.
func (*FallbackResponse_MessageHeader) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{14, 0}
}

func (x *FallbackResponse_MessageHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FallbackResponse_MessageHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_circuitbreaker_proto protoreflect.FileDescriptor

var file_circuitbreaker_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x07, 0x0a, 0x0e, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x62, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x62, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x04, 0x08,
	0x11, 0x10, 0x15, 0x22, 0x86, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x4a, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x04, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b,
	0x0a, 0x0b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x52, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66,
	0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x58, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66,
	0x4f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x51, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x57,
	0x68, 0x65, 0x6e, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x22, 0x3a, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x4e,
	0x45, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53,
	0x10, 0x02, 0x22, 0xf9, 0x0b, 0x0a, 0x08, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x45, 0x72, 0x72, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x6c, 0x6f,
	0x77, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x62, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x94, 0x05, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x16,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x50, 0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x72, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x73, 0x1a, 0x98, 0x02, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0x8b, 0x02,
	0x0a, 0x0e, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x6d, 0x61, 0x78, 0x52, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x6c, 0x6f,
	0x77, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0x80, 0x02, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x8d,
	0x07, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01,
	0x22, 0x1d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x22,
	0x1d, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x6d,
	0x0a, 0x06, 0x43, 0x62, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xce, 0x02,
	0x0a, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x0d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x1a, 0x79, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x9a,
	0x07, 0x0a, 0x12, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x32, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0e, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x15, 0x22, 0xaf, 0x01, 0x0a, 0x0e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x09, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x22, 0xa5, 0x02,
	0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x41, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2b, 0x0a, 0x11,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x50, 0x49, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x3e, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5a,
	0x0a, 0x0e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x37, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x46,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x42, 0x96, 0x01, 0x0a, 0x38, 0x63, 0x6f, 0x6d, 0x2e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x13, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_circuitbreaker_proto_rawDescOnce sync.Once
	file_circuitbreaker_proto_rawDescData = file_circuitbreaker_proto_rawDesc
)

func file_circuitbreaker_proto_rawDescGZIP() []byte {
	file_circuitbreaker_proto_rawDescOnce.Do(func() {
		file_circuitbreaker_proto_rawDescData = protoimpl.X.CompressGZIP(file_circuitbreaker_proto_rawDescData)
	})
	return file_circuitbreaker_proto_rawDescData
}

var file_circuitbreaker_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_circuitbreaker_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_circuitbreaker_proto_goTypes = []interface{}{
	(Level)(0),                                   // 0: v1.Level
	(RecoverConfig_OutlierDetectWhen)(0),         // 1: v1.RecoverConfig.OutlierDetectWhen
	(DestinationSet_Resource)(0),                 // 2: v1.DestinationSet.Resource
	(DestinationSet_Type)(0),                     // 3: v1.DestinationSet.Type
	(DestinationSet_Scope)(0),                    // 4: v1.DestinationSet.Scope
	(ErrorCondition_InputType)(0),                // 5: v1.ErrorCondition.InputType
	(TriggerCondition_TriggerType)(0),            // 6: v1.TriggerCondition.TriggerType
	(*CircuitBreaker)(nil),                       // 7: v1.CircuitBreaker
	(*SourceMatcher)(nil),                        // 8: v1.SourceMatcher
	(*RecoverConfig)(nil),                        // 9: v1.RecoverConfig
	(*CbPolicy)(nil),                             // 10: v1.CbPolicy
	(*DestinationSet)(nil),                       // 11: v1.DestinationSet
	(*CbRule)(nil),                               // 12: v1.CbRule
	(*RuleMatcher)(nil),                          // 13: v1.RuleMatcher
	(*CircuitBreakerRule)(nil),                   // 14: v1.CircuitBreakerRule
	(*ErrorCondition)(nil),                       // 15: v1.ErrorCondition
	(*TriggerCondition)(nil),                     // 16: v1.TriggerCondition
	(*RecoverCondition)(nil),                     // 17: v1.RecoverCondition
	(*FaultDetectConfig)(nil),                    // 18: v1.FaultDetectConfig
	(*BlockConfig)(nil),                          // 19: v1.BlockConfig
	(*FallbackConfig)(nil),                       // 20: v1.FallbackConfig
	(*FallbackResponse)(nil),                     // 21: v1.FallbackResponse
	nil,                                          // 22: v1.SourceMatcher.LabelsEntry
	(*CbPolicy_ErrRateConfig)(nil),               // 23: v1.CbPolicy.ErrRateConfig
	(*CbPolicy_SlowRateConfig)(nil),              // 24: v1.CbPolicy.SlowRateConfig
	(*CbPolicy_ConsecutiveErrConfig)(nil),        // 25: v1.CbPolicy.ConsecutiveErrConfig
	(*CbPolicy_ErrRateConfig_SpecialConfig)(nil), // 26: v1.CbPolicy.ErrRateConfig.SpecialConfig
	nil,                                    // 27: v1.DestinationSet.MetadataEntry
	(*RuleMatcher_SourceService)(nil),      // 28: v1.RuleMatcher.SourceService
	(*RuleMatcher_DestinationService)(nil), // 29: v1.RuleMatcher.DestinationService
	nil,                                    // 30: v1.CircuitBreakerRule.MetadataEntry
	(*FallbackResponse_MessageHeader)(nil), // 31: v1.FallbackResponse.MessageHeader
	(*wrapperspb.StringValue)(nil),         // 32: google.protobuf.StringValue
	(*durationpb.Duration)(nil),            // 33: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),         // 34: google.protobuf.UInt32Value
	(*model.MatchString)(nil),              // 35: v1.MatchString
	(*wrapperspb.Int64Value)(nil),          // 36: google.protobuf.Int64Value
	(*model.API)(nil),                      // 37: v1.API
	(*wrapperspb.BoolValue)(nil),           // 38: google.protobuf.BoolValue
}
var file_circuitbreaker_proto_depIdxs = []int32{
	32, // 0: v1.CircuitBreaker.id:type_name -> google.protobuf.StringValue
	32, // 1: v1.CircuitBreaker.version:type_name -> google.protobuf.StringValue
	32, // 2: v1.CircuitBreaker.name:type_name -> google.protobuf.StringValue
	32, // 3: v1.CircuitBreaker.namespace:type_name -> google.protobuf.StringValue
	32, // 4: v1.CircuitBreaker.service:type_name -> google.protobuf.StringValue
	32, // 5: v1.CircuitBreaker.service_namespace:type_name -> google.protobuf.StringValue
	12, // 6: v1.CircuitBreaker.inbounds:type_name -> v1.CbRule
	12, // 7: v1.CircuitBreaker.outbounds:type_name -> v1.CbRule
	32, // 8: v1.CircuitBreaker.token:type_name -> google.protobuf.StringValue
	32, // 9: v1.CircuitBreaker.owners:type_name -> google.protobuf.StringValue
	32, // 10: v1.CircuitBreaker.business:type_name -> google.protobuf.StringValue
	32, // 11: v1.CircuitBreaker.department:type_name -> google.protobuf.StringValue
	32, // 12: v1.CircuitBreaker.comment:type_name -> google.protobuf.StringValue
	32, // 13: v1.CircuitBreaker.ctime:type_name -> google.protobuf.StringValue
	32, // 14: v1.CircuitBreaker.mtime:type_name -> google.protobuf.StringValue
	32, // 15: v1.CircuitBreaker.revision:type_name -> google.protobuf.StringValue
	14, // 16: v1.CircuitBreaker.rules:type_name -> v1.CircuitBreakerRule
	32, // 17: v1.SourceMatcher.service:type_name -> google.protobuf.StringValue
	32, // 18: v1.SourceMatcher.namespace:type_name -> google.protobuf.StringValue
	22, // 19: v1.SourceMatcher.labels:type_name -> v1.SourceMatcher.LabelsEntry
	33, // 20: v1.RecoverConfig.sleepWindow:type_name -> google.protobuf.Duration
	34, // 21: v1.RecoverConfig.maxRetryAfterHalfOpen:type_name -> google.protobuf.UInt32Value
	34, // 22: v1.RecoverConfig.requestRateAfterHalfOpen:type_name -> google.protobuf.UInt32Value
	34, // 23: v1.RecoverConfig.successRateToClose:type_name -> google.protobuf.UInt32Value
	34, // 24: v1.RecoverConfig.requestCountAfterHalfOpen:type_name -> google.protobuf.UInt32Value
	1,  // 25: v1.RecoverConfig.outlierDetectWhen:type_name -> v1.RecoverConfig.OutlierDetectWhen
	23, // 26: v1.CbPolicy.errorRate:type_name -> v1.CbPolicy.ErrRateConfig
	24, // 27: v1.CbPolicy.slowRate:type_name -> v1.CbPolicy.SlowRateConfig
	33, // 28: v1.CbPolicy.judgeDuration:type_name -> google.protobuf.Duration
	34, // 29: v1.CbPolicy.maxEjectionPercent:type_name -> google.protobuf.UInt32Value
	25, // 30: v1.CbPolicy.consecutive:type_name -> v1.CbPolicy.ConsecutiveErrConfig
	32, // 31: v1.DestinationSet.service:type_name -> google.protobuf.StringValue
	32, // 32: v1.DestinationSet.namespace:type_name -> google.protobuf.StringValue
	27, // 33: v1.DestinationSet.metadata:type_name -> v1.DestinationSet.MetadataEntry
	2,  // 34: v1.DestinationSet.resource:type_name -> v1.DestinationSet.Resource
	3,  // 35: v1.DestinationSet.type:type_name -> v1.DestinationSet.Type
	4,  // 36: v1.DestinationSet.scope:type_name -> v1.DestinationSet.Scope
	33, // 37: v1.DestinationSet.metricWindow:type_name -> google.protobuf.Duration
	34, // 38: v1.DestinationSet.metricPrecision:type_name -> google.protobuf.UInt32Value
	33, // 39: v1.DestinationSet.updateInterval:type_name -> google.protobuf.Duration
	9,  // 40: v1.DestinationSet.recover:type_name -> v1.RecoverConfig
	10, // 41: v1.DestinationSet.policy:type_name -> v1.CbPolicy
	35, // 42: v1.DestinationSet.method:type_name -> v1.MatchString
	36, // 43: v1.DestinationSet.errorCodes:type_name -> google.protobuf.Int64Value
	8,  // 44: v1.CbRule.sources:type_name -> v1.SourceMatcher
	11, // 45: v1.CbRule.destinations:type_name -> v1.DestinationSet
	28, // 46: v1.RuleMatcher.source:type_name -> v1.RuleMatcher.SourceService
	29, // 47: v1.RuleMatcher.destination:type_name -> v1.RuleMatcher.DestinationService
	0,  // 48: v1.CircuitBreakerRule.level:type_name -> v1.Level
	13, // 49: v1.CircuitBreakerRule.rule_matcher:type_name -> v1.RuleMatcher
	15, // 50: v1.CircuitBreakerRule.error_conditions:type_name -> v1.ErrorCondition
	16, // 51: v1.CircuitBreakerRule.trigger_condition:type_name -> v1.TriggerCondition
	17, // 52: v1.CircuitBreakerRule.recoverCondition:type_name -> v1.RecoverCondition
	18, // 53: v1.CircuitBreakerRule.faultDetectConfig:type_name -> v1.FaultDetectConfig
	20, // 54: v1.CircuitBreakerRule.fallbackConfig:type_name -> v1.FallbackConfig
	19, // 55: v1.CircuitBreakerRule.block_configs:type_name -> v1.BlockConfig
	30, // 56: v1.CircuitBreakerRule.metadata:type_name -> v1.CircuitBreakerRule.MetadataEntry
	5,  // 57: v1.ErrorCondition.input_type:type_name -> v1.ErrorCondition.InputType
	35, // 58: v1.ErrorCondition.condition:type_name -> v1.MatchString
	6,  // 59: v1.TriggerCondition.trigger_type:type_name -> v1.TriggerCondition.TriggerType
	37, // 60: v1.BlockConfig.api:type_name -> v1.API
	15, // 61: v1.BlockConfig.error_conditions:type_name -> v1.ErrorCondition
	16, // 62: v1.BlockConfig.trigger_conditions:type_name -> v1.TriggerCondition
	21, // 63: v1.FallbackConfig.response:type_name -> v1.FallbackResponse
	31, // 64: v1.FallbackResponse.headers:type_name -> v1.FallbackResponse.MessageHeader
	35, // 65: v1.SourceMatcher.LabelsEntry.value:type_name -> v1.MatchString
	38, // 66: v1.CbPolicy.ErrRateConfig.enable:type_name -> google.protobuf.BoolValue
	34, // 67: v1.CbPolicy.ErrRateConfig.requestVolumeThreshold:type_name -> google.protobuf.UInt32Value
	34, // 68: v1.CbPolicy.ErrRateConfig.errorRateToPreserved:type_name -> google.protobuf.UInt32Value
	34, // 69: v1.CbPolicy.ErrRateConfig.errorRateToOpen:type_name -> google.protobuf.UInt32Value
	26, // 70: v1.CbPolicy.ErrRateConfig.specials:type_name -> v1.CbPolicy.ErrRateConfig.SpecialConfig
	38, // 71: v1.CbPolicy.SlowRateConfig.enable:type_name -> google.protobuf.BoolValue
	33, // 72: v1.CbPolicy.SlowRateConfig.maxRt:type_name -> google.protobuf.Duration
	34, // 73: v1.CbPolicy.SlowRateConfig.slowRateToPreserved:type_name -> google.protobuf.UInt32Value
	34, // 74: v1.CbPolicy.SlowRateConfig.slowRateToOpen:type_name -> google.protobuf.UInt32Value
	38, // 75: v1.CbPolicy.ConsecutiveErrConfig.enable:type_name -> google.protobuf.BoolValue
	34, // 76: v1.CbPolicy.ConsecutiveErrConfig.consecutiveErrorToPreserved:type_name -> google.protobuf.UInt32Value
	34, // 77: v1.CbPolicy.ConsecutiveErrConfig.consecutiveErrorToOpen:type_name -> google.protobuf.UInt32Value
	32, // 78: v1.CbPolicy.ErrRateConfig.SpecialConfig.type:type_name -> google.protobuf.StringValue
	36, // 79: v1.CbPolicy.ErrRateConfig.SpecialConfig.errorCodes:type_name -> google.protobuf.Int64Value
	34, // 80: v1.CbPolicy.ErrRateConfig.SpecialConfig.errorRateToPreserved:type_name -> google.protobuf.UInt32Value
	34, // 81: v1.CbPolicy.ErrRateConfig.SpecialConfig.errorRateToOpen:type_name -> google.protobuf.UInt32Value
	35, // 82: v1.DestinationSet.MetadataEntry.value:type_name -> v1.MatchString
	35, // 83: v1.RuleMatcher.DestinationService.method:type_name -> v1.MatchString
	84, // [84:84] is the sub-list for method output_type
	84, // [84:84] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_circuitbreaker_proto_init() }
func file_circuitbreaker_proto_init() {
	if File_circuitbreaker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_circuitbreaker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultDetectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallbackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy_ErrRateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy_SlowRateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy_ConsecutiveErrConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy_ErrRateConfig_SpecialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleMatcher_SourceService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleMatcher_DestinationService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallbackResponse_MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_circuitbreaker_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_circuitbreaker_proto_goTypes,
		DependencyIndexes: file_circuitbreaker_proto_depIdxs,
		EnumInfos:         file_circuitbreaker_proto_enumTypes,
		MessageInfos:      file_circuitbreaker_proto_msgTypes,
	}.Build()
	File_circuitbreaker_proto = out.File
	file_circuitbreaker_proto_rawDesc = nil
	file_circuitbreaker_proto_goTypes = nil
	file_circuitbreaker_proto_depIdxs = nil
}
